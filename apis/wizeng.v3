// Copyright 2025 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Wasm import API that represents basic functionality provided directly by the engine.
import component wizeng {
//TODO	invoke0(SigCache.g_v, WizengModule.invoke0),
//TODO	tail_invoke0(SigCache.g_v, WizengModule.tailInvoke0),
	// Write an error message and trap, exiting.
	def error(start: Pointer, length: u32);
	// Intentionally trigger a crash, i.e. trap, and exit.
	def crash();
	// Force garbage collection to occur.
	def force_gc();
	// Write a signed 32-bit decimal integer to standard out.
	def puti(i: int);
	// Write a string to standard out.
	def puts(start: Pointer, length: u32);
//TODO	puts_array(..., WizengModule.puts_array),
	// Read the "timestamp" counter, a platform-dependent timer which represents cycles
	// on x86-64.
	def rdtsc() -> u64;
}

// A higher-level API defined in terms of the imported API that improves its usability,
// hiding the details of pointers and lengths.
component Wizeng {
	private def chars = ", \t\n"; // save a little space by combining single characters

	def error(msg: string)	{ wizeng.error(Pointer.atContents(msg), u32.!(msg.length)); }
	def crash		= wizeng.crash;
	def force_gc		= wizeng.force_gc;
	def puti		= wizeng.puti;
	def puts(str: string)	{ wizeng.puts(Pointer.atContents(str), u32.!(str.length)); }
	def putr(r: Range<byte>){ wizeng.puts(Pointer.atContents(r), u32.!(r.length)); }
	def tab()		{ wizeng.puts(Pointer.atElement(chars, 2), 1); }
	def sp()		{ wizeng.puts(Pointer.atElement(chars, 1), 1); }
	def ln()		{ wizeng.puts(Pointer.atElement(chars, 3), 1); }
	def csp()		{ wizeng.puts(Pointer.atElement(chars, 0), 2); }
	def rdstc		= wizeng.rdtsc;
}
