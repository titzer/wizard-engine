// Copyright 2025 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Wasm import API for reflecting on the "co-module" (i.e. application module) to which
// a Whamm monitor is attached.
import "whamm:comodule" component whamm_comodule {
	// Return the total size in bytes of the co-module definition.
	def get_module_size() -> u32;
	// Read the path (i.e. filename) of co-module into memory starting at {start}, with a maximum
	// size of {length} bytes. Returns the module size.
	def read_module_path(start: Pointer, length: u32) -> u32;
	// Read the name (i.e. from the names section) of co-module into memory starting at {start},
	// with a maximum size of {length} bytes. Returns the module size.
	def read_module_name(start: Pointer, length: u32) -> u32;
	// Read the entire co-module definition into memory starting at {start}, with a maximum
	// size of {length} bytes. Returns the module size.
	def read_module_def(start: Pointer, length: u32) -> u32;
	// For each of the following get_num_xxx() methods, return the number of respective
	// definitions, including imported definitions.
	def get_num_types() -> u32;
	def get_num_imports() -> u32;
	def get_num_functions() -> u32;
	def get_num_tables() -> u32;
	def get_num_memories() -> u32;
	def get_num_globals() -> u32;
	def get_num_tags() -> u32;
	def get_num_exports() -> u32;
	def get_num_elements() -> u32;
	def get_num_data() -> u32;
	def get_num_custom_sections() -> u32;
	// For a given section {sect}, return the import definition index that defined the
	// respective item in the section, with -1 representing a non-imported definition.
	def get_import_index(sect: byte, index: u32) -> int;
	// Read the bytes of the section {sect} into the given memory range.
	def read_section(sect: byte, start: Pointer, length: u32) -> u32;
	// For each of the following read_xxx_def() methods, read the definition bytes of item
	// at {index} into the given memory range, returning the definition size. If the definition
	// is imported, return 0.
	def read_type_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_function_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_import_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_function_name(index: u32, start: Pointer, length: u32) -> u32;
	def read_function_body(index: u32, start: Pointer, length: u32) -> u32;
	def read_table_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_memory_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_global_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_tag_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_export_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_element_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_data_def(index: u32, start: Pointer, length: u32) -> u32;
	// Read the bytes of a custom section into the given memory range.
	def read_custom_section(index: u32, start: Pointer, length: u32) -> u32;
}

// A higher-level API defined in terms of the imported API that improves its usability,
// hiding the details of pointers and lengths.
component WhammCoModule {
	// Pass-through implementations.
	def get_module_size = whamm_comodule.get_module_size;
	// Read the path (i.e. filename) of co-module into the provided range, returning
	// the written range and the size in bytes.
	def read_module_path = read_into0(whamm_comodule.read_module_path, _);
	// Read the entire co-module definition into the provided range, returning the written
	// range and the size in bytes.
	def read_module_def = read_into0(whamm_comodule.read_module_def, _);
	// Pass-through implementations.
	def get_num_types = whamm_comodule.get_num_types;
	def get_num_imports = whamm_comodule.get_num_imports;
	def get_num_functions = whamm_comodule.get_num_functions;
	def get_num_tables = whamm_comodule.get_num_tables;
	def get_num_memories = whamm_comodule.get_num_memories;
	def get_num_globals = whamm_comodule.get_num_globals;
	def get_num_tags = whamm_comodule.get_num_tags;
	def get_num_exports = whamm_comodule.get_num_exports;
	def get_num_elements = whamm_comodule.get_num_elements;
	def get_num_data = whamm_comodule.get_num_data;
	def get_num_custom_sections = whamm_comodule.get_num_custom_sections;
	def get_import_index = whamm_comodule.get_import_index;

	// Read definition bytes into {Range<byte>} instead of pointer/length, returning the
	// written range and the total size in bytes.
	def read_section = read_into1(whamm_comodule.read_section, _, _);
	def read_type_def = read_into1(whamm_comodule.read_type_def, _, _);
	def read_function_def = read_into1(whamm_comodule.read_function_def, _, _);
	def read_import_def = read_into1(whamm_comodule.read_import_def, _, _);
	def read_function_name = read_into1(whamm_comodule.read_function_name, _, _);
	def read_function_body = read_into1(whamm_comodule.read_function_body, _, _);
	def read_table_def = read_into1(whamm_comodule.read_table_def, _, _);
	def read_memory_def = read_into1(whamm_comodule.read_memory_def, _, _);
	def read_global_def = read_into1(whamm_comodule.read_global_def, _, _);
	def read_tag_def = read_into1(whamm_comodule.read_tag_def, _, _);
	def read_export_def = read_into1(whamm_comodule.read_export_def, _, _);
	def read_element_def = read_into1(whamm_comodule.read_element_def, _, _);
	def read_data_def = read_into1(whamm_comodule.read_data_def, _, _);
	def read_custom_section = read_into1(whamm_comodule.read_custom_section, _, _);

	private def read_into0(read: (Pointer, u32) -> u32, dst: Range<byte>) -> (Range<byte>, u32) {
		var len = read(Pointer.atContents(dst), u32.!(dst.length));
		return if (len < dst.length, (dst[0 ... len], len), (dst, len));
	}
	private def read_into1<T>(read: (T, Pointer, u32) -> u32, dst: Range<byte>, arg: T) -> (Range<byte>, u32) {
		var len = read(arg, Pointer.atContents(dst), u32.!(dst.length));
		return if (len < dst.length, (dst[0 ... len], len), (dst, len));
	}
}
