// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses and runs binary .wasm files.
def main(args: Array<string>) -> int {
	var engine = Engine.new();
	var wasmFiles: Range<string>;
	var pos = 0;
	var err = ErrorGen.new("wizeng");

	// Parse options that start with '-'
	while (pos < args.length) {
		var a = args[pos];
		if (a.length == 0) break;
		if (a[0] != '-') break;
		err.abs(u64.!(pos));
		var ok = OptionsRegistry.parse(a, err);

		if (!ok) {
			if (err.error()) {
				return ErrorBuilder.new()
					.puts(err.filename)
					.puts(": ")
					.puts(err.error_msg)
					.ln()
					.exit(6);
			} else {
				return ErrorBuilder.new()
					.puts("wizeng: unrecognized option ")
					.putsq(a)
					.ln()
					.exit(1);
			}
		}
		engine.extensions = EngineOptions.extensions;
		pos++;
	}
	// Find range of all .wasm files
	var before = pos;
	var skip = 0;
	while (pos < args.length) {
		var a = args[pos];
		if (a.length == 0) break;
		if (Strings.equal("--", a)) { skip = 1; break; } // skip argument separator
		if (!Strings.endsWith(a, ".wasm")) break;
		pos++;
	}
	wasmFiles = args[before ... pos];
	// Program arguments remain after .wasm files or after "--"
	var v = Vector<string>.new();
	if (wasmFiles.length > 0) v.put(wasmFiles[wasmFiles.length - 1]);
	v.putr(args[(pos + skip) ...]);
	var programArgs = v.extract();

	if (WizengOptions.PREGEN_FILE.val != null) {
		var error = Target.pregenIntoFile(WizengOptions.PREGEN_FILE.val);
		if (error != null) return error.exit(2);
		if (wasmFiles.length == 0) return 0; // all done
	}

	if (WizengOptions.helped) return 0;  // printed help, nothing more to do

	if (wasmFiles.length == 0) return ErrorBuilder.new()
		.puts("wizeng: no input files\n")
		.exit(3);

	// Expose the wizeng HostModule if it's an activated extension
	if (engine.extensions.WIZENG) ModuleRegistry.expose("wizeng");

	for (i < wasmFiles.length) {
		var path = wasmFiles[i];
		if (!Strings.endsWith(path, ".wasm")) return ErrorBuilder.new()
			.puts(path)
			.puts(": unknown file format, expected .wasm\n")
			.exit(4);
	}
	var monitors = MonitorOptions.getMonitors().extract();
	var hasMonitors = monitors.length > 0 || BasicTracing.requiresInstrumentation();

	if (hasMonitors) Execute.tiering.onMonitorsStart();

	// Load an instrument all modules.
	var t = WasmMode.loadAndInstrumentModules(engine, monitors, wasmFiles);
	if (t.0 != null) return ErrorBuilder.new()
		.render(t.0.error_code, t.0.filename, t.0.section, t.0.error_index, t.0.error_pos, t.0.error_msg)
		.exit(3);

	// Loading succeeded. Link modules and execute (potentially repeatedly).
	var exit_code = 0;
	for (i < WizengOptions.REPEAT.val) {
		exit_code = WasmMode.linkAndExecuteMain(engine, monitors, t.1, programArgs);
		if (exit_code != 0) break;
	}

	MonitorRegistry.runReports();
	Metrics.report();
	return exit_code;
}

// Options specific to the "wizeng" executable.
component WizengOptions {
	def group = OptionsRegistry.newGroup("WIZENG", null);
	def HELP = group.newFlag("help", printHelp, "Print command-line help.");
	def VERSION = group.newFlag("version", printVersion, "Print build version.");
	def PREGEN_FILE = group.newPathOption("pregen", null, "Pre-generate assembly interpreter and stubs into the given file.");
	def EXPOSE = group.newStringOption("expose", null, "Expose the given host module's functionality to programs.")
		.onSet(ModuleRegistry.expose);
	def PRINT_RESULT = group.newBoolOption("print-result", false, "Print the result of the main function upon exit.");
	def ENTRYPOINT = group.newStringOption("invoke", null, "Invoke the given function.");
	def REPEAT = group.newIntOption("repeat", 1, "Execute the program the given number of times.");
	var helped = false;

	def printVersion(str: string) {
		putWizeng(Trace.OUT).ln();
		if (Version.buildData != null) Trace.OUT.puts("Build data: ").puts(Version.buildData).ln();
		Trace.OUT.flush();
	}
	def printHelp(str: string) {
		helped = true;
		putWizeng(Trace.OUT).ln();
		Trace.OUT.puts("Usage: wizeng [options] <wasm files>\n\n");
		OptionsRegistry.print();
	}
}

def putWizeng(out: StringBuilder) -> StringBuilder {
	return out.puts("Wizard Engine ").puts(Version.version).putc('.').putd(Version.minorVersion);
}
