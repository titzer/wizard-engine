// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component WizengModes {
	// (engine, monitors, files, programArgs) -> exit_code
	var runWasm: (Engine, Range<Monitor>, Range<string>, Array<string>) -> int;
	var runWast: (Engine, Range<Monitor>, Range<string>, Array<string>) -> int;
}

// Parses and runs binary .wasm files.
def main(args: Array<string>) -> int {
	var engine = Engine.new();
	var wasm = Vector<string>.new();
	var wast = Vector<string>.new();
	var pos = 0;
	var err = ErrorGen.new("wizeng");

	// Parse options that start with '-'
	while (pos < args.length) {
		var a = args[pos];
		if (a.length == 0) break;
		if (a[0] != '-') break;
		err.abs(u64.!(pos));
		var ok = OptionsRegistry.parse(a, err);

		if (!ok) {
			if (err.error()) {
				return ErrorBuilder.new()
					.puts(err.filename)
					.puts(": ")
					.puts(err.error_msg)
					.ln()
					.exit(6);
			} else {
				return ErrorBuilder.new()
					.puts("wizeng: unrecognized option ")
					.putsq(a)
					.ln()
					.exit(1);
			}
		}
		pos++;
	}
	engine.extensions = EngineOptions.extensions;
	// Find range of all .wasm or .bin.wast files
	var before = pos;
	var skip = 0;
	while (pos < args.length) {
		var a = args[pos];
		if (a.length == 0) break;
		if (Strings.equal("--", a)) { skip = 1; break; } // skip argument separator
		if (!Strings.endsWith(a, ".wasm") && !Strings.endsWith(a, ".bin.wast")) break;
		pos++;
	}
	for (i = before; i < pos; i++) {
		if (Strings.endsWith(args[i], ".wasm")) wasm.put(args[i]);
		else wast.put(args[i]);
	}
	// Program arguments remain after .wasm files or after "--"
	var v = Vector<string>.new();
	if (wasm.length > 0) v.put(wasm[wasm.length - 1]);
	v.putr(args[(pos + skip) ...]);
	var programArgs = v.extract();

	if (WizengOptions.PREGEN_FILE.val != null) {
		var error = Target.pregenIntoFile(WizengOptions.PREGEN_FILE.val);
		if (error != null) return error.exit(2);
		if (wasm.length == 0) return 0; // all done
	}

	if (WizengOptions.helped) return 0;  // printed help, nothing more to do

	if (wasm.length == 0 && wast.length == 0) return ErrorBuilder.new()
		.puts("wizeng: no input files\n")
		.exit(3);

	// Expose the wizeng HostModule if it's an activated extension
	if (engine.extensions.WIZENG) ModuleRegistry.expose("wizeng");

	var monitors = MonitorOptions.getMonitors().extract();
	var wasmFiles = wasm.extract();
	var wastFiles = wast.extract();
	var exit_code = 0;
	
	if (wasmFiles.length > 0) {
		if (WizengModes.runWasm == null) return ErrorBuilder.new()
			.puts("wizeng: wasm mode was not built\n")
			.exit(3);
		exit_code = WizengModes.runWasm(engine, monitors, wasmFiles, programArgs);
		if (exit_code != 0) return exit_code;
	}
	if (wastFiles.length > 0) {
		if (WizengModes.runWast == null) return ErrorBuilder.new()
			.puts("wizeng: spectest mode was not built\n")
			.exit(3);
		exit_code = WizengModes.runWast(engine, monitors, wastFiles, programArgs);
		if (exit_code != 0) return exit_code;
	}

	MonitorRegistry.runReports();
	Metrics.report();
	return exit_code;
}

// Options specific to the "wizeng" executable.
component WizengOptions {
	def group = OptionsRegistry.newGroup("WIZENG", null);
	def HELP = group.newFlag("help", printHelp, "Print command-line help.");
	def VERSION = group.newFlag("version", printVersion, "Print build version.");
	def PREGEN_FILE = group.newPathOption("pregen", null, "Pre-generate assembly interpreter and stubs into the given file.");
	def EXPOSE = group.newStringOption("expose", null, "Expose the given host module's functionality to programs.")
		.onSet(ModuleRegistry.expose);
	def PRINT_RESULT = group.newBoolOption("print-result", false, "Print the result of the main function upon exit.");
	def ENTRYPOINT = group.newStringOption("invoke", null, "Invoke the given function.");
	def REPEAT = group.newIntOption("repeat", 1, "Execute the program the given number of times.");
	var helped = false;

	def printVersion(str: string) {
		putWizeng(Trace.OUT).ln();
		if (Version.buildData != null) Trace.OUT.puts("Build data: ").puts(Version.buildData).ln();
		Trace.OUT.flush();
	}
	def printHelp(str: string) {
		helped = true;
		putWizeng(Trace.OUT).ln();
		Trace.OUT.puts("Usage: wizeng [options] <wasm files>\n\n");
		OptionsRegistry.print();
	}
}

def putWizeng(out: StringBuilder) -> StringBuilder {
	return out.puts("Wizard Engine ").puts(Version.version).putc('.').putd(Version.minorVersion);
}
