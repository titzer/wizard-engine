// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def unused_ = HostModuleBuilderOf<WaliInstance>.new("wali", WaliInstance.new, WaliInstance.bind)
	.func_iii_l	("SYS_read",			fun i => i.read)
	.func_iii_l	("SYS_write",			fun i => i.write)
	.func_iii_l	("SYS_open",			fun i => i.open)
	.func_i_l	("SYS_close",			fun i => i.close)
	.func_i_l	("SYS_dup",			fun i => i.dup)
	.func_ii_l	("SYS_dup2",			fun i => i.dup2)
	.func_iii_l	("SYS_dup3",			fun i => i.dup3)
	.func_ii_l	("SYS_stat",			fun i => i.stat)
	.func_ili_l	("SYS_lseek",			fun i => i.lseek)
	.func_i_l	("SYS_exit",			fun i => i.exit)
	.func_v_l	("SYS_fork",			fun i => i.fork)
	.func_ii_l	("SYS_access",			fun i => i.access)
	.func_i_l	("SYS_exit_group",		fun i => i.exit_group)
	.func_iii_l	("SYS_sched_getaffinity",	fun i => i.sched_getaffinity)
	.func_i_l	("SYS_set_tid_address",		fun i => i.set_tid_address)
	.func_iiiiil_l	("SYS_mmap",			fun i => i.mmap)
	.func_iii_l	("SYS_fcntl",			fun i => i.fcntl)
	.func_i_l	("SYS_sysinfo",			fun i => i.sysinfo)
	.func_i_l	("SYS_brk",			fun i => i.brk)
	.func_iiii_l	("SYS_prlimit64",		fun i => i.prlimit64)
	.func_ii_l	("SYS_getrlimit",		fun i => i.getrlimit)
	.func_iii_l	("SYS_mprotect",		fun i => i.mprotect)
	.func_iiiii_l	("SYS_mremap",			fun i => i.mremap)
	.func_ii_l	("SYS_munmap",			fun i => i.munmap)
	.func_ii_l	("SYS_fstat",			fun i => i.fstat)
	.func_iiii_l	("SYS_fstatat",			fun i => i.fstatat)
	.func_ii_l	("SYS_lstat",			fun i => i.lstat)
	.func_iii_l	("SYS_writev",			fun i => i.writev)
	.func_iii_l	("SYS_ioctl",			fun i => i.ioctl)
	.func_iiiiii_l	("SYS_futex",			fun i => i.futex)
	.func_iiii_l	("SYS_rt_sigprocmask",		fun i => i.rt_sigprocmask)
	.func_ii_l	("SYS_tkill",			fun i => i.tkill)
	.func_iiii_l	("SYS_rt_sigaction",		fun i => i.rt_sigaction)
	.func_iii_l	("SYS_poll",			fun i => i.poll)
	.func_i_l	("SYS_rt_sigreturn",		fun i => i.rt_sigreturn)
	.func_iiii_l	("SYS_pread64",			fun i => i.pread64)
	.func_iiii_l	("SYS_pwrite64",		fun i => i.pwrite64)
	.func_iii_l	("SYS_readv",			fun i => i.readv)
	.func_i_l	("SYS_pipe",			fun i => i.pipe)
	.func_iiiii_l	("SYS_select",			fun i => i.select)
	.func_v_l	("SYS_sched_yield",		fun i => i.sched_yield)
	.func_iii_l	("SYS_msync",			fun i => i.msync)
	.func_iii_l	("SYS_mincore",			fun i => i.mincore)
	.func_iii_l	("SYS_madvise",			fun i => i.madvise)
	.func_iii_l	("SYS_shmget",			fun i => i.shmget)
	.func_iii_l	("SYS_shmat",			fun i => i.shmat)
	.func_iii_l	("SYS_shmctl",			fun i => i.shmctl)
	.func_v_l	("SYS_pause",			fun i => i.pause)
	.func_ii_l	("SYS_nanosleep",		fun i => i.nanosleep)
	.func_ii_l	("SYS_getitimer",		fun i => i.getitimer)
	.func_i_l	("SYS_alarm",			fun i => i.alarm)
	.func_iii_l	("SYS_setitimer",		fun i => i.setitimer)
	.func_v_l	("SYS_getpid",			fun i => i.getpid)
	.func_iiii_l	("SYS_sendfile",		fun i => i.sendfile)
	.func_iii_l	("SYS_socket",			fun i => i.socket)
	.func_iii_l	("SYS_connect",			fun i => i.connect)
	.func_iii_l	("SYS_accept",			fun i => i.accept)
	.func_iiiiii_l	("SYS_sendto",			fun i => i.sendto)
	.func_iiiiii_l	("SYS_recvfrom",		fun i => i.recvfrom)
	.func_iii_l	("SYS_sendmsg",			fun i => i.sendmsg)
	.func_iii_l	("SYS_recvmsg",			fun i => i.recvmsg)
	.func_ii_l	("SYS_shutdown",		fun i => i.shutdown)
	.func_ii_l	("SYS_listen",			fun i => i.listen)
	.func_iii_l	("SYS_getsockname",		fun i => i.getsockname)
	.func_iii_l	("SYS_getpeername",		fun i => i.getpeername)
	.func_iiii_l	("SYS_socketpair",		fun i => i.socketpair)
	.func_iiiii_l	("SYS_setsockopt",		fun i => i.setsockopt)
	.func_iiiii_l	("SYS_getsockopt",		fun i => i.getsockopt)
	.func_v_l	("SYS_vfork",			fun i => i.vfork)
	.func_iii_l	("SYS_execve",			fun i => i.execve)
	.func_iiii_l	("SYS_wait4",			fun i => i.wait4)
	.func_ii_l	("SYS_kill",			fun i => i.kill)
	.func_i_l	("SYS_uname",			fun i => i.uname)
	.func_iii_l	("SYS_semget",			fun i => i.semget)
	.func_iii_l	("SYS_semop",			fun i => i.semop)
	.func_iiii_l	("SYS_semctl",			fun i => i.semctl)
	.func_i_l	("SYS_shmdt",			fun i => i.shmdt)
	.func_ii_l	("SYS_msgget",			fun i => i.msgget)
	.func_iiii_l	("SYS_msgsnd",			fun i => i.msgsnd)
	.func_iiiii_l	("SYS_msgrcv",			fun i => i.msgrcv)
	.func_iii_l	("SYS_msgctl",			fun i => i.msgctl)
	.func_ii_l	("SYS_flock",			fun i => i.flock)
	.func_i_l	("SYS_fsync",			fun i => i.fsync)
	.func_i_l	("SYS_fdatasync",		fun i => i.fdatasync)
	.func_ii_l	("SYS_truncate",		fun i => i.truncate)
	.func_ii_l	("SYS_ftruncate",		fun i => i.ftruncate)
	.func_iii_l	("SYS_getdents",		fun i => i.getdents)
	.func_ii_l	("SYS_getcwd",			fun i => i.getcwd)
	.func_i_l	("SYS_chdir",			fun i => i.chdir)
	.func_i_l	("SYS_fchdir",			fun i => i.fchdir)
	.func_ii_l	("SYS_rename",			fun i => i.rename)
	.func_ii_l	("SYS_mkdir",			fun i => i.mkdir)
	.func_i_l	("SYS_rmdir",			fun i => i.rmdir)
	.func_ii_l	("SYS_creat",			fun i => i.creat)
	.func_ii_l	("SYS_link",			fun i => i.link)
	.func_i_l	("SYS_unlink",			fun i => i.unlink)
	.func_ii_l	("SYS_symlink",			fun i => i.symlink)
	.func_iii_l	("SYS_readlink",		fun i => i.readlink)
	.func_ii_l	("SYS_chmod",			fun i => i.chmod)
	.func_ii_l	("SYS_fchmod",			fun i => i.fchmod)
	.func_iii_l	("SYS_chown",			fun i => i.chown)
	.func_iii_l	("SYS_fchown",			fun i => i.fchown)
	.func_iii_l	("SYS_lchown",			fun i => i.lchown)
	.func_i_l	("SYS_umask",			fun i => i.umask)
	.func_ii_l	("SYS_gettimeofday",		fun i => i.gettimeofday)
	.func_ii_l	("SYS_getrusage",		fun i => i.getrusage)
	.func_i_l	("SYS_times",			fun i => i.times)
	.func_iiii_l	("SYS_ptrace",			fun i => i.ptrace)
	.func_v_l	("SYS_getuid",			fun i => i.getuid)
	.func_iii_l	("SYS_syslog",			fun i => i.syslog)
	.func_v_l	("SYS_getgid",			fun i => i.getgid)
	.func_i_l	("SYS_setuid",			fun i => i.setuid)
	.func_i_l	("SYS_setgid",			fun i => i.setgid)
	.func_v_l	("SYS_geteuid",			fun i => i.geteuid)
	.func_v_l	("SYS_getegid",			fun i => i.getegid)
	.func_ii_l	("SYS_setpgid",			fun i => i.setpgid)
	.func_v_l	("SYS_getppid",			fun i => i.getppid)
	.func_v_l	("SYS_getpgrp",			fun i => i.getpgrp)
	.func_v_l	("SYS_setsid",			fun i => i.setsid)
	.func_ii_l	("SYS_setreuid",		fun i => i.setreuid)
	.func_ii_l	("SYS_setregid",		fun i => i.setregid)
	.func_ii_l	("SYS_getgroups",		fun i => i.getgroups)
	.func_ii_l	("SYS_setgroups",		fun i => i.setgroups)
	.func_iii_l	("SYS_setresuid",		fun i => i.setresuid)
	.func_iii_l	("SYS_getresuid",		fun i => i.getresuid)
	.func_iii_l	("SYS_setresgid",		fun i => i.setresgid)
	.func_iii_l	("SYS_getresgid",		fun i => i.getresgid)
	.func_i_l	("SYS_getpgid",			fun i => i.getpgid)
	.func_i_l	("SYS_setfsuid",		fun i => i.setfsuid)
	.func_i_l	("SYS_setfsgid",		fun i => i.setfsgid)
	.func_i_l	("SYS_getsid",			fun i => i.getsid)
	.func_ii_l	("SYS_capget",			fun i => i.capget)
	.func_ii_l	("SYS_capset",			fun i => i.capset)
	.func_ii_l	("SYS_rt_sigpending",		fun i => i.rt_sigpending)
	.func_iiii_l	("SYS_rt_sigtimedwait",		fun i => i.rt_sigtimedwait)
	.func_iii_l	("SYS_rt_sigqueueinfo",		fun i => i.rt_sigqueueinfo)
	.func_ii_l	("SYS_rt_sigsuspend",		fun i => i.rt_sigsuspend)
	.func_ii_l	("SYS_sigaltstack",		fun i => i.sigaltstack)
	.func_ii_l	("SYS_utime",			fun i => i.utime)
	.func_iii_l	("SYS_mknod",			fun i => i.mknod)
	.func_i_l	("SYS_uselib",			fun i => i.uselib)
	.func_i_l	("SYS_personality",		fun i => i.personality)
	.func_ii_l	("SYS_ustat",			fun i => i.ustat)
	.func_ii_l	("SYS_statfs",			fun i => i.statfs)
	.func_ii_l	("SYS_fstatfs",			fun i => i.fstatfs)
	.func_iii_l	("SYS_sysfs",			fun i => i.sysfs)
	.func_ii_l	("SYS_getpriority",		fun i => i.getpriority)
	.func_iii_l	("SYS_setpriority",		fun i => i.setpriority)
	.func_ii_l	("SYS_sched_setparam",		fun i => i.sched_setparam)
	.func_ii_l	("SYS_sched_getparam",		fun i => i.sched_getparam)
	.func_iii_l	("SYS_sched_setscheduler",	fun i => i.sched_setscheduler)
	.func_i_l	("SYS_sched_getscheduler",	fun i => i.sched_getscheduler)
	.func_i_l	("SYS_sched_get_priority_max",	fun i => i.sched_get_priority_max)
	.func_i_l	("SYS_sched_get_priority_min",	fun i => i.sched_get_priority_min)
	.func_ii_l	("SYS_sched_rr_get_interval",	fun i => i.sched_rr_get_interval)
	.func_ii_l	("SYS_mlock",			fun i => i.mlock)
	.func_ii_l	("SYS_munlock",			fun i => i.munlock)
	.func_i_l	("SYS_mlockall",		fun i => i.mlockall)
	.func_v_l	("SYS_munlockall",		fun i => i.munlockall)
	.func_v_l	("SYS_vhangup",			fun i => i.vhangup)
	.func_v_l	("SYS_modify_ldt",		fun i => i.modify_ldt)
	.func_ii_l	("SYS_pivot_root",		fun i => i.pivot_root)
	.func_iiiii_l	("SYS_prctl",			fun i => i.prctl)
	.func_v_l	("SYS_arch_prctl",		fun i => i.arch_prctl)
	.func_i_l	("SYS_adjtimex",		fun i => i.adjtimex)
	.func_ii_l	("SYS_setrlimit",		fun i => i.setrlimit)
	.func_i_l	("SYS_chroot",			fun i => i.chroot)
	.func_v_l	("SYS_sync",			fun i => i.sync)
	.func_i_l	("SYS_acct",			fun i => i.acct)
	.func_ii_l	("SYS_settimeofday",		fun i => i.settimeofday)
	.func_iiiii_l	("SYS_mount",			fun i => i.mount)
	.func_v_l	("SYS_umount2",			fun i => i.umount2)
	.func_ii_l	("SYS_swapon",			fun i => i.swapon)
	.func_i_l	("SYS_swapoff",			fun i => i.swapoff)
	.func_iiii_l	("SYS_reboot",			fun i => i.reboot)
	.func_ii_l	("SYS_sethostname",		fun i => i.sethostname)
	.func_ii_l	("SYS_setdomainname",		fun i => i.setdomainname)
	.func_v_l	("SYS_iopl",			fun i => i.iopl)
	.func_iii_l	("SYS_ioperm",			fun i => i.ioperm)
	.func_v_l	("SYS_create_module",		fun i => i.create_module)
	.func_iii_l	("SYS_init_module",		fun i => i.init_module)
	.func_ii_l	("SYS_delete_module",		fun i => i.delete_module)
	.func_v_l	("SYS_get_kernel_syms",		fun i => i.get_kernel_syms)
	.func_v_l	("SYS_query_module",		fun i => i.query_module)
	.func_iiii_l	("SYS_quotactl",		fun i => i.quotactl)
	.func_v_l	("SYS_nfsservctl",		fun i => i.nfsservctl)
	.func_v_l	("SYS_getpmsg",			fun i => i.getpmsg)
	.func_v_l	("SYS_putpmsg",			fun i => i.putpmsg)
	.func_v_l	("SYS_afs_syscall",		fun i => i.afs_syscall)
	.func_v_l	("SYS_tuxcall",			fun i => i.tuxcall)
	.func_v_l	("SYS_security",		fun i => i.security)
	.func_v_l	("SYS_gettid",			fun i => i.gettid)
	.func_iii_l	("SYS_readahead",		fun i => i.readahead)
	.func_iiiii_l	("SYS_setxattr",		fun i => i.setxattr)
	.func_iiiii_l	("SYS_lsetxattr",		fun i => i.lsetxattr)
	.func_iiiii_l	("SYS_fsetxattr",		fun i => i.fsetxattr)
	.func_iiii_l	("SYS_getxattr",		fun i => i.getxattr)
	.func_iiii_l	("SYS_lgetxattr",		fun i => i.lgetxattr)
	.func_iiii_l	("SYS_fgetxattr",		fun i => i.fgetxattr)
	.func_iii_l	("SYS_listxattr",		fun i => i.listxattr)
	.func_iii_l	("SYS_llistxattr",		fun i => i.llistxattr)
	.func_iii_l	("SYS_flistxattr",		fun i => i.flistxattr)
	.func_ii_l	("SYS_removexattr",		fun i => i.removexattr)
	.func_ii_l	("SYS_lremovexattr",		fun i => i.lremovexattr)
	.func_ii_l	("SYS_fremovexattr",		fun i => i.fremovexattr)
	.func_i_l	("SYS_time",			fun i => i.time)
	.func_iii_l	("SYS_sched_setaffinity",	fun i => i.sched_setaffinity)
	.func_v_l	("SYS_set_thread_area",		fun i => i.set_thread_area)
	.func_ii_l	("SYS_io_setup",		fun i => i.io_setup)
	.func_i_l	("SYS_io_destroy",		fun i => i.io_destroy)
	.func_iiiii_l	("SYS_io_getevents",		fun i => i.io_getevents)
	.func_iii_l	("SYS_io_cancel",		fun i => i.io_cancel)
	.func_v_l	("SYS_get_thread_area",		fun i => i.get_thread_area)
	.func_v_l	("SYS_lookup_dcookie",		fun i => i.lookup_dcookie)
	.func_i_l	("SYS_epoll_create",		fun i => i.epoll_create)
	.func_v_l	("SYS_epoll_ctl_old",		fun i => i.epoll_ctl_old)
	.func_v_l	("SYS_epoll_wait_old",		fun i => i.epoll_wait_old)
	.func_iiiii_l	("SYS_remap_file_pages",	fun i => i.remap_file_pages)
	.func_iii_l	("SYS_getdents64",		fun i => i.getdents64)
	.func_v_l	("SYS_restart_syscall",		fun i => i.restart_syscall)
	.func_iiii_l	("SYS_semtimedop",		fun i => i.semtimedop)
	.func_iii_l	("SYS_timer_create",		fun i => i.timer_create)
	.func_iiii_l	("SYS_timer_settime",		fun i => i.timer_settime)
	.func_ii_l	("SYS_timer_gettime",		fun i => i.timer_gettime)
	.func_i_l	("SYS_timer_getoverrun",	fun i => i.timer_getoverrun)
	.func_i_l	("SYS_timer_delete",		fun i => i.timer_delete)
	.func_ii_l	("SYS_clock_settime",		fun i => i.clock_settime)
	.func_ii_l	("SYS_clock_gettime",		fun i => i.clock_gettime)
	.func_ii_l	("SYS_clock_getres",		fun i => i.clock_getres)
	.func_iiii_l	("SYS_clock_nanosleep",		fun i => i.clock_nanosleep)
	.func_iiii_l	("SYS_epoll_wait",		fun i => i.epoll_wait)
	.func_iiii_l	("SYS_epoll_ctl",		fun i => i.epoll_ctl)
	.func_iii_l	("SYS_tgkill",			fun i => i.tgkill)
	.func_ii_l	("SYS_utimes",			fun i => i.utimes)
	.func_v_l	("SYS_vserver",			fun i => i.vserver)
	.func_iiiiii_l	("SYS_mbind",			fun i => i.mbind)
	.func_iii_l	("SYS_set_mempolicy",		fun i => i.set_mempolicy)
	.func_iiiii_l	("SYS_get_mempolicy",		fun i => i.get_mempolicy)
	.func_iiii_l	("SYS_mq_open",			fun i => i.mq_open)
	.func_i_l	("SYS_mq_unlink",		fun i => i.mq_unlink)
	.func_iiiii_l	("SYS_mq_timedsend",		fun i => i.mq_timedsend)
	.func_iiiii_l	("SYS_mq_timedreceive",		fun i => i.mq_timedreceive)
	.func_ii_l	("SYS_mq_notify",		fun i => i.mq_notify)
	.func_iii_l	("SYS_mq_getsetattr",		fun i => i.mq_getsetattr)
	.func_iiii_l	("SYS_kexec_load",		fun i => i.kexec_load)
	.func_iiiii_l	("SYS_waitid",			fun i => i.waitid)
	.func_iiiii_l	("SYS_add_key",			fun i => i.add_key)
	.func_iiii_l	("SYS_request_key",		fun i => i.request_key)
	.func_iiiii_l	("SYS_keyctl",			fun i => i.keyctl)
	.func_iii_l	("SYS_ioprio_set",		fun i => i.ioprio_set)
	.func_ii_l	("SYS_ioprio_get",		fun i => i.ioprio_get)
	.func_v_l	("SYS_inotify_init",		fun i => i.inotify_init)
	.func_iii_l	("SYS_inotify_add_watch",	fun i => i.inotify_add_watch)
	.func_ii_l	("SYS_inotify_rm_watch",	fun i => i.inotify_rm_watch)
	.func_iiii_l	("SYS_migrate_pages",		fun i => i.migrate_pages)
	.func_iiii_l	("SYS_openat",			fun i => i.openat)
	.func_iii_l	("SYS_mkdirat",			fun i => i.mkdirat)
	.func_iiii_l	("SYS_mknodat",			fun i => i.mknodat)
	.func_iiiii_l	("SYS_fchownat",		fun i => i.fchownat)
	.func_iii_l	("SYS_futimesat",		fun i => i.futimesat)
	.func_iiii_l	("SYS_newfstatat",		fun i => i.newfstatat)
	.func_iii_l	("SYS_unlinkat",		fun i => i.unlinkat)
	.func_iiii_l	("SYS_renameat",		fun i => i.renameat)
	.func_iiiii_l	("SYS_linkat",			fun i => i.linkat)
	.func_iii_l	("SYS_symlinkat",		fun i => i.symlinkat)
	.func_iiii_l	("SYS_readlinkat",		fun i => i.readlinkat)
	.func_iii_l	("SYS_fchmodat",		fun i => i.fchmodat)
	.func_iii_l	("SYS_faccessat",		fun i => i.faccessat)
	.func_iiiiii_l	("SYS_pselect6",		fun i => i.pselect6)
	.func_iiiii_l	("SYS_ppoll",			fun i => i.ppoll)
	.func_i_l	("SYS_unshare",			fun i => i.unshare)
	.func_ii_l	("SYS_set_robust_list",		fun i => i.set_robust_list)
	.func_iii_l	("SYS_get_robust_list",		fun i => i.get_robust_list)
	.func_iiiiii_l	("SYS_splice",			fun i => i.splice)
	.func_iiii_l	("SYS_tee",			fun i => i.tee)
	.func_iiii_l	("SYS_sync_file_range",		fun i => i.sync_file_range)
	.func_iiii_l	("SYS_vmsplice",		fun i => i.vmsplice)
	.func_iiiiii_l	("SYS_move_pages",		fun i => i.move_pages)
	.func_iiii_l	("SYS_utimensat",		fun i => i.utimensat)
	.func_iiiiii_l	("SYS_epoll_pwait",		fun i => i.epoll_pwait)
	.func_iii_l	("SYS_signalfd",		fun i => i.signalfd)
	.func_ii_l	("SYS_timerfd_create",		fun i => i.timerfd_create)
	.func_i_l	("SYS_eventfd",			fun i => i.eventfd)
	.func_iiii_l	("SYS_fallocate",		fun i => i.fallocate)
	.func_iiii_l	("SYS_timerfd_settime",		fun i => i.timerfd_settime)
	.func_ii_l	("SYS_timerfd_gettime",		fun i => i.timerfd_gettime)
	.func_iiii_l	("SYS_accept4",			fun i => i.accept4)
	.func_iiii_l	("SYS_signalfd4",		fun i => i.signalfd4)
	.func_ii_l	("SYS_eventfd2",		fun i => i.eventfd2)
	.func_i_l	("SYS_epoll_create1",		fun i => i.epoll_create1)
	.func_ii_l	("SYS_pipe2",			fun i => i.pipe2)
	.func_i_l	("SYS_inotify_init1",		fun i => i.inotify_init1)
	.func_iiiii_l	("SYS_preadv",			fun i => i.preadv)
	.func_iiiii_l	("SYS_pwritev",			fun i => i.pwritev)
	.func_iiii_l	("SYS_rt_tgsigqueueinfo",	fun i => i.rt_tgsigqueueinfo)
	.func_iiiii_l	("SYS_perf_event_open",		fun i => i.perf_event_open)
	.func_iiiii_l	("SYS_recvmmsg",		fun i => i.recvmmsg)
	.func_ii_l	("SYS_fanotify_init",		fun i => i.fanotify_init)
	.func_iiiii_l	("SYS_fanotify_mark",		fun i => i.fanotify_mark)
	.func_iiiii_l	("SYS_name_to_handle_at",	fun i => i.name_to_handle_at)
	.func_iii_l	("SYS_open_by_handle_at",	fun i => i.open_by_handle_at)
	.func_ii_l	("SYS_clock_adjtime",		fun i => i.clock_adjtime)
	.func_i_l	("SYS_syncfs",			fun i => i.syncfs)
	.func_iiii_l	("SYS_sendmmsg",		fun i => i.sendmmsg)
	.func_ii_l	("SYS_setns",			fun i => i.setns)
	.func_iii_l	("SYS_getcpu",			fun i => i.getcpu)
	.func_iiiiii_l	("SYS_process_vm_readv",	fun i => i.process_vm_readv)
	.func_iiiiii_l	("SYS_process_vm_writev",	fun i => i.process_vm_writev)
	.func_iiiii_l	("SYS_kcmp",			fun i => i.kcmp)
	.func_iii_l	("SYS_finit_module",		fun i => i.finit_module)
	.func_iii_l	("SYS_sched_setattr",		fun i => i.sched_setattr)
	.func_iiii_l	("SYS_sched_getattr",		fun i => i.sched_getattr)
	.func_iiiii_l	("SYS_renameat2",		fun i => i.renameat2)
	.func_iii_l	("SYS_seccomp",			fun i => i.seccomp)
	.func_iii_l	("SYS_getrandom",		fun i => i.getrandom)
	.func_ii_l	("SYS_memfd_create",		fun i => i.memfd_create)
	.func_iiiii_l	("SYS_kexec_file_load",		fun i => i.kexec_file_load)
	.func_iii_l	("SYS_bpf",			fun i => i.bpf)
	.func_iiiii_l	("SYS_execveat",		fun i => i.execveat)
	.func_i_l	("SYS_userfaultfd",		fun i => i.userfaultfd)
	.func_iii_l	("SYS_membarrier",		fun i => i.membarrier)
	.func_iii_l	("SYS_mlock2",			fun i => i.mlock2)
	.func_iiiiii_l	("SYS_copy_file_range",		fun i => i.copy_file_range)
	.func_iiiiii_l	("SYS_preadv2",			fun i => i.preadv2)
	.func_iiiiii_l	("SYS_pwritev2",		fun i => i.pwritev2)
	.func_iiii_l	("SYS_pkey_mprotect",		fun i => i.pkey_mprotect)
	.func_ii_l	("SYS_pkey_alloc",		fun i => i.pkey_alloc)
	.func_i_l	("SYS_pkey_free",		fun i => i.pkey_free)
	.func_iiiii_l	("SYS_statx",			fun i => i.statx)
	.func_iiiiii_l	("SYS_io_pgetevents",		fun i => i.io_pgetevents)
	.func_iiii_l	("SYS_rseq",			fun i => i.rseq)
	.func_iiii_l	("SYS_faccessat2",		fun i => i.faccessat2)
	.func_ii_l	("__wasm_init_memory",		fun i => i.wasm_init_memory)
	.func_v_i	("__cl_get_argc",		fun i => i.cl_get_argc)
	.func_i_i	("__cl_get_argv_len",		fun i => i.cl_get_argv_len)
	.func_ii_i	("__cl_copy_argv",		fun i => i.cl_copy_argv)
	.func_v_v	("__call_ctors",		fun i => i.call_ctors)
	.func_v_v	("__call_dtors",		fun i => i.call_dtors)
	.func_u_vr	("__proc_exit",			fun i => i.proc_exit)
	.func_ii_i	("__get_init_envfile",		fun i => i.get_init_envfile)
	.init(WaliInstance.init)
	.getMain(WaliInstance.getMain)
	.register(true);

def TODO_ZERO = 0;
def TODO_EMPTY = ();
def TODO_UNIMPLEMENTED: long = WaliErrno.ENOSYS.code; // returned for any unimplemented call.

// Implements the "wali" module interface as a host module.
class WaliInstance {
	private var memory: Memory;
	private def fdmap = FileDescriptorMap.new(1000); // per-instance: fd table
	private var cmdline_args: Array<string>; // global: environment
	private var cmdline_env: Array<string>; // global: environment, TODO
	private var trace: bool;

	def bind(instance: Instance) {
		memory = instance.findExportOfType<Memory>(null);
	}
	def init(args: Array<string>, t: bool, err: ErrorGen) {
		cmdline_args = args;
		trace = t;
	}
	def getMain(instance: Instance) -> (Function, Array<Value>) {
		var main = instance.findExportOfType<Function>(GlobMatcher.new("_start"));
		if (main == null) {
			for (iex in instance.exports) {
				match (iex) {
					x: Function => {
						// If more than one exported function, don't know
						if (main != null) return (null, null);
						main = x;
					}
				}
			}
		}
		if (main == null) return (null, null);
		if (Arrays.equal(main.sig.params, SigCache.arr_i)) return (main, [Values.box_i(cmdline_args.length)]);
		return (main, Arrays.map(main.sig.params, Values.default));
	}
	def getPath(ptr: u32) -> MaybeTrap<Range<byte>> {
		if (memory == null) return MaybeTrap(null, TrapReason.MEM_OUT_OF_BOUNDS);
		return memory.range_o_32z(ptr, u32.!(LinuxConst.MAXPATHLEN));
	}
	def getRegion(buf: int, len: int) -> MaybeTrap<Range<byte>> {
		if (memory == null) return MaybeTrap(null, TrapReason.MEM_OUT_OF_BOUNDS);
		return memory.range_ol_32(u32.view(buf), u32.view(len));
	}

	//========================================================================================
	// Implementations of exported host functions.
	//========================================================================================
	def read(fd: int, buf: int, len: int) -> long {
		var sys_fd = fdmap.get(fd);
		var region = getRegion(buf, len);
		if (region.reason != TrapReason.NONE) return WaliErrno.EFAULT.code;
		return Linux.syscall(LinuxConst.SYS_read, (sys_fd, Pointer.atContents(region.result), len)).0;
	}
	//========================================================================================
	def write(fd: int, buf: int, len: int) -> long {
		var sys_fd = fdmap.get(fd);
		var region = getRegion(buf, len);
		if (region.reason != TrapReason.NONE) return WaliErrno.EFAULT.code;
		return Linux.syscall(LinuxConst.SYS_write, (sys_fd, Pointer.atContents(region.result), len)).0;
	}
	//========================================================================================
	def open(path: int, flags: int, mode: int) -> long {
		var region = getPath(u32.view(path));
		if (region.reason != TrapReason.NONE) return WaliErrno.EFAULT.code;
		var r = Linux.syscall(LinuxConst.SYS_open, (Pointer.atContents(region.result), flags, mode)).0;
		if (r < 0) return r;
		var fd = fdmap.alloc();
		fdmap.set(fd, int.!(r));
		return fd;
	}
	//========================================================================================
	def close(fd: int) -> long {
		var sys_fd = fdmap.get(fd);
		fdmap.free(fd);
		return Linux.syscall(LinuxConst.SYS_close, sys_fd).0;
	}
	//========================================================================================
	def dup(fd: int) -> long {
		var sys_fd = fdmap.get(fd);
		var r = Linux.syscall(LinuxConst.SYS_dup, sys_fd).0;
		if (r < 0) return r;
		var fd = fdmap.alloc();
		fdmap.set(fd, int.!(r));
		return r;
	}
	//========================================================================================
	def dup2(oldfd: int, newfd: int) -> long {
		var sys_oldfd = fdmap.get(oldfd), sys_newfd = fdmap.get(newfd);
		if (sys_newfd >= 0) {
			var r = Linux.syscall(LinuxConst.SYS_dup2, (sys_oldfd, sys_newfd)).0;
			if (r < 0) return r;
			return newfd;
		}
		var r = Linux.syscall(LinuxConst.SYS_dup, (sys_oldfd)).0;
		if (r < 0) return r;
		fdmap.set(newfd, int.!(r));
		return newfd;
	}
	//========================================================================================
	def dup3(oldfd: int, newfd: int, flags: int) -> long {
		var sys_oldfd = fdmap.get(oldfd), sys_newfd = fdmap.get(newfd);
		if (sys_newfd < 0) {
			var r = Linux.syscall(LinuxConst.SYS_dup, (sys_oldfd)).0;
			if (r < 0) return r;
			sys_newfd = int.!(r);
			fdmap.set(newfd, sys_newfd);
		}
		var r = Linux.syscall(LinuxConst.SYS_dup3, (sys_oldfd, sys_newfd, flags)).0;
		if (r < 0) return r;
		return newfd;
	}
	//========================================================================================
	def stat(path: int, buf: int) -> long {
		var region = getPath(u32.view(path));
		if (region.reason != TrapReason.NONE) return WaliErrno.EFAULT.code;
		var statbuf = getRegion(buf, WaliStruct_stat.size);
		if (statbuf.reason != TrapReason.NONE) return WaliErrno.EFAULT.code;
		return Linux.syscall(LinuxConst.SYS_stat, (Pointer.atContents(region.result), Pointer.atContents(statbuf.result))).0;
	}
	//========================================================================================
	def lseek(fd: int, offset: long, whence: int) -> long {
		var sys_fd = fdmap.get(fd);
		return Linux.syscall(LinuxConst.SYS_lseek, (sys_fd, offset, whence)).0;
	}
	//========================================================================================
	def exit(code: int) -> long {
		return Linux.syscall(LinuxConst.SYS_exit, code).0;
	}
	//========================================================================================
	def fork() -> long {
		return Linux.syscall(LinuxConst.SYS_fork, ()).0;
	}
	//========================================================================================
	def access(path: int, mode: int) -> long {
		var region = getPath(u32.view(path));
		if (region.reason != TrapReason.NONE) return WaliErrno.EFAULT.code;
		return Linux.syscall(LinuxConst.SYS_access, (Pointer.atContents(region.result), mode)).0;
	}
	//========================================================================================
	def exit_group(code: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sched_getaffinity(pid: int, cpusetsize: int, mask: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def set_tid_address(tidptr: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mmap(addr: int, length: int, prot: int, flags: int, fd: int, offset: long) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fcntl(fd: int, cmd: int, arg: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sysinfo(info: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def brk(brk: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def prlimit64(pid: int, resource: int, new_limit: int, old_limit: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getrlimit(resource: int, rlim: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mprotect(addr: int, len: int, prot: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mremap(old_address: int, old_size: int, new_size: int, flags: int, new_address: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def munmap(addr: int, len: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fstat(fd: int, statbuf: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fstatat(dfd: int, filename: int, statbuf: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def lstat(pathname: int, statbuf: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def writev(fd: int, iov: int, iovcnt: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def ioctl(fd: int, request: int, argp: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def futex(uaddr: int, futex_op: int, val: int, timeout: int, uaddr2: int, val3: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def rt_sigprocmask(how: int, set: int, oldset: int, sigsetsize: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def tkill(tid: int, sig: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def rt_sigaction(sig: int, act: int, oact: int, sigsetsize: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def poll(ufds: int, nfds: int, timeout: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def rt_sigreturn(unused: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def pread64(fd: int, buf: int, count: int, pos: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def pwrite64(fd: int, buf: int, count: int, pos: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def readv(fd: int, vec: int, vlen: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def pipe(fildes: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def select(n: int, inp: int, outp: int, exp: int, tvp: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sched_yield() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def msync(start: int, len: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mincore(start: int, len: int, vec: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def madvise(start: int, len: int, behavior: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def shmget(key: int, size: int, flag: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def shmat(shmid: int, shmaddr: int, shmflg: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def shmctl(shmid: int, cmd: int, buf: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def pause() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def nanosleep(rqtp: int, rmtp: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getitimer(which: int, value: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def alarm(seconds: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setitimer(which: int, value: int, ovalue: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getpid() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sendfile(out_fd: int, in_fd: int, offset: int, count: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def socket(domain: int, type_: int, protocol: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def connect(fd: int, addr: int, addrlen: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def accept(fd: int, addr: int, addrlen: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sendto(fd: int, buf: int, len: int, flags: int, dest_addr: int, addrlen: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def recvfrom(fd: int, buf: int, len: int, flags: int, src_addr: int, addrlen: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sendmsg(fd: int, msg: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def recvmsg(fd: int, msg: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def shutdown(fd: int, how: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def listen(fd: int, backlog: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getsockname(fd: int, addr: int, addrlen: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getpeername(fd: int, addr: int, addrlen: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def socketpair(domain: int, type_: int, protocolint: int, buf: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setsockopt(fd: int, level: int, optname: int, optval: int, optlen: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getsockopt(fd: int, level: int, optname: int, optval: int, optlen: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def vfork() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def execve(filename: int, argv: int, envp: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def wait4(pid: int, stat_addr: int, options: int, ru: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def kill(pid: int, sig: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def uname(buf: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def semget(key: int, nsems: int, semflg: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def semop(semid: int, sops: int, nsops: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def semctl(semid: int, semnum: int, cmd: int, arg: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def shmdt(shmaddr: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def msgget(key: int, msgflg: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def msgsnd(msqid: int, msgp: int, msgsz: int, msgflg: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def msgrcv(msqid: int, msgp: int, msgsz: int, msgtyp: int, msgflg: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def msgctl(msqid: int, cmd: int, buf: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def flock(fd: int, cmd: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fsync(fd: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fdatasync(fd: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def truncate(path: int, length: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def ftruncate(fd: int, length: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getdents(fd: int, dirent: int, count: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getcwd(buf: int, size: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def chdir(filename: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fchdir(fd: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def rename(oldname: int, newname: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mkdir(pathname: int, mode: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def rmdir(pathname: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def creat(pathname: int, mode: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def link(oldname: int, newname: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def unlink(pathname: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def symlink(old: int, new_: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def readlink(path: int, buf: int, bufsiz: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def chmod(filename: int, mode: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fchmod(fd: int, mode: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def chown(filename: int, user: int, group: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fchown(fd: int, user: int, group: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def lchown(filename: int, user: int, group: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def umask(mask: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def gettimeofday(tv: int, tz: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getrusage(who: int, ru: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def times(tbuf: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def ptrace(request: int, pid: int, addr: int, data: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getuid() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def syslog(type_: int, buf: int, len: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getgid() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setuid(uid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setgid(gid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def geteuid() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getegid() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setpgid(pid: int, pgid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getppid() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getpgrp() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setsid() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setreuid(ruid: int, euid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setregid(rgid: int, egid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getgroups(gidsetsize: int, grouplist: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setgroups(gidsetsize: int, grouplist: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setresuid(ruid: int, euid: int, suid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getresuid(ruid: int, euid: int, suid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setresgid(rgid: int, egid: int, sgid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getresgid(rgid: int, egid: int, sgid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getpgid(pid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setfsuid(uid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setfsgid(gid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getsid(pid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def capget(header: int, dataptr: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def capset(header: int, data: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def rt_sigpending(set: int, sigsetsize: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def rt_sigtimedwait(uthese: int, uinfo: int, uts: int, sigsetsize: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def rt_sigqueueinfo(pid: int, sig: int, uinfo: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def rt_sigsuspend(unewset: int, sigsetsize: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sigaltstack(uss: int, uoss: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def utime(filename: int, times: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mknod(filename: int, mode: int, dev: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def uselib(library: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def personality(personality: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def ustat(dev: int, ubuf: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def statfs(path: int, buf: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fstatfs(fd: int, buf: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sysfs(option: int, arg1: int, arg2: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getpriority(which: int, who: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setpriority(which: int, who: int, niceval: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sched_setparam(pid: int, param: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sched_getparam(pid: int, param: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sched_setscheduler(pid: int, policy: int, param: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sched_getscheduler(pid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sched_get_priority_max(policy: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sched_get_priority_min(policy: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sched_rr_get_interval(pid: int, interval: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mlock(start: int, len: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def munlock(start: int, len: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mlockall(flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def munlockall() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def vhangup() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def modify_ldt() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def pivot_root(new_root: int, put_old: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def prctl(option: int, arg2: int, arg3: int, arg4: int, arg5: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def arch_prctl() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def adjtimex(txc_p: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setrlimit(resource: int, rlim: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def chroot(filename: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sync() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def acct(name: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def settimeofday(tv: int, tz: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mount(dev_name: int, dir_name: int, type_: int, flags: int, data: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def umount2() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def swapon(specialfile: int, swap_flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def swapoff(specialfile: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def reboot(magic1: int, magic2: int, cmd: int, arg: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sethostname(name: int, len: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setdomainname(name: int, len: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def iopl() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def ioperm(from: int, num: int, on: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def create_module() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def init_module(umod: int, len: int, uargs: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def delete_module(name_user: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def get_kernel_syms() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def query_module() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def quotactl(cmd: int, special: int, id: int, addr: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def nfsservctl() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getpmsg() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def putpmsg() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def afs_syscall() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def tuxcall() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def security() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def gettid() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def readahead(fd: int, offset: int, count: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setxattr(path: int, name: int, value: int, size: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def lsetxattr(path: int, name: int, value: int, size: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fsetxattr(fd: int, name: int, value: int, size: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getxattr(path: int, name: int, value: int, size: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def lgetxattr(path: int, name: int, value: int, size: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fgetxattr(fd: int, name: int, value: int, size: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def listxattr(path: int, list: int, size: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def llistxattr(path: int, list: int, size: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def flistxattr(fd: int, list: int, size: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def removexattr(path: int, name: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def lremovexattr(path: int, name: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fremovexattr(fd: int, name: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def time(tloc: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sched_setaffinity(pid: int, len: int, user_mask_ptr: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def set_thread_area() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def io_setup(nr_reqs: int, ctx: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def io_destroy(ctx: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def io_getevents(ctx_id: int, min_nr: int, nr: int, events: int, timeout: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def io_cancel(ctx_id: int, iocb: int, result: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def get_thread_area() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def lookup_dcookie() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def epoll_create(size: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def epoll_ctl_old() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def epoll_wait_old() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def remap_file_pages(start: int, size: int, prot: int, pgoff: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getdents64(fd: int, dirent: int, count: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def restart_syscall() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def semtimedop(semid: int, sops: int, nsops: int, timeout: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def timer_create(which_clock: int, timer_event_spec: int, created_timer_id: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def timer_settime(timer_id: int, flags: int, new_setting: int, old_setting: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def timer_gettime(timer_id: int, setting: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def timer_getoverrun(timer_id: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def timer_delete(timer_id: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def clock_settime(which_clock: int, tp: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def clock_gettime(which_clock: int, tp: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def clock_getres(which_clock: int, tp: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def clock_nanosleep(which_clock: int, flags: int, rqtp: int, rmtp: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def epoll_wait(epfd: int, events: int, maxevents: int, timeout: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def epoll_ctl(epfd: int, op: int, fd: int, event: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def tgkill(tgid: int, pid: int, sig: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def utimes(filename: int, utimes: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def vserver() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mbind(start: int, len: int, mode: int, nmask: int, maxnode: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def set_mempolicy(mode: int, nmask: int, maxnode: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def get_mempolicy(policy: int, nmask: int, maxnode: int, addr: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mq_open(name: int, oflag: int, mode: int, attr: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mq_unlink(name: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mq_timedsend(mqdes: int, msg_ptr: int, msg_len: int, msg_prio: int, abs_timeout: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mq_timedreceive(mqdes: int, msg_ptr: int, msg_len: int, msg_prio: int, abs_timeout: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mq_notify(mqdes: int, notification: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mq_getsetattr(mqdes: int, mqstat: int, omqstat: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def kexec_load(entry: int, nr_segments: int, segments: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def waitid(which: int, pid: int, infop: int, options: int, ru: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def add_key(type_: int, description_: int, payload_: int, plen: int, destringid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def request_key(type_: int, description_: int, callout_info_: int, destringid: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def keyctl(cmd: int, arg2: int, arg3: int, arg4: int, arg5: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def ioprio_set(which: int, who: int, ioprio: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def ioprio_get(which: int, who: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def inotify_init() => TODO_UNIMPLEMENTED;
	//========================================================================================
	def inotify_add_watch(fd: int, path: int, mask: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def inotify_rm_watch(fd: int, wd: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def migrate_pages(pid: int, maxnode: int, from: int, to: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def openat(dfd: int, filename: int, flags: int, mode: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mkdirat(dfd: int, pathname: int, mode: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mknodat(dfd: int, filename: int, mode: int, dev: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fchownat(dfd: int, filename: int, user: int, group: int, flag: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def futimesat(dfd: int, filename: int, utimes: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def newfstatat(dfd: int, filename: int, statbuf: int, flag: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def unlinkat(dfd: int, pathname: int, flag: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def renameat(olddfd: int, oldname: int, newdfd: int, newname: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def linkat(olddfd: int, oldname: int, newdfd: int, newname: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def symlinkat(oldname: int, newdfd: int, newname: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def readlinkat(dfd: int, path: int, buf: int, bufsiz: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fchmodat(dfd: int, filename: int, mode: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def faccessat(dfd: int, filename: int, mode: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def pselect6(nfds: int, readfds: int, writefds: int, exceptfds: int, timeout: int, sigmask: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def ppoll(buf: int, a2: int, timeout: int, sigmask: int, len: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def unshare(unshare_flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def set_robust_list(head: int, len: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def get_robust_list(pid: int, head_ptr: int, len_ptr: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def splice(fd_in: int, off_in: int, fd_out: int, off_out: int, len: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def tee(fdin: int, fdout: int, len: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sync_file_range(fd: int, offset: int, nbytes: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def vmsplice(fd: int, iov: int, nr_segs: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def move_pages(pid: int, nr_pages: int, pages: int, nodes: int, status: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def utimensat(dfd: int, filename: int, utimes: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def epoll_pwait(epfd: int, events: int, maxevents: int, timeout: int, sigmask: int, sigsetsize: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def signalfd(ufd: int, user_mask: int, sizemask: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def timerfd_create(clockid: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def eventfd(count: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fallocate(fd: int, mode: int, offset: int, len: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def timerfd_settime(ufd: int, flags: int, utmr: int, otmr: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def timerfd_gettime(ufd: int, otmr: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def accept4(fd: int, addr: int, addrlen: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def signalfd4(ufd: int, user_mask: int, sizemask: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def eventfd2(count: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def epoll_create1(flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def pipe2(fildes: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def inotify_init1(flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def preadv(fd: int, vec: int, vlen: int, pos_l: int, pos_h: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def pwritev(fd: int, vec: int, vlen: int, pos_l: int, pos_h: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def rt_tgsigqueueinfo(tgid: int, pid: int, sig: int, uinfo: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def perf_event_open(attr_uptr: int, pid: int, cpu: int, group_fd: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def recvmmsg(fd: int, msg: int, vlen: int, flags: int, timeout: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fanotify_init(flags: int, event_f_flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def fanotify_mark(fanotify_fd: int, flags: int, mask: int, fd: int, pathname: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def name_to_handle_at(dfd: int, name: int, handle: int, mnt_id: int, flag: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def open_by_handle_at(mountdirfd: int, handle: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def clock_adjtime(which_clock: int, tx: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def syncfs(fd: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sendmmsg(fd: int, msg: int, vlen: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def setns(fd: int, nstype: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getcpu(cpu: int, node: int, cache: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def process_vm_readv(pid: int, lvec: int, liovcnt: int, rvec: int, riovcnt: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def process_vm_writev(pid: int, lvec: int, liovcnt: int, rvec: int, riovcnt: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def kcmp(pid1: int, pid2: int, type_: int, idx1: int, idx2: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def finit_module(fd: int, uargs: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sched_setattr(pid: int, attr: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def sched_getattr(pid: int, attr: int, size: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def renameat2(olddfd: int, oldname: int, newdfd: int, newname: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def seccomp(op: int, flags: int, uargs: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def getrandom(buf: int, count: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def memfd_create(uname_ptr: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def kexec_file_load(kernel_fd: int, initrd_fd: int, cmdline_len: int, cmdline_ptr: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def bpf(cmd: int, attr: int, size: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def execveat(dfd: int, filename: int, argv: int, envp: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def userfaultfd(flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def membarrier(cmd: int, flags: int, cpu_id: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def mlock2(start: int, len: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def copy_file_range(fd_in: int, off_in: int, fd_out: int, off_out: int, len: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def preadv2(fd: int, vec: int, vlen: int, pos_l: int, pos_h: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def pwritev2(fd: int, vec: int, vlen: int, pos_l: int, pos_h: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def pkey_mprotect(start: int, len: int, prot: int, pkey: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def pkey_alloc(flags: int, init_val: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def pkey_free(pkey: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def statx(dfd: int, path: int, flags: int, mask: int, buffer: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def io_pgetevents(ctx_id: int, min_nr: int, nr: int, events: int, timeout: int, sig: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def rseq(rseq: int, rseq_len: int, flags: int, sig: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def faccessat2(dfd: int, filename: int, mode: int, flags: int) => TODO_UNIMPLEMENTED;
	//========================================================================================
	def wasm_init_memory(x: int, y: int) -> long {
		return TODO_ZERO;
	}
	//========================================================================================
	def cl_get_argc() -> int {
		return if(cmdline_args != null, cmdline_args.length);
	}
	//========================================================================================
	def cl_get_argv_len(index: int) -> int {
		if (cmdline_args == null || index >= cmdline_args.length) return 0;
		return cmdline_args[index].length;
	}
	//========================================================================================
	def cl_copy_argv(buf: int, index: int) -> int {
		if (cmdline_args == null || index >= cmdline_args.length) return 0;
		var str = cmdline_args[index];
		var reason = memory.copyIn(u32.view(buf), str, 0, u32.!(str.length));
		if (reason != TrapReason.NONE) return TODO_ZERO; // trap instead?
		return str.length;
	}
	//========================================================================================
	def call_ctors() {
		return TODO_EMPTY;
	}
	//========================================================================================
	def call_dtors() {
		return TODO_EMPTY;
	}
	//========================================================================================
	def proc_exit(code: u32) -> HostResult {
		return HostResult.Throw(Exit.new(code));
	}
	//========================================================================================
	def get_init_envfile(x: int, y: int) -> int {
		return TODO_ZERO;
	}
}

layout WaliStruct_stat { // TODO: copied from Virgil x86-64-linux
	+0	st_dev:		u64;
	+8	st_ino:		u64;
	+16	st_mode:	u64;
	+24	st_nlink:	u64;
//	+28	st_uid:		u32;
	+32	st_gid:		u32;
	+48	st_size:	u64;
	+56	st_blksize:	u64;
	+64	st_blocks:	u64;
	+72	st_atim:	timespec;
	+88	st_mtim:	timespec;
	+104	st_ctim:	timespec;
	=144;
}
