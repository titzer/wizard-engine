// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def unused_ = HostModuleBuilderOf<WaliInstance>.new("wali", WaliInstance.new)
	.func_M("SYS_read", SigCache.iii_l, WaliInstance.read)
	.func_M("SYS_write", SigCache.iii_l, WaliInstance.write)
	.func_M("SYS_open", SigCache.iii_l, WaliInstance.open)
	.func_M("SYS_close", SigCache.i_l, WaliInstance.close)
	.func_M("SYS_dup", SigCache.i_l, WaliInstance.dup)
	.func_M("SYS_dup2", SigCache.ii_l, WaliInstance.dup2)
	.func_M("SYS_dup3", SigCache.iii_l, WaliInstance.dup3)
	.func_M("SYS_stat", SigCache.ii_l, WaliInstance.stat)
	.func_M("SYS_lseek", SigCache.ili_l, WaliInstance.lseek)
	.func_M("SYS_exit", SigCache.i_l, WaliInstance.exit)
	.func_M("SYS_exit_group", SigCache.i_l, WaliInstance.exit_group)
	.func_M("SYS_fork", SigCache.v_l, WaliInstance.fork)
	.func_M("SYS_access", SigCache.ii_l, WaliInstance.access)
	.func_M("SYS_sched_getaffinity", SigCache.iii_l, WaliInstance.sched_getaffinity)
	.func_M("SYS_set_tid_address", SigCache.i_l, WaliInstance.set_tid_address)
	.func_M("SYS_mmap", SigCache.iiiiil_l, WaliInstance.mmap)
	.func_M("SYS_fcntl", SigCache.iii_l, WaliInstance.fcntl)
	.func_M("SYS_sysinfo", SigCache.i_l, WaliInstance.sysinfo)
	.func_M("SYS_brk", SigCache.i_l, WaliInstance.brk)
	.func_M("SYS_prlimit64", SigCache.iiii_l, WaliInstance.prlimit64)
	.func_M("SYS_getrlimit", SigCache.ii_l, WaliInstance.getrlimit)
	.func_M("SYS_mprotect", SigCache.iii_l, WaliInstance.mprotect)
	.func_M("SYS_mremap", SigCache.iiiii_l, WaliInstance.mremap)
	.func_M("SYS_munmap", SigCache.ii_l, WaliInstance.munmap)
	.func_M("SYS_fstat", SigCache.ii_l, WaliInstance.fstat)
	.func_M("SYS_fstatat", SigCache.iiii_l, WaliInstance.fstatat)
	.func_M("SYS_lstat", SigCache.ii_l, WaliInstance.lstat)
	.func_M("SYS_writev", SigCache.iii_l, WaliInstance.writev)
	.func_M("SYS_ioctl", SigCache.iii_l, WaliInstance.ioctl)
	.func_M("SYS_futex", SigCache.iiiiii_l, WaliInstance.futex)
	.func_M("SYS_rt_sigprocmask", SigCache.iiii_l, WaliInstance.rt_sigprocmask)
	.func_M("SYS_tkill", SigCache.ii_l, WaliInstance.tkill)
	.func_M("SYS_rt_sigaction", SigCache.iiii_l, WaliInstance.rt_sigaction)
	.func_M("__wasm_init_memory", SigCache.ii_l, WaliInstance.wasm_init_memory)
	.func_M("__cl_get_argc", SigCache.v_i, WaliInstance.cl_get_argc)
	.func_M("__cl_get_argv_len", SigCache.i_i, WaliInstance.cl_get_argv_len)
	.func_M("__cl_copy_argv", SigCache.ii_i, WaliInstance.cl_copy_argv)
	.func_M("__call_ctors", SigCache.v_v, WaliInstance.call_ctors)
	.func_M("__call_dtors", SigCache.v_v, WaliInstance.call_dtors)
	.func_M("__proc_exit", SigCache.i_v, WaliInstance.proc_exit)
	.func_M("__get_init_envfile", SigCache.ii_i, WaliInstance.get_init_envfile)
	.postprocess(WaliInstance.setMemory)
	.init(init)
	.getMain(getMain)
	.register(true);

class WaliInstance {
	private var memory: Memory;
	private def fdmap = FileDescriptorMap.new(MAX_FDS); // per-instance: fd table
	// TODO: per-instance memory mappings

	def setMemory(error: ErrorGen, instance: Instance) {
		// Find memory and save internally
		memory = instance.findExportOfType<Memory>(null);
	}

	def getSysFd(args: Range<Value>, n: int) -> int {
		return fdmap.get(Values.unbox_i(args[n]));
	}
	def getRegion(args: Range<Value>, n: int) -> MaybeTrap<Range<byte>> {
		var ptr = Values.unbox_u(args[n]);
		var len = Values.unbox_u(args[n+1]);
		return memory.range_ol_32(ptr, len);
	}
	def getRegionOf(args: Range<Value>, n: int, len: u32) -> MaybeTrap<Range<byte>> {
		var ptr = Values.unbox_u(args[n]);
		return memory.range_ol_32(ptr, len);
	}
	def getPath(args: Range<Value>, n: int) -> MaybeTrap<Range<byte>> {
		var ptr = Values.unbox_u(args[n]);
		return memory.range_o_32z(ptr, u32.!(LinuxConst.MAXPATHLEN));
	}
	def syscall<T>(num: int, args: T) -> HostResult.Value1 {
		var r = Linux.syscall(num, args);
		return HostResult.Value1(Values.box_l(r.0));
	}

	//========================================================================================
	// Exported functions.
	//========================================================================================
	def read(args: Range<Value>) -> HostResult {
		return WaliCheck.Syscall(
			fdmap,
			memory,
			ArgType.FD_POINTER_LEN,
			args,
			LinuxConst.SYS_read,
			WaliImpl.passthrough<(i32, Pointer, i32)>
		);
	}
	def write(args: Range<Value>) -> HostResult {
		return WaliCheck.Syscall(
			fdmap,
			memory,
			ArgType.FD_POINTER_LEN,
			args,
			LinuxConst.SYS_write,
			WaliImpl.passthrough<(i32, Pointer, i32)>
		);
	}
	def open(args: Range<Value>) -> HostResult {
		return WaliCheck.Syscall(
			fdmap,
			memory,
			ArgType.PATH_U_U,
			args,
			LinuxConst.SYS_open,
			WaliImpl.open
		);
	}
	def lseek(args: Range<Value>) -> HostResult {
		return WaliCheck.Syscall(
			fdmap,
			memory,
			ArgType.FD_L_I,
			args,
			LinuxConst.SYS_lseek,
			WaliImpl.passthrough<(i32, i64, i32)>
		);
	}
	def close(args: Range<Value>) -> HostResult {
		return WaliCheck.Syscall(
			fdmap,
			memory,
			ArgType.FD,
			args,
			LinuxConst.SYS_close,
			WaliImpl.close
		);
	}
	def dup(args: Range<Value>) -> HostResult {
		return WaliCheck.Syscall(
			fdmap,
			memory,
			ArgType.FD,
			args,
			LinuxConst.SYS_dup,
			WaliImpl.dup
		);
	}
	def dup2(args: Range<Value>) -> HostResult {
		return WaliCheck.Syscall(
			fdmap,
			memory,
			ArgType.FD_I,
			args,
			LinuxConst.SYS_dup2,
			WaliImpl.dup2<(i32, i32)>
		);
	}
	def dup3(args: Range<Value>) -> HostResult {
		return WaliCheck.Syscall(
			fdmap,
			memory,
			ArgType.FD_I_I,
			args,
			LinuxConst.SYS_dup3,
			// Reusing dup2 wrapper
			WaliImpl.dup2<(i32, i32, i32)>
		);
	}
	def stat(args: Range<Value>) -> HostResult {
		return WaliCheck.Syscall(
			fdmap,
			memory,
			ArgType.PATH_STAT,
			args,
			LinuxConst.SYS_stat,
			WaliImpl.passthrough<(Pointer, Pointer)>
		);
	}
	def exit(args: Range<Value>) -> HostResult {
		return WaliCheck.Syscall(
			fdmap,
			memory,
			ArgType.Void,
			args,
			LinuxConst.SYS_exit,
			WaliImpl.passthrough<()>
		);
	}
	def exit_group(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def fork(args: Range<Value>) -> HostResult {
		return WaliCheck.Syscall(
			fdmap,
			memory,
			ArgType.Void,
			args,
			LinuxConst.SYS_fork,
			WaliImpl.passthrough<()>
		);
	}
	def access(args: Range<Value>) -> HostResult {
		return WaliCheck.Syscall(
			fdmap,
			memory,
			ArgType.PATH_U,
			args,
			LinuxConst.SYS_access,
			WaliImpl.passthrough<(Pointer, u32)>
		);
	}
	def sched_getaffinity(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def set_tid_address(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def mmap(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def fcntl(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def sysinfo(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def brk(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def prlimit64(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def getrlimit(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def mprotect(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def mremap(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def munmap(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	// TODO:
	def fstat(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def fstatat(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def lstat(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def writev(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def ioctl(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def futex(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def rt_sigprocmask(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def tkill(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def rt_sigaction(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
	}
	def get_init_envfile(args: Range<Value>) -> HostResult {
		//TODO: implement WALI env
		return HostResult.Value0;
	}
	def proc_exit(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Exit.new(Values.unbox_u(args[0])));
	}
	def wasm_init_memory(args: Range<Value>) -> HostResult {
		return HostResult.Value0;
	}
	def call_dtors(args: Range<Value>) -> HostResult {
		return HostResult.Value0;
	}
	def call_ctors(args: Range<Value>) -> HostResult {
		return HostResult.Value0;
	}
	def cl_get_argc(args: Range<Value>) -> HostResult {
		var count = if(cmdline_args != null, cmdline_args.length);
		return HostResult.Value1(Values.box_i(count));
	}
	def cl_get_argv_len(args: Range<Value>) -> HostResult {
		var index = Values.unbox_u(args[0]);
		if (cmdline_args == null || index >= cmdline_args.length) return ZERO;
		var str = cmdline_args[index];
		return HostResult.Value1(Values.box_i(str.length));
	}
	def cl_copy_argv(args: Range<Value>) -> HostResult {
		var index = Values.unbox_u(args[1]);
		if (cmdline_args == null || index >= cmdline_args.length) return ZERO;
		var str = cmdline_args[index];
		var reason = memory.copyIn(Values.unbox_u(args[0]), str, 0, u32.!(str.length));
		if (reason != TrapReason.NONE) return HostResult.Throw(Trap.new(reason, null, null));
		return HostResult.Value1(Values.box_i(str.length));
	}
}

def MAX_FDS = 1000;
var cmdline_args: Array<string>; // global: environment
var cmdline_env: Array<string>; // global: environment, TODO
var trace: bool;

def ZERO = HostResult.Value1(Values.I32_0);
def EBADFD = HostResult.Value1(Values.box_i(LinuxConst.EBADFD));

def init(args: Array<string>, t: bool, err: ErrorGen) {
	cmdline_args = args;
	trace = t;
}

def getMain(instance: Instance) -> (Function, Array<Value>) {
	var main = instance.findExportOfType<Function>(GlobMatcher.new("_start"));
	if (main == null) {
		for (iex in instance.exports) {
			match (iex) {
				x: Function => {
					// If more than one exported function, don't know
					if (main != null) return (null, null);
					main = x;
				}
			}
		}
	}
	if (main == null) return (null, null);
	if (Arrays.equal(main.sig.params, SigCache.arr_i)) return (main, [Values.box_i(cmdline_args.length)]);
	return (main, Arrays.map(main.sig.params, Values.default));
}

def MINUS_1 = HostResult.Value1(Value.I64(0xFFFFFFFF_FFFFFFFFuL));


layout WaliStruct_stat { // TODO
	=0;
}
