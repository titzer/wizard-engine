// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Builds simple modules that do not have any instance state.
// Simplifies the more complicated interface of the superclass {HostModuleBuilderOf}, so that
// a user can simply instantiate this class without type parameters.
class HostModuleBuilder extends HostModuleBuilderOf<void> {
	new(name: string) super(name, void.!<void>, null) { }
}

// Builds more complex modules that have instance state in the form of the <C> type parameter.
// The {tnew} function should create the state object <C>.
class HostModuleBuilderOf<C>(name: string, tnew: void -> C, tbind: (C, Instance) -> void) {
	private var module = HostModuleOf<C>.new(name, tnew, tbind);

	// Adds a global exportable to the host module.
	def global(name: string, obj: Global) -> this {
		module.map[name] = obj;
	}
	// Adds a memory exportable to the host module.
	def memory(name: string, obj: Memory) -> this {
		module.map[name] = obj;
	}
	// Adds a simple named function with a static signature.
	def func(name: string, sig: SigDecl, hf: Range<Value> -> HostResult) -> this {
		module.map[name] = HostFunction.new(name, sig, hf);
	}
	// Adds a simple named function with a static signature.
	def func2(name: string, hf: HostFunc) -> this {
		module.map[name] = HostFunction.new(name, hf.sig, hf.invoke);
	}
	// Adds a simple named function with a static signature, but the function is created from a <C>.
	def func_C(name: string, sig: SigDecl, hfp: C -> (Range<Value> -> HostResult)) -> this {
		module.adapters[name] = fun c => HostFunc(sig, hfp(c));
	}
	// Adds a simple named function with a static signature, but the function is a "member" of <C>.
	def func_M(name: string, sig: SigDecl, hfp: (C, Range<Value>) -> HostResult) -> this {
		module.adapters[name] = fun c => HostFunc(sig, hfp(c, _));
	}
	// Adds typed functions to the host module.
	def func_iii_l(name: string, hfp: C -> (int, int, int) -> long) -> this			{ module.adapters[name] = fun c => HostAdapters.iii_l(hfp(c)); }
	def func_i_i(name: string, hfp: C -> int -> int) -> this				{ module.adapters[name] = fun c => HostAdapters.i_i(hfp(c)); }
	def func_i_v(name: string, hfp: C -> int -> void) -> this				{ module.adapters[name] = fun c => HostAdapters.i_v(hfp(c)); }
	def func_iii_i(name: string, hfp: C -> (int, int, int) -> int) -> this			{ module.adapters[name] = fun c => HostAdapters.iii_i(hfp(c)); }
	def func_uuu_r(name: string, hfp: C -> (u32, u32, u32) -> HostResult) -> this		{ module.adapters[name] = fun c => HostAdapters.uuu_r(hfp(c)); }
	def func_iuu_r(name: string, hfp: C -> (int, u32, u32) -> HostResult) -> this		{ module.adapters[name] = fun c => HostAdapters.iuu_r(hfp(c)); }
	def func_uu_r(name: string, hfp: C -> (u32, u32) -> HostResult) -> this			{ module.adapters[name] = fun c => HostAdapters.uu_r(hfp(c)); }
	def func_uuuu_r(name: string, hfp: C -> (u32, u32, u32, u32) -> HostResult) -> this	{ module.adapters[name] = fun c => HostAdapters.uuuu_r(hfp(c)); }
	def func_v_i(name: string, hfp: C -> void -> int) -> this				{ module.adapters[name] = fun c => HostAdapters.v_i(hfp(c)); }
	
	// Adds a post-processing function for an instance, e.g. to examine its exports.
	def postprocess(f: (C, ErrorGen, Instance) -> void) -> this {
		module.postprocess_f = f;
	}
	// Adds a function that implements {HostInstance.getMain()}.
	def getMain(f: (C, Instance) -> (Function, Array<Value>)) -> this {
		module.getMain_f = f;
	}
	// Adds a function that implements {HostInstance.init()}.
	def init(f: (C, Array<string>, bool, ErrorGen) -> void) -> this {
		module.init_f = f;
	}
	// Finishes a module and registers it in the host module registry.
	def register(exposed: bool) {
		ModuleRegistry.add(module, exposed);
		module = null;
	}
	// Finishes the module without exposing it in the host module registry.
	def finish() -> HostModule {
		var result = module;
		module = null;
		return result;
	}
}

// Implements a host module that has stateful bindings.
// Will instantiate a new <C> for each module that imports from this host module, automatically.
private class HostModuleOf<C> extends HostModule {
	def cnew: void -> C;
	def cbind: (C, Instance) -> void;
	def map = Strings.newMap<Exportable>();
	def adapters = Strings.newMap<C -> HostFunc>();
	var last: C;
	var postprocess_f: (C, ErrorGen, Instance) -> void;
	var init_f: (C, Array<string>, bool, ErrorGen) -> void;
	var getMain_f: (C, Instance) -> (Function, Array<Value>);
	var trace: bool;
	var cmdline_args: Array<string>;
	var err: ErrorGen;

	new(name: string, cnew, cbind) super(name) { }

	def preprocess(error: ErrorGen, module: Module, result: Array<Exportable>) {
		var imports = module.imports;
		for (j < imports.length) {
			var i = imports[j];
			if (result[j] != null) continue;                             // don't overwrite existing binding
			if (!Strings.equal(this.name, i.imp.module_name)) continue;  // not this module
			var func_name = i.imp.field_name;
			var simple = map[func_name];                          // find simple binding
			if (simple != null) {
				var c = makeInstance(); // lazily allocate a <C> object
				result[j] = simple;
				continue;
			}
			var adapter = adapters[i.imp.field_name];
			if (adapter != null) {
				var c = makeInstance(); // lazily allocate a <C> object
				var hf = adapter(c);
				result[j] = HostFunction.new(name, hf.sig, hf.invoke);
			}
		}
	}
	def postprocess(error: ErrorGen, instance: Instance) {
		if (cbind != null) cbind(last, instance);
		if (postprocess_f != null) postprocess_f(last, error, instance);
//TODO: prevent leaks		last = C.default;
	}
	def init(args: Array<string>, trace: bool, err: ErrorGen) {
		this.cmdline_args = args;
		this.trace = trace;
		this.err = err; // TODO
	}
	def getMain(instance: Instance) -> (Function, Array<Value>) {
		if (getMain_f != null && last != C.default) return getMain_f(last, instance);
		return (null, null);
	}
	private def makeInstance() -> C {
		if (last != C.default) return last;
		last = cnew();
		if (init_f != null) init_f(last, cmdline_args, trace, err);
		return last;
	}
}
private type ClosureEntry<C>(name: string, sig: SigDecl, cnew: C -> (Range<Value> -> HostResult)) #unboxed;

// BEGIN: New classes for the new structure of HostModules (see WASI)

class HostInstance {
	var memory: Memory;

	// Utility functions for subclasses.
	def getRegionPtr(idx: int, size: int) -> i64 {
		if (memory == null) return -1;
		return memory.boundsCheck(0, u32.view(idx), u32.view(size));
	}
	def getRegion(offset: int, size: int) -> MaybeTrap<Range<byte>> {
		return memory.range_ol_32(u32.view(offset), u32.view(size));
	}
	def copyStringZ(offset: int, size: int) -> MaybeTrap<Range<byte>> {
		return getRegion(offset, size).then(dupz);
	}
	def dupz(r: Range<byte>) -> Range<byte> {
		var result = Array<byte>.new(r.length + 1);
		for (i < r.length) result[i] = r[i];
		return result[0 ... r.length];
	}
}

class HostAdapter_of<I> {
	def sig: SigDecl;
	def func(name: string, i: I) -> HostFunction;
}
