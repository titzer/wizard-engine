// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Handles command-line options for WASI.
component WasiOptions {
	def group = OptionsRegistry.newGroup("WASI", printHelp);
	private var envs = Vector<string>.new();
	private var dirs = Vector<string>.new();

	private def X_ = OptionsRegistry.addParseFunc(parse);

	def parse(arg: string, err: ErrorGen) -> bool {
		if (Strings.startsWith(arg, "--dir=")) {
			var s = 6;
			for (i = s; i < arg.length; i++) {
				if (arg[i] == ',') {
					addDir(arg, s, i);
					s = i + 1;
				}
			}
			if (s < arg.length) addDir(arg, s, arg.length);
			return true;
		} else if (Strings.startsWith(arg, "--env=")) {
			var s = 6;
			var equal_exists = false;
			for (i = s; i < arg.length; i++) {
				if (arg[i] == ',') {
					equal_exists = addEnv(arg, s, i);
					s = i + 1;
				}
			}
			if (s < arg.length) equal_exists = addEnv(arg, s, arg.length);
			return equal_exists;
		}
		return false;   
	}
	private def addDir(arg: string, start: int, end: int) {
		def name = Arrays.range(arg, start, end);
		dirs.put(name);
	}
	private def addEnv(arg: string, start: int, end: int) -> bool {
		// a flag to check equal exists in environment variable definition (e.g. FOO=BAR)
		var equal_exists = false;
		def name = Arrays.range(arg, start, end);
		for (i < name.length) {
			if (name[i] == '=') equal_exists = true;
		}
		envs.put(name);
		return equal_exists;
	}
	def getDirs() -> Vector<string> {
		return dirs;
	}
	def getEnvs() -> Vector<string> {
		return envs;
	}
	def printHelp(out: TraceBuilder) {
		var H = out.putsln, L = out.ln;
		H("WASI can be configured with the following options:");
		L();
		H("    --env=ENV_VAR_NAME=value");
		H("        To define an environment variable accessible in the WASI context.");
		H("        Example: --env=RUST_LOG=debug");
		H("    --dir=/path/to/preopen");
		H("        Instructs Wizard to preopen a directory, and make it available to");
		H("        the program as a capability which can be used to open, read, and");
		H("        write to ALL files inside that directory.");
		L();
	}
}