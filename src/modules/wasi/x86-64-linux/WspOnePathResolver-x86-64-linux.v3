// Copyright 2023 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.
def LOOKUP_SYMLINK_FOLLOW = 1;	// flag indicating should follow symlinks

component WasiPathUtil {
	def normalize_path = PathResolver.normalize_path;
	def resolve_path(fdinfo: WasiFd, path: string, flags: i32) -> (string, int) {
		var read_symlink = if((flags & LOOKUP_SYMLINK_FOLLOW) == LOOKUP_SYMLINK_FOLLOW, read_linux_symlink);
		return PathResolver.resolve_path(fdinfo, path, read_symlink);
	}
}

def SYS_readlink = 0x59;	// Linux system call to read a symlink
def PATH_MAX = 4096;		// maximum length of a path
def PATH_BUF = Array<byte>.new(PATH_MAX + 1);
def EINVAL = 22;		// errno for invalid argument
def ENOENT = 2;			// errno for no entry

// Main function to resolve a path with an option to follow symlinks, ensuring it stays within the sandbox.
def read_linux_symlink(path: string) -> string {
	var buf = PATH_BUF;
	var t = Linux.syscall(SYS_readlink, (Pointer.atContents(path), Pointer.atContents(buf), PATH_MAX));

	if (t.0 < 0 && t.0 != -EINVAL && t.0 != -ENOENT) return path;
	for (i < buf.length) {
		if (buf[i] == 0) path = Ranges.dup(buf[0 ... i]); // result returned by the kernel is zero-terminated
	}
	return path;
}
