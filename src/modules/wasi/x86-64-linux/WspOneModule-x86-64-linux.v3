// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def OUT = Trace.OUT;
def X_ = WspOneRegistration.register(X86_64Linux_WspOneModule.new());
// Linux system call numbers
def SYS_openat = 257;
def SYS_clock_get_time = 228;
def SYS_clock_get_res = 229;
def SYS_getrandom = 318;
def SYS_fdatasync = 75;
def SYS_fsync = 118;
def SYS_lseek = 8;
def SYS_sched_yield = 24;
def SYS_kill = 37;
def SYS_getpid = 39;
def SYS_statx = 332;

def STATX_ALL = 0x00000FFF; // all currently-supported flags
def AT_SYMLINK_NOFOLLOW = 0x100;

// Linux lseek whence values
def WHENCE_SET = 0;
def WHENCE_CUR = 1;
def WHENCE_END = 2;

// openat flags
def O_CLOEXEC = 0x80000;
def O_PATH = 0x200000;
def O_DIRECTORY = 0x10000;

def S_IFMT   = 0xF000; // bit mask for the file type bit field
def S_IFSOCK = 0xC000; // socket
def S_IFLNK  = 0xA000; // symbolic link
def S_IFREG  = 0x8000; // regular file
def S_IFBLK  = 0x6000; // block device
def S_IFDIR  = 0x4000; // directory
def S_IFCHR  = 0x2000; // character device
def S_IFIFO  = 0x1000; // FIFO

// IO buffers
def timespec = Array<long>.new(2);
def statxbuf = Ref<statx>.of(Array<byte>.new(statx.size));

// A special value, which tells the fd of the current working directory used in openat
def AT_FDCWD = -100;

// Success value
def SUCCESS = HostResult.Value1(Values.I32_0);

// Platform-specific implementation of "wasi_snapshot_preview1" module.
class X86_64Linux_WspOneModule extends WspOneModule {
	def init_p(err: ErrorGen) {
		def dirs = WasiOptions.getDirs();
		// execute openat syscall for every given directory
		for (ii < dirs.length) {
			var dir = dirs[ii];
			// call openat system call
			var fd = Linux.syscall(SYS_openat,
				(AT_FDCWD,
				 Pointer.atContents(dir),
				 LinuxConst.O_RDONLY | O_CLOEXEC | O_PATH | O_DIRECTORY
				)).0;
			if (fd < 0) {
				err.abs(0).InvalidPreopenPath(dir);
			}
			var wasi_fd = fdmap.alloc();
			fdmap.set(wasi_fd, WasiFd.new(int.view(fd), wasi_filetype.DIRECTORY, true, dir));
		}
	}

	def random_get(args: Range<Value>) -> HostResult {
		var ptr = Values.unbox_u(args[0]), len = Values.unbox_u(args[1]);
		var range = memory.range_ol_32(ptr, len);
		if (range.reason != TrapReason.NONE) return HostResult.Throw(Trap.new(range.reason, null, null));
		var t = Linux.syscall(SYS_getrandom, (Pointer.atContents(range.result), len, 0));
		if (t.0 < 0) return i(mapErrno(t.0));
		return HostResult.Value1(Values.I32_0);
	}
	def clock_res_get(args: Range<Value>) -> HostResult {
		var clock_id = mapClockId(Values.unbox_u(args[0]));
		if (clock_id < 0) return HostResult.Value1(Values.box_i(WspOneErrno.INVAL.code));
		var ptr = Values.unbox_u(args[1]);
		var range = memory.range_ol_32(ptr, 8);
		if (range.reason != TrapReason.NONE) return HostResult.Throw(Trap.new(range.reason, null, null));
		var t = Linux.syscall(SYS_clock_get_res, (clock_id, Pointer.atContents(timespec)));
		if (t.0 < 0) return i(mapErrno(t.0));
		DataWriters.write_range_i64(range.result, timespec[0] * 1000000000L + timespec[1]);
		return HostResult.Value1(Values.I32_0);
	}
	def clock_time_get(args: Range<Value>) -> HostResult {
		var clock_id = mapClockId(Values.unbox_u(args[0]));
		if (clock_id < 0) return HostResult.Value1(Values.box_i(WspOneErrno.INVAL.code));
		var lag = Values.unbox_l(args[1]);
		var ptr = Values.unbox_u(args[2]);
		var range = memory.range_ol_32(ptr, 8);
		if (range.reason != TrapReason.NONE) return HostResult.Throw(Trap.new(range.reason, null, null));
		var t = Linux.syscall(SYS_clock_get_time, (clock_id, Pointer.atContents(timespec)));
		if (t.0 < 0) return i(mapErrno(t.0));
		DataWriters.write_range_i64(range.result, timespec[0] * 1000000000L + timespec[1]);
		return HostResult.Value1(Values.I32_0);
	}
	def fd_datasync(args: Range<Value>) -> HostResult {
		var fd = Values.unbox_i(args[0]);
		var wasi_fd = fdmap.get(fd);
		if (wasi_fd == null) return HostResult.Value1(Values.box_i(WspOneErrno.BADF.code));
		var t = Linux.syscall(SYS_fdatasync, (wasi_fd.sysfd));
		if (t.0 < 0) return i(mapErrno(t.0));
		return HostResult.Value1(Values.I32_0);
	}
	def fd_seek(args: Range<Value>) -> HostResult {
		// question: whence is a u32, but in preview1 it is defined as struct

		var fd = Values.unbox_i(args[0]);
		var offset = Values.unbox_l(args[1]);
		var whence = Values.unbox_u(args[2]);
		// allocate a range for the result
		var ptr = Values.unbox_u(args[3]);
		var range = memory.range_ol_32(ptr, 8);
		if (range.reason != TrapReason.NONE) return HostResult.Throw(Trap.new(range.reason, null, null));
		var wasi_fd = fdmap.get(fd);
		if (wasi_fd == null) return HostResult.Value1(Values.box_i(WspOneErrno.BADF.code));
		if (whence > 2) return HostResult.Value1(Values.box_i(WspOneErrno.INVAL.code));
		var t = Linux.syscall(SYS_lseek, (wasi_fd.sysfd, offset, whence));
		if (t.0 < 0) return i(mapErrno(t.0));
		// write the result to the memory
		DataWriters.write_range_i64(range.result, t.0);
		return HostResult.Value1(Values.I32_0);
	}
	def fd_sync(args: Range<Value>) -> HostResult {
		var fd = Values.unbox_i(args[0]);
		var wasi_fd = fdmap.get(fd);
		if (wasi_fd == null) return HostResult.Value1(Values.box_i(WspOneErrno.BADF.code));
		var t = Linux.syscall(SYS_fsync, (wasi_fd.sysfd));
		if (t.0 < 0) return i(mapErrno(t.0));
		return HostResult.Value1(Values.I32_0);
	}
	def fd_tell(args: Range<Value>) -> HostResult {
		var fd = Values.unbox_i(args[0]);
		var ptr = Values.unbox_u(args[1]);
		var range = memory.range_ol_32(ptr, 8);
		if (range.reason != TrapReason.NONE) return HostResult.Throw(Trap.new(range.reason, null, null));
		var wasi_fd = fdmap.get(fd);
		if (wasi_fd == null) return HostResult.Value1(Values.box_i(WspOneErrno.BADF.code));
		var t = Linux.syscall(SYS_lseek, (wasi_fd.sysfd, 0, WHENCE_CUR));
		if (t.0 < 0) return i(mapErrno(t.0));
		DataWriters.write_range_i64(range.result, t.0);
		return HostResult.Value1(Values.I32_0);
	}
	def path_open(args: Range<Value>) -> HostResult {
		// 0=fd 1=flags 2=pathptr 3=length 4=oflags 5=base_rights 6=inh_rights 7=fdflags 8=fdptr
		var fd		= Values.unbox_i(args[0]);
		var dflags	= Values.unbox_u(args[1]);
		var pathptr	= args[2];
		var pathlen	= args[3];
		var oflags	= Values.unbox_u(args[4]);
		var base_rights	= Values.unbox_l(args[5]);
		var inh_rights	= Values.unbox_l(args[6]);
		var fflags	= Values.unbox_u(args[7]);
		var fdptr	= args[8];

		var dir_fd = fdmap.get(fd);
		if (dir_fd == null) return HostResult.Value1(Values.box_i(WspOneErrno.BADF.code));
		def pathz = copyStringZ(memory, pathptr, pathlen); // TODO: maxpath
		if (pathz.trapped()) return i(WspOneErrno.INVAL.code);

		def fdregion = getRegion3(memory, fdptr, Value.I32(4));
		if (fdregion.trapped()) return i(WspOneErrno.INVAL.code);

		var flag_r = (base_rights & (1 << WspOneRights.fd_read.tag)) != 0;
		var flag_w = (base_rights & (1 << WspOneRights.fd_write.tag)) != 0;
		var sysflags = if(flag_w, if(flag_r, LinuxConst.O_RDWR, LinuxConst.O_WRONLY), LinuxConst.O_RDONLY);

		if ((oflags & (1u << WspOneFdFlags.creat.tag)) != 0) sysflags |= LinuxConst.O_CREAT;
		if ((oflags & (1u << WspOneFdFlags.trunc.tag)) != 0) sysflags |= LinuxConst.O_TRUNC;
		if ((oflags & (1u << WspOneFdFlags.excl.tag)) != 0) sysflags |= LinuxConst.O_EXCL;

		var t = Linux.syscall(SYS_openat, (dir_fd.sysfd, Pointer.atContents(pathz.result), sysflags, 0x1B6));
		var result_fd = t.0;
		if (result_fd < 0) return i(mapErrno(result_fd));
		DataWriters.write_range_u32(fdregion.result, u32.!(result_fd));
		var wasi_fd = fdmap.alloc();
		fdmap.set(wasi_fd, WasiFd.new(int.view(result_fd), wasi_filetype.CHARACTER_DEVICE, false, Ranges.dup(pathz.result)));
		return SUCCESS;
	}
	def path_filestat_get(args: Range<Value>) -> HostResult {
		var fd		= Values.unbox_i(args[0]);
		var flags	= Values.unbox_i(args[1]);
		var pathptr	= args[2];
		var pathlen	= args[3];
		var filestatptr = args[4];

		var dir_fd = fdmap.get(fd);
		if (dir_fd == null) return HostResult.Value1(Values.box_i(WspOneErrno.BADF.code));
		def pathz = copyStringZ(memory, pathptr, pathlen); // TODO: maxpath
		if (pathz.trapped()) return i(WspOneErrno.INVAL.code);

		def filestat = getRegion3(memory, filestatptr, Values.box_i(Wasi_filestat.size));
		if (filestat.trapped()) return i(WspOneErrno.INVAL.code);

		var sysflags = if((flags & 1) == 0, AT_SYMLINK_NOFOLLOW);
		var sysmask = STATX_ALL;

		var t = Linux.syscall(SYS_statx, (dir_fd.sysfd, Pointer.atContents(pathz.result), sysflags, sysmask, Pointer.atRef(statxbuf)));
		if (t.0 < 0) return i(mapErrno(t.0));

		var result = Ref<Wasi_filestat>.of(filestat.result);
		result.dev = 		u64.view(statxbuf.stx_dev_major) << 32 | statxbuf.stx_dev_minor;
		result.ino = 		statxbuf.stx_ino;
		result.nlink = 	statxbuf.stx_nlink;
		result.size = 	statxbuf.stx_size;
		result.atim = 	statxbuf.stx_atime;
		result.mtim = 	statxbuf.stx_mtime;
		result.ctim = 	statxbuf.stx_ctime;

		var ftype: Wasi_filetype;
		match (statxbuf.stx_mode & S_IFMT) {
			S_IFSOCK => ftype = Wasi_filetype.SOCKET_DGRAM; // TODO: mode?
			S_IFLNK  => ftype = Wasi_filetype.SYMBOLIC_LINK;
			S_IFREG  => ftype = Wasi_filetype.REGULAR_FILE;
			S_IFBLK  => ftype = Wasi_filetype.BLOCK_DEVICE;
			S_IFDIR  => ftype = Wasi_filetype.DIRECTORY;
			S_IFCHR  => ftype = Wasi_filetype.CHARACTER_DEVICE;
			S_IFIFO  => ftype = Wasi_filetype.SOCKET_STREAM;
		}

		result.filetype = ftype;
		return HostResult.Value1(Values.I32_0);
	}
	def sched_yield(args: Range<Value>) -> HostResult {
		var t = Linux.syscall(SYS_sched_yield, ());
		if (t.0 < 0) return i(mapErrno(t.0));
		return HostResult.Value1(Values.I32_0);
	}
	// Helper functions
	def mapClockId(clock_id: u32) -> int {
		if (clock_id > 3) return -1;
		return int.view(clock_id); // WASI clock ids map directly onto Linux clock IDs
	}
	def mapErrno(errno: i64) => int.!(errno); 
}
