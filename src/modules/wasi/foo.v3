def S: SigCache;
def map = Strings.newMap<HostAdapter2_of<WasiInstance2>>();

def p_r<P, R>(f: WasiInstance2 -> P -> R) -> HostAdapter2;
def ii_i = Wasi2_HostAdapter_ii_i.new;

def i_i = p_r<int, int>;
def i_v = p_r<int, void>;
def iii_i = p_r<(int, int, int), int>;
def iiii_i = p_r<(int, int, int), int>;
def iiiii_i = p_r<(int, int, int, int, int), int>;
def iiiiii_i = p_r<(int, int, int, int, int, int), int>;
def iiiiiii_i = p_r<(int, int, int, int, int, int, int), int>;
def iiiiillii_i = p_r<(int, int, int, int, int, long, long, int, int), int>;
def iiiilli_i = p_r<(int, int, int, int, long, long, int), int>;
def iiili_i = p_r<(int, int, int, long, int), int>;
def il_i = p_r<(int, long), int>;
def ili_i = p_r<(int, long, int), int>;
def ilii_i = p_r<(int, long, int, int), int>;
def ill_i = p_r<(int, long, long), int>;
def illi_i = p_r<(int, long, long, int), int>;
def v_i = p_r<void, int>;


var x_ = void(
	map["args_get"] = 		ii_i(		fun i => i.args_get),
	map["args_sizes_get"] = 	ii_i(		fun i => i.args_sizes_get),
	map["environ_get"] =		ii_i(		fun i => i.environ_get),
	map["environ_sizes_get"] =	ii_i(		fun i => i.environ_sizes_get),
	map["fd_advise"] =		illi_i(		fun i => i.fd_advise),
	map["fd_allocate"] =		ill_i(		fun i => i.fd_allocate),
	map["fd_close"] =		i_i(		fun i => i.fd_close),
	map["fd_datasync"] =		i_i(		fun i => i.fd_datasync),
	map["fd_fdstat_get"] =		ii_i(		fun i => i.fd_fdstat_get),
	map["fd_fdstat_set_flags"] =	ii_i(		fun i => i.fd_fdstat_set_flags),
	map["fd_fdstat_set_rights"] =	ill_i(		fun i => i.fd_fdstat_set_rights),
	map["fd_filestat_get"] =	ii_i(		fun i => i.fd_filestat_get),
	map["fd_filestat_set_size"] =	il_i(		fun i => i.fd_filestat_set_size),
	map["fd_filestat_set_times"] =	illi_i(		fun i => i.fd_filestat_set_times),
	map["fd_pread"] =		iiili_i(	fun i => i.fd_pread),
	map["fd_prestat_get"] =		ii_i(		fun i => i.fd_prestat_get),
	map["fd_prestat_dir_name"] =	iii_i(		fun i => i.fd_prestat_dir_name),
	map["fd_pwrite"] =		iiili_i(	fun i => i.fd_pwrite),
	map["fd_read"] =		iiii_i(		fun i => i.fd_read),
	map["fd_readdir"] =		iiili_i(	fun i => i.fd_readdir),
	map["fd_renumber"] =		ii_i(		fun i => i.fd_renumber),
	map["fd_seek"] =		ilii_i(		fun i => i.fd_seek),
	map["fd_sync"] =		i_i(		fun i => i.fd_sync),
	map["fd_tell"] =		ii_i(		fun i => i.fd_tell),
	map["fd_write"] =		iiii_i(		fun i => i.fd_write),
	map["path_create_directory"] =	iii_i(		fun i => i.path_create_directory),
	map["path_filestat_get"] =	iiiii_i(	fun i => i.path_filestat_get),
	map["path_filestat_set_times"] =iiiilli_i(	fun i => i.path_filestat_set_times),
	map["path_link"] =		iiiiiii_i(	fun i => i.path_link),
	map["path_open"] =		iiiiillii_i(	fun i => i.path_open),
	map["path_readlink"] =		iiiiii_i(	fun i => i.path_readlink),
	map["path_remove_directory"] =	iii_i(		fun i => i.path_remove_directory),
	map["path_rename"] =		iiiiii_i(	fun i => i.path_rename),
	map["path_symlink"] =		iiiii_i(	fun i => i.path_symlink),
	map["path_unlink_file"] =	iii_i(		fun i => i.path_unlink_file),
	map["clock_res_get"] =		ii_i(		fun i => i.clock_res_get),
	map["clock_time_get"] =		ili_i(		fun i => i.clock_time_get),
	map["sched_yield"] =		v_i(		fun i => i.sched_yield),
	map["proc_exit"] =		i_v(		fun i => i.proc_exit),
	map["proc_raise"] =		i_i(		fun i => i.proc_raise),
	map["poll_oneoff"] =		iiii_i(		fun i => i.poll_oneoff),
	map["random_get"] =		ii_i(		fun i => i.random_get),
	map["sock_recv"] =		iiiiii_i(	fun i => i.sock_recv),
	map["sock_send"] =		iiiii_i(	fun i => i.sock_send),
	map["sock_shutdown"] =		ii_i(		fun i => i.sock_shutdown),
	map["sock_accept"] =		iii_i(		fun i => i.sock_accept),
	()
);

class HostAdapter2 { // completely shared
	def sig: SigDecl;
}

class HostAdapter2_of<I> extends HostAdapter2 { // utility parameterized by instance type
	def func(name: string, i: I) -> HostFunction;
}

class Wasi2_HostAdapter_ii_i(f: WasiInstance2 -> (int, int) -> int) extends HostAdapter2_of<WasiInstance2> {
	def func(name: string, i: WasiInstance2) -> HostFunction {
		var g = f(i);
		return HostFunction.new(name, sig, HostAdapters.ii_i(g));
	}
}


class WasiHostModule2 extends HostModule("wasi_snapshot_preview1b") {
	def preprocess(error: ErrorGen, module: Module, result: Array<Exportable>) {
		var instance: WasiInstance2;
		var imports = module.imports;
		for (j < imports.length) {
			var i = imports[j];
			if (!Strings.equal(this.name, i.imp.module_name)) continue;
			if (!FuncDecl.?(i)) continue;
			var impf = FuncDecl.!(i), name = i.imp.field_name;
			var t = map[name];
			if (t == null) continue;
			if (instance == null) instance = WasiInstance2.new();
			result[j] = t.func(name, instance);
			
		}
	}
}

// Contains state and logic for a WASI instance.
class WasiInstance2 {
	def args_get(argv: int, argvbuf: int) -> int {
		return argv + argvbuf;
	}
}
