// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Enumeration of the exported functions of the 'wasi_snapshot_preview1' module
def OUT = Trace.OUT;

// Identifiers for preopened capabilities.
private enum PreopenType(code: byte) {
	Dir(0),
}

// Registered functions in the "wasi_snapshot_preview1" module.
def funcMap = Strings.newMap<(SigDecl, (WspOneModule, Range<Value>) -> HostResult)>(), X = init();
def init() {
	def i_ = ValueType.I32, l_ = ValueType.I64;
	def s = Canon.sigPR;
	def S: SigCache;
	for (t in [
		("args_get",		S.ii_i, 				WspOneModule.args_get),
		("args_sizes_get",	S.ii_i, 				WspOneModule.args_sizes_get),
		("environ_get",		S.ii_i, 				WspOneModule.environ_get),
		("environ_sizes_get",	S.ii_i, 				WspOneModule.environ_sizes_get),
		("fd_advise",		s([i_, l_, l_, i_], S.arr_i), 		WspOneModule.fd_advise),
		("fd_allocate",		s([i_, l_, l_], S.arr_i), 		WspOneModule.fd_allocate),
		("fd_close",		S.i_i, 					WspOneModule.fd_close),
		("fd_datasync",		S.i_i, 					WspOneModule.fd_datasync),
		("fd_fdstat_get",	S.ii_i, 				WspOneModule.fd_fdstat_get),
		("fd_fdstat_set_flags",	S.ii_i, 				WspOneModule.fd_fdstat_set_flags),
		("fd_fdstat_set_rights",s([i_, l_, l_], S.arr_i), 		WspOneModule.fd_fdstat_set_rights),
		("fd_filestat_get",	S.ii_i, 				WspOneModule.fd_filestat_get),
		("fd_filestat_set_size",s([i_, l_], S.arr_i), 			WspOneModule.fd_filestat_set_size),
		("fd_filestat_set_times",	s([i_, l_, l_, i_], S.arr_i), 	WspOneModule.fd_filestat_set_times),
		("fd_pread",		s([i_, i_, i_, l_, i_], S.arr_i), 	WspOneModule.fd_pread),
		("fd_prestat_get",	S.ii_i, 				WspOneModule.fd_prestat_get),
		("fd_prestat_dir_name",	S.iii_i, 				WspOneModule.fd_prestat_dir_name),
		("fd_pwrite",		s([i_, i_, i_, l_, i_], S.arr_i), 	WspOneModule.fd_pwrite),
		("fd_read",		s([i_, i_, i_, i_], S.arr_i), 		WspOneModule.fd_read),
		("fd_readdir",		s([i_, i_, i_, l_, i_], S.arr_i), 	WspOneModule.fd_readdir),
		("fd_renumber",		S.ii_i, 				WspOneModule.fd_renumber),
		("fd_seek",		s([i_, l_, i_, i_], S.arr_i), 		WspOneModule.fd_seek),
		("fd_sync",		S.i_i, 					WspOneModule.fd_sync),
		("fd_tell",		S.ii_i, 				WspOneModule.fd_tell),
		("fd_write",		s([i_, i_, i_, i_], S.arr_i), 		WspOneModule.fd_write),
		("path_create_directory",	S.iii_i, 					WspOneModule.path_create_directory),
		("path_filestat_get",	s([i_, i_, i_, i_, i_], S.arr_i), 			WspOneModule.path_filestat_get),
		("path_filestat_set_times",s([i_, i_, i_, i_, l_, l_, i_], S.arr_i), 		WspOneModule.path_filestat_set_times),
		("path_link",		s([i_, i_, i_, i_, i_, i_, i_], S.arr_i), 		WspOneModule.path_link),
		("path_open",		s([i_, i_, i_, i_, i_, l_, l_, i_, i_], S.arr_i),  	WspOneModule.path_open),
		("path_readlink",	s([i_, i_, i_, i_, i_, i_], S.arr_i), 			WspOneModule.path_readlink),
		("path_remove_directory",	S.iii_i, 					WspOneModule.path_remove_directory),
		("path_rename",		s([i_, i_, i_, i_, i_, i_], S.arr_i), 	WspOneModule.path_rename),
		("path_symlink",	s([i_, i_, i_, i_, i_], S.arr_i), 	WspOneModule.path_symlink),
		("path_unlink_file",	S.iii_i, 				WspOneModule.path_unlink_file),
		("clock_res_get",	S.ii_i, 				WspOneModule.clock_res_get),
		("clock_time_get",	s([i_, l_, i_], S.arr_i), 		WspOneModule.clock_time_get),
		("sched_yield",		S.v_i,		 			WspOneModule.sched_yield),
		("proc_exit",		S.i_v, 					WspOneModule.proc_exit),
		("proc_raise",		S.i_i, 					WspOneModule.proc_raise),
		("poll_oneoff",		s([i_, i_, i_, i_], S.arr_i),	 	WspOneModule.poll_oneoff),
		("random_get",		S.ii_i, 				WspOneModule.random_get),
		("sock_recv",		s([i_, i_, i_, i_, i_, i_], S.arr_i), 	WspOneModule.sock_recv),
		("sock_send",		s([i_, i_, i_, i_, i_], S.arr_i), 	WspOneModule.sock_send),
		("sock_shutdown",	S.ii_i, 				WspOneModule.sock_shutdown)
	]) {
		funcMap[t.0] = (t.1, t.2);
	}
}

// State for for the "wasi_snapshot_preview1" module.
class WspOneModule extends HostModule("wasi_snapshot_preview1") {
	var fdmap: WasiFdMap;
	var memory: Memory;
	var cmdline_args: Array<string>;
	var trace: bool;
	
	def init(args: Array<string>, trace: bool, err: ErrorGen) {
		this.fdmap = WasiFdMap.new(MAX_FDS);
		this.cmdline_args = args;
		this.trace = trace;
		init_p(err);
	}
	// platform specific initialiation 
	def init_p(err: ErrorGen) { }
	def preprocess(error: ErrorGen, module: Module, result: Array<Exportable>) {
		var imports = module.imports;
		for (j < imports.length) {
			var i = imports[j];
			if (!Strings.equal(this.name, i.imp.module_name)) continue;
			if (!FuncDecl.?(i)) continue;
			var impf = FuncDecl.!(i), name = i.imp.field_name;
			var t = funcMap[name];
			if (t.0 == null) continue;
			var func = t.1(this, _);
			result[j] = HostFunction.new(name, t.0, func);
		}
	}
	def postprocess(error: ErrorGen, instance: Instance) {
		memory = instance.findExportOfType<Memory>(null);
	}
	def getMain(instance: Instance) -> (Function, Array<Value>) {
		var module = instance.module;
		var exports = module.exports;
		var found: Function;
		var count = 0;
		for (j < exports.length) {
			var mex = module.exports[j], iex = instance.exports[j];
			if (!Function.?(iex)) continue;
			found = Function.!(iex);
			if (Strings.equal("main", mex.0)) return toEntry(found); // explicit name match
			if (Strings.equal("_start", mex.0)) return toEntry(found); // explicit name match
			count++;
		}
		return (null, null);
	}
	def toEntry(main: Function) -> (Function, Array<Value>) {
		return (main, Arrays.map(main.sig.params, Values.default));
	}

	// ==={Provided functions}============================================
	
	// Copy the argument pointers into {argv} and the null-terminated strings into {argvbuf}.
	def args_get(args: Range<Value>) -> HostResult {
		var argv = getRegion(memory, args[0], u32.view(cmdline_args.length) * 4);
		if (argv < 0) return i(WspOneErrno.INVAL.code);
		var size = 0u;
		for (a in cmdline_args) size += (1u + u32.view(a.length));
		var argbuf = getRegion(memory, args[1], size);
		if (argbuf < 0) return i(WspOneErrno.INVAL.code);
		for (i < cmdline_args.length) {
			// write a pointer to a null-terminated string into a argv buffer
			memory.write_u32(u32.view(argv), 0, u32.view(argbuf));
			argv += 4;
			// write a null-terminated string into argbuf buffer
			var a = cmdline_args[i];
			memory.copyIn(u32.view(argbuf), a, 0, u32.view(a.length));
			argbuf += u32.view(a.length);
			memory.write_u8(u32.view(argbuf), 0, 0);
			argbuf++;
		}
		return i(WspOneErrno.SUCCESS.code);
	}
	// Copy the number of arguments into {numptr} and the total size into {sizeptr}.
	def args_sizes_get(args: Range<Value>) -> HostResult {
		var argptr = getRegion(memory, args[0], 4);
		if (argptr < 0) return i(WspOneErrno.INVAL.code);
		var size = 0;
		for (a in cmdline_args) size += (1 + a.length);
		var bufptr = getRegion(memory, args[1], 4);
		if (bufptr < 0) return i(WspOneErrno.INVAL.code);
		memory.write_u32(u32.view(argptr), 0, u32.view(cmdline_args.length));
		memory.write_u32(u32.view(bufptr), 0, u32.view(size));
		return i(WspOneErrno.SUCCESS.code);
	}
	def environ_get(args: Range<Value>) -> HostResult {
		def envs = WasiOptions.getEnvs();
		var environ = getRegion(memory, args[0], u32.view(envs.length) * 4);
		if (environ < 0) return i(WspOneErrno.INVAL.code);
		var size = 0u;
		for (i < envs.length) size += (1u + u32.view(envs[i].length));
		var environ_buf = getRegion(memory, args[1], size);
		if (environ_buf < 0) return i(WspOneErrno.INVAL.code);
		for (i < envs.length) {
			// write a pointer to a null-terminated string into an environ buffer
			memory.write_u32(u32.view(environ), 0, u32.view(environ_buf));
			environ += 4;
			// write a null-terminated string into a environ_buf buffer
			var e = envs[i];
			memory.copyIn(u32.view(environ_buf), e, 0, u32.view(e.length));
			environ_buf += u32.view(e.length);
			memory.write_u8(u32.view(environ_buf), 0, 0);
			environ_buf++;
		}

		return i(WspOneErrno.SUCCESS.code);
	 }
	// Copy the number of environment variables into {numptr} ant the total size into {sizeptr}
	def environ_sizes_get(args: Range<Value>) -> HostResult {
		def envs = WasiOptions.getEnvs();
		var argptr = getRegion(memory, args[0], 4);
		if (argptr < 0) return i(WspOneErrno.INVAL.code);
		var size = 0;
		for (i < envs.length) size += (1 + envs[i].length);
		var bufptr = getRegion(memory, args[1], 4);
		if (bufptr < 0) return i(WspOneErrno.INVAL.code);
		memory.write_u32(u32.view(argptr), 0, u32.view(envs.length));
		memory.write_u32(u32.view(bufptr), 0, u32.view(size));

		return i(WspOneErrno.SUCCESS.code);
	 }
	def fd_advise(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def fd_allocate(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def fd_close(args: Range<Value>) -> HostResult {
		var fd = Values.unbox_i(args[0]);
		var wfd = fdmap.get(fd);
		if (wfd != null) System.fileClose(wfd.sysfd);
		var r = fdmap.free(fd);
		return i(if(r >= 0, 0, WspOneErrno.INVAL.code));
	}
	def fd_datasync(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def fd_fdstat_get(args: Range<Value>) -> HostResult { return i(0); }
	def fd_fdstat_set_flags(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def fd_fdstat_set_rights(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def fd_filestat_get(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def fd_filestat_set_size(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def fd_filestat_set_times(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def fd_pread(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	// fd_prestat_get(fd: int, buf_ptr: Pointer)
	def fd_prestat_get(args: Range<Value>) -> HostResult {
		def fd = Values.unbox_i(args[0]);
		def wfd = fdmap.get(fd);
		if (wfd == null || !wfd.preopen) return i(WspOneErrno.BADF.code);
		
		def bufptr = getRegion(memory, args[1], 4);
		if (bufptr < 0) return i(WspOneErrno.INVAL.code);
		memory.write_u32(u32.view(bufptr), 0, u32.view(PreopenType.Dir.code));
		memory.write_u32(u32.view(bufptr), 4, u32.view(wfd.path.length));

		return i(WspOneErrno.SUCCESS.code);
	}
	// fd_prestat_dir_name(fd: int, path_p: Pointer, path_len: u32)
	def fd_prestat_dir_name(args: Range<Value>) -> HostResult {
		def fd = Values.unbox_i(args[0]);
		def wfd = fdmap.get(fd);
		if (wfd == null || !wfd.preopen) return i(WspOneErrno.BADF.code);

		def path_len = Values.unbox_u(args[2]);
		def pathptr = getRegion(memory, args[1], path_len);
		if (pathptr < 0) return i(WspOneErrno.INVAL.code);

		// write a directory name into a buffer
		memory.copyIn(u32.view(pathptr), wfd.path, 0, u32.!(wfd.path.length));

		return i(WspOneErrno.SUCCESS.code);
	}
	def fd_pwrite(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def fd_read(args: Range<Value>) -> HostResult {
		var fd = Values.unbox_i(args[0]);
		var wfd = fdmap.get(fd);
		if (wfd == null) return i(WspOneErrno.BADF.code);
		var iovs_ptr = Values.unbox_u(args[1]);
		var iovs_len = Values.unbox_u(args[2]);
		var iovbuf = getRegion2(memory, iovs_ptr, iovs_len * 8);
		if (iovbuf < 0) return i(WspOneErrno.INVAL.code); // Invalid memory

		var outsize_ptr = Values.unbox_u(args[3]);
		var outsize_buf = getRegion2(memory, outsize_ptr, 4);
		if (outsize_buf < 0) return i(WspOneErrno.INVAL.code); // Invalid memory
		
		var total = 0;
		for (j < iovs_len) {
			var iov_ptr = memory.read_u32(0, u32.view(iovbuf)).result;
			var iov_len = memory.read_u32(0, u32.view(iovbuf + 4)).result;
			var iobuf = getRegion2(memory, iov_ptr, iov_len);
			if (iobuf < 0) return i(WspOneErrno.INVAL.code); // Invalid memory
			var out = memory.readIn(wfd.sysfd, u32.view(iobuf), iov_len);
			if (out < 0) return i(WspOneErrno.IO.code);
			total += out;
			iovbuf += 8;
		}

		memory.write_u32(outsize_ptr, 0, u32.view(total));
		return i(WspOneErrno.SUCCESS.code);
	}
	def fd_readdir(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def fd_renumber(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def fd_seek(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def fd_sync(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def fd_tell(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def fd_write(args: Range<Value>) -> HostResult {
		var fd = Values.unbox_i(args[0]);
		var wfd = fdmap.get(fd);
		if (wfd == null) return i(WspOneErrno.BADF.code);
		var iovs_ptr = Values.unbox_u(args[1]);
		var iovs_len = Values.unbox_u(args[2]);
		var iovbuf = getRegion2(memory, iovs_ptr, iovs_len * 8);
		if (iovbuf < 0) return i(WspOneErrno.INVAL.code); // Invalid memory
		var outsize_ptr = Values.unbox_u(args[3]);
		var outsize_buf = getRegion2(memory, outsize_ptr, 4);
		if (outsize_buf < 0) return i(WspOneErrno.INVAL.code);

		var total = 0;
		for (j < iovs_len) {
			var iov_ptr = memory.read_u32(0, u32.view(iovbuf)).result;
			var iov_len = memory.read_u32(0, u32.view(iovbuf + 4)).result;
			var iobuf = getRegion2(memory, iov_ptr, iov_len);
			if (iobuf < 0) return i(WspOneErrno.INVAL.code); // Invalid memory
			var out = memory.writeOut(wfd.sysfd, u32.view(iobuf), iov_len);
			if (out < 0) return i(WspOneErrno.IO.code);
			total += out;
			iovbuf += 8;
		}
		memory.write_u32(u32.view(outsize_ptr), 0, u32.view(total));
		return i(WspOneErrno.SUCCESS.code);
	}
	def path_create_directory(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def path_filestat_get(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def path_filestat_set_times(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def path_link(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def path_open(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def path_readlink(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def path_remove_directory(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def path_rename(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def path_symlink(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def path_unlink_file(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def clock_res_get(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def clock_time_get(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def sched_yield(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def proc_exit(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Exit.new(Values.unbox_u(args[0])));
	}
	def proc_raise(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def poll_oneoff(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def random_get(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def sock_recv(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def sock_send(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	def sock_shutdown(args: Range<Value>) -> HostResult { return UNIMPLEMENTED; }
	// ===================================================================

	def i(v: int) -> HostResult {
		return HostResult.Value1(Value.I32(u32.view(v)));
	}
}
def MINUS_1 = HostResult.Value1(Value.I32(0xFFFFFFFFu));
def UNIMPLEMENTED = HostResult.Throw(Trap.new(TrapReason.UNIMPLEMENTED, null, null));
def NONE = HostResult.Value0;
def MAX_FDS = 256;
def OOB = HostResult.Throw(Trap.new(TrapReason.MEM_OUT_OF_BOUNDS, null, null));

// Enforces ordering on installation of platform-specific modules.
component WspOneRegistration {
	def X_ = ModuleRegistry.add(WspOneModule.new(), true); // register platform-independent first
	def register(w: WspOneModule) {
		// Platform-specific module should call this method to ensure ordering.
		ModuleRegistry.add(w, true);
	}
}

enum WspOneErrno(code: u16, msg: string) {
	SUCCESS		(0, "No error occurred. System call completed successfully."),
	TOO_BIG		(1, "Argument list too long."),
	ACCES		(2, "Permission denied."),
	ADDRINUSE	(3, "Address in use."),
	ADDRNOTAVAIL	(4, "Address not available."),
	AFNOSUPPORT	(5, "Address family not supported."),
	AGAIN		(6, "Resource unavailable, or operation would block."),
	ALREADY		(7, "Connection already in progress."),
	BADF		(8, "Bad file descriptor."),
	BADMSG		(9, "Bad message."),
	BUSY		(10, "Device or resource busy."),
	CANCELED	(11, "Operation canceled."),
	CHILD		(12, "No child processes."),
	CONNABORTED	(13, "Connection aborted."),
	CONNREFUSED	(14, "Connection refused."),
	CONNRESET	(15, "Connection reset."),
	DEADLK		(16, "Resource deadlock would occur."),
	DEST		(17, "Destination address required."),
	DOM		(18, "Mathematics argument out of domain of function."),
	DQUOT		(19, "Reserved."),
	EXIST		(20, "File exists."),
	FAULT		(21, "Bad address."),
	FBIG		(22, "File too large."),
	HOSTUNREACH	(23, "Host is unreachable."),
	IDRM		(24, "Identifier removed."),
	ILSEQ		(25, "Illegal byte sequence."),
	INPROGRESS	(26, "Operation in progress."),
	INTR		(27, "Interrupted function."),
	INVAL		(28, "Invalid argument."),
	IO		(29, "I/O error."),
	ISCONN		(30, "Socket is connected."),
	ISDIR		(31, "Is a directory."),
	LOOP		(32, "Too many levels of symbolic links."),
	MFILE		(33, "File descriptor value too large."),
	MLINK		(34, "Too many links."),
	MSGSIZE		(35, "Message too large."),
	MULTIHOP	(36, "Reserved."),
	NAMETOOLONG	(37, "Filename too long."),
	NETDOWN		(38, "Network is down."),
	NETRESET	(39, "Connection aborted by network."),
	NETUNREACH	(40, "Network unreachable."),
	NFILE		(41, "Too many files open in system."),
	NOBUFS		(42, "No buffer space available."),
	NODEV		(43, "No such device."),
	NOENT		(44, "No such file or directory."),
	NOEXEC		(45, "Executable file format error."),
	NOLCK		(46, "No locks available."),
	NOLINK		(47, "Reserved."),
	NOMEM		(48, "Not enough space."),
	NOMSG		(49, "No message of the desired type."),
	NOPROTOOPT	(50, "Protocol not available."),
	NOSPC		(51, "No space left on device."),
	NOSYS		(52, "Function not supported."),
	NOTCONN		(53, "The socket is not connected."),
	NOTDIR		(54, "Not a directory or a symbolic link to a directory."),
	NOTEMPTY	(55, "Directory not empty."),
	NOTRECOVERABLE	(56, "State not recoverable."),
	NOTSOCK		(57, "Not a socket."),
	NOTSUP		(58, "Not supported, or operation not supported on socket."),
	NOTTY		(59, "Inappropriate I/O control operation."),
	NXIO		(60, "No such device or address."),
	OVERFLOW	(61, "Value too large to be stored in data type."),
	OWNERDEAD	(62, "Previous owner died."),
	PERM		(63, "Operation not permitted."),
	PIPE		(64, "Broken pipe."),
	PROTO		(65, "Protocol error."),
	PROTONOSUPPORT	(66, "Protocol not supported."),
	PROTOTYPE	(67, "Protocol wrong type for socket."),
	RANGE		(68, "Result too large."),
	ROFS		(69, "Read-only file system."),
	SPIPE		(70, "Invalid seek."),
	SRCH		(71, "No such process."),
	STALE		(72, "Reserved."),
	TIMEDOUT	(73, "Connection timed out."),
	TXTBSY		(74, "Text file busy."),
	XDEV		(75, "Cross-device link."),
	NOTCAPABLE	(7, "Extension: Capabilities insufficient.")
}

enum wasi_filetype(code: byte) {
	UNKNOWN			(0),
	BLOCK_DEVICE		(1),
	CHARACTER_DEVICE	(2),
	DIRECTORY		(3),
	REGULAR_FILE		(4),
	SOCKET_DGRAM		(5),
	SOCKET_STREAM		(6),
	SYMBOLIC_LINK		(7)
}

enum WspOneRights {
	// The right to invoke `fd_datasync`.
	//
	// If `path_open` is set, includes the right to invoke
	// `path_open` with `fdflags::dsync`.
	fd_datasync,
	// The right to invoke `fd_read` and `sock_recv`.
	//
	// If `rights::fd_seek` is set, includes the right to invoke `fd_pread`.
	fd_read,
	// The right to invoke `fd_seek`. This flag implies `rights::fd_tell`.
	fd_seek,
	// The right to invoke `fd_fdstat_set_flags`.
	fd_fdstat_set_flags,
	// The right to invoke `fd_sync`.
	//
	// If `path_open` is set, includes the right to invoke
	// `path_open` with `fdflags::rsync` and `fdflags::dsync`.
	fd_sync,
	// The right to invoke `fd_seek` in such a way that the file offset
	// remains unaltered (i.e., `whence::cur` with offset zero), or to
	// invoke `fd_tell`.
	fd_tell,
	// The right to invoke `fd_write` and `sock_send`.
	// If `rights::fd_seek` is set, includes the right to invoke `fd_pwrite`.
	fd_write,
	// The right to invoke `fd_advise`.
	fd_advise,
	// The right to invoke `fd_allocate`.
	fd_allocate,
	// The right to invoke `path_create_directory`.
	path_create_directory,
	// If `path_open` is set, the right to invoke `path_open` with `oflags::creat`.
	path_create_file,
	// The right to invoke `path_link` with the file descriptor as the
	// source directory.
	path_link_source,
	// The right to invoke `path_link` with the file descriptor as the
	// target directory.
	path_link_target,
	// The right to invoke `path_open`.
	path_open,
	// The right to invoke `fd_readdir`.
	fd_readdir,
	// The right to invoke `path_readlink`.
	path_readlink,
	// The right to invoke `path_rename` with the file descriptor as the source directory.
	path_rename_source,
	// The right to invoke `path_rename` with the file descriptor as the target directory.
	path_rename_target,
	// The right to invoke `path_filestat_get`.
	path_filestat_get,
	// The right to change a file's size (there is no `path_filestat_set_size`).
	// If `path_open` is set, includes the right to invoke `path_open` with `oflags::trunc`.
	path_filestat_set_size,
	// The right to invoke `path_filestat_set_times`.
	path_filestat_set_times,
	// The right to invoke `fd_filestat_get`.
	fd_filestat_get,
	// The right to invoke `fd_filestat_set_size`.
	fd_filestat_set_size,
	// The right to invoke `fd_filestat_set_times`.
	fd_filestat_set_times,
	// The right to invoke `path_symlink`.
	path_symlink,
	// The right to invoke `path_remove_directory`.
	path_remove_directory,
	// The right to invoke `path_unlink_file`.
	path_unlink_file,
	// If `rights::fd_read` is set, includes the right to invoke `poll_oneoff` to subscribe to `eventtype::fd_read`.
	// If `rights::fd_write` is set, includes the right to invoke `poll_oneoff` to subscribe to `eventtype::fd_write`.
	poll_fd_readwrite,
	// The right to invoke `sock_shutdown`.
	sock_shutdown,
	// The right to invoke `sock_accept`.
	sock_accept
}

enum WspOneFdFlags {
    // Create file if it does not exist.
    creat,
    // Fail if not a directory.
    directory,
    // Fail if file already exists.
    excl,
    // Truncate file to size 0.
    trunc
}

enum WspOneClock {
	realtime,
	monotonic,
	process_cputime_id,
	thread_cputime_id
}

enum Wasi_filetype {
	UNKNOWN,
	BLOCK_DEVICE,
	CHARACTER_DEVICE,
	DIRECTORY,
	REGULAR_FILE,
	SOCKET_DGRAM,
	SOCKET_STREAM,
	SYMBOLIC_LINK
}

layout Wasi_filestat {
	+0	dev:		u64;
	+8	ino:		u64;
	+16	filetype:	Wasi_filetype;
	+24	nlink:		u32;
	+32	size:		u64;
	+40	atim:		u64;
	+48	mtim:		u64;
	+56	ctim:		u64;
	=64;
}
