// Copyright 2025 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Start: Utility classes to setup Wasi HostModule structure
class WasiHostAdapter<P, R>(f: WasiInstance -> P -> R, adapter: (P -> R) -> HostFunc) extends HostAdapter_of<WasiInstance> {
	def func(name: string, i: WasiInstance) -> HostFunction {
		var g = f(i);
		def host_func = adapter(g);
		return HostFunction.new(name, host_func.sig, host_func.invoke);
	}
}

// Enforces ordering on installation of platform-specific modules.
component WspOneRegistration {
	def X_ = ModuleRegistry.add(WspOneModule.new(fun => WasiInstance.new()), true); // register platform-independent first
	def register(w: WspOneModule) {
		// Platform-specific module should call this method to ensure ordering.
		ModuleRegistry.add(w, true);
	}
}
// End: Utility classes to setup Wasi Hostmodule structure
 
// Identifiers for preopened capabilities.
enum PreopenType(code: byte) {
	Dir(0),
}
enum WspOneErrno(code: u16, msg: string) {
	SUCCESS		(0, "No error occurred. System call completed successfully."),
	TOO_BIG		(1, "Argument list too long."),
	ACCES		(2, "Permission denied."),
	ADDRINUSE	(3, "Address in use."),
	ADDRNOTAVAIL	(4, "Address not available."),
	AFNOSUPPORT	(5, "Address family not supported."),
	AGAIN		(6, "Resource unavailable, or operation would block."),
	ALREADY		(7, "Connection already in progress."),
	BADF		(8, "Bad file descriptor."),
	BADMSG		(9, "Bad message."),
	BUSY		(10, "Device or resource busy."),
	CANCELED	(11, "Operation canceled."),
	CHILD		(12, "No child processes."),
	CONNABORTED	(13, "Connection aborted."),
	CONNREFUSED	(14, "Connection refused."),
	CONNRESET	(15, "Connection reset."),
	DEADLK		(16, "Resource deadlock would occur."),
	DEST		(17, "Destination address required."),
	DOM		(18, "Mathematics argument out of domain of function."),
	DQUOT		(19, "Reserved."),
	EXIST		(20, "File exists."),
	FAULT		(21, "Bad address."),
	FBIG		(22, "File too large."),
	HOSTUNREACH	(23, "Host is unreachable."),
	IDRM		(24, "Identifier removed."),
	ILSEQ		(25, "Illegal byte sequence."),
	INPROGRESS	(26, "Operation in progress."),
	INTR		(27, "Interrupted function."),
	INVAL		(28, "Invalid argument."),
	IO		(29, "I/O error."),
	ISCONN		(30, "Socket is connected."),
	ISDIR		(31, "Is a directory."),
	LOOP		(32, "Too many levels of symbolic links."),
	MFILE		(33, "File descriptor value too large."),
	MLINK		(34, "Too many links."),
	MSGSIZE		(35, "Message too large."),
	MULTIHOP	(36, "Reserved."),
	NAMETOOLONG	(37, "Filename too long."),
	NETDOWN		(38, "Network is down."),
	NETRESET	(39, "Connection aborted by network."),
	NETUNREACH	(40, "Network unreachable."),
	NFILE		(41, "Too many files open in system."),
	NOBUFS		(42, "No buffer space available."),
	NODEV		(43, "No such device."),
	NOENT		(44, "No such file or directory."),
	NOEXEC		(45, "Executable file format error."),
	NOLCK		(46, "No locks available."),
	NOLINK		(47, "Reserved."),
	NOMEM		(48, "Not enough space."),
	NOMSG		(49, "No message of the desired type."),
	NOPROTOOPT	(50, "Protocol not available."),
	NOSPC		(51, "No space left on device."),
	NOSYS		(52, "Function not supported."),
	NOTCONN		(53, "The socket is not connected."),
	NOTDIR		(54, "Not a directory or a symbolic link to a directory."),
	NOTEMPTY	(55, "Directory not empty."),
	NOTRECOVERABLE	(56, "State not recoverable."),
	NOTSOCK		(57, "Not a socket."),
	NOTSUP		(58, "Not supported, or operation not supported on socket."),
	NOTTY		(59, "Inappropriate I/O control operation."),
	NXIO		(60, "No such device or address."),
	OVERFLOW	(61, "Value too large to be stored in data type."),
	OWNERDEAD	(62, "Previous owner died."),
	PERM		(63, "Operation not permitted."),
	PIPE		(64, "Broken pipe."),
	PROTO		(65, "Protocol error."),
	PROTONOSUPPORT	(66, "Protocol not supported."),
	PROTOTYPE	(67, "Protocol wrong type for socket."),
	RANGE		(68, "Result too large."),
	ROFS		(69, "Read-only file system."),
	SPIPE		(70, "Invalid seek."),
	SRCH		(71, "No such process."),
	STALE		(72, "Reserved."),
	TIMEDOUT	(73, "Connection timed out."),
	TXTBSY		(74, "Text file busy."),
	XDEV		(75, "Cross-device link."),
	NOTCAPABLE	(76, "Extension: Capabilities insufficient.")
}

enum wasi_filetype(code: byte) {
	UNKNOWN			(0),
	BLOCK_DEVICE		(1),
	CHARACTER_DEVICE	(2),
	DIRECTORY		(3),
	REGULAR_FILE		(4),
	SOCKET_DGRAM		(5),
	SOCKET_STREAM		(6),
	SYMBOLIC_LINK		(7)
}

enum WspOneRights {
	// The right to invoke `fd_datasync`.
	//
	// If `path_open` is set, includes the right to invoke
	// `path_open` with `fdflags::dsync`.
	fd_datasync,
	// The right to invoke `fd_read` and `sock_recv`.
	//
	// If `rights::fd_seek` is set, includes the right to invoke `fd_pread`.
	fd_read,
	// The right to invoke `fd_seek`. This flag implies `rights::fd_tell`.
	fd_seek,
	// The right to invoke `fd_fdstat_set_flags`.
	fd_fdstat_set_flags,
	// The right to invoke `fd_sync`.
	//
	// If `path_open` is set, includes the right to invoke
	// `path_open` with `fdflags::rsync` and `fdflags::dsync`.
	fd_sync,
	// The right to invoke `fd_seek` in such a way that the file offset
	// remains unaltered (i.e., `whence::cur` with offset zero), or to
	// invoke `fd_tell`.
	fd_tell,
	// The right to invoke `fd_write` and `sock_send`.
	// If `rights::fd_seek` is set, includes the right to invoke `fd_pwrite`.
	fd_write,
	// The right to invoke `fd_advise`.
	fd_advise,
	// The right to invoke `fd_allocate`.
	fd_allocate,
	// The right to invoke `path_create_directory`.
	path_create_directory,
	// If `path_open` is set, the right to invoke `path_open` with `oflags::creat`.
	path_create_file,
	// The right to invoke `path_link` with the file descriptor as the
	// source directory.
	path_link_source,
	// The right to invoke `path_link` with the file descriptor as the
	// target directory.
	path_link_target,
	// The right to invoke `path_open`.
	path_open,
	// The right to invoke `fd_readdir`.
	fd_readdir,
	// The right to invoke `path_readlink`.
	path_readlink,
	// The right to invoke `path_rename` with the file descriptor as the source directory.
	path_rename_source,
	// The right to invoke `path_rename` with the file descriptor as the target directory.
	path_rename_target,
	// The right to invoke `path_filestat_get`.
	path_filestat_get,
	// The right to change a file's size (there is no `path_filestat_set_size`).
	// If `path_open` is set, includes the right to invoke `path_open` with `oflags::trunc`.
	path_filestat_set_size,
	// The right to invoke `path_filestat_set_times`.
	path_filestat_set_times,
	// The right to invoke `fd_filestat_get`.
	fd_filestat_get,
	// The right to invoke `fd_filestat_set_size`.
	fd_filestat_set_size,
	// The right to invoke `fd_filestat_set_times`.
	fd_filestat_set_times,
	// The right to invoke `path_symlink`.
	path_symlink,
	// The right to invoke `path_remove_directory`.
	path_remove_directory,
	// The right to invoke `path_unlink_file`.
	path_unlink_file,
	// If `rights::fd_read` is set, includes the right to invoke `poll_oneoff` to subscribe to `eventtype::fd_read`.
	// If `rights::fd_write` is set, includes the right to invoke `poll_oneoff` to subscribe to `eventtype::fd_write`.
	poll_fd_readwrite,
	// The right to invoke `sock_shutdown`.
	sock_shutdown,
	// The right to invoke `sock_accept`.
	sock_accept
}

enum WspOneOFlags {
    // Create file if it does not exist.
    creat,
    // Fail if not a directory.
    directory,
    // Fail if file already exists.
    excl,
    // Truncate file to size 0.
    trunc
}

enum WspOneFdFlags {
    // Append mode.
    append,
    // Write according to synchronized I/O data integrity completion.
    dsync,
    // Non-blocking mode.
    nonblock,
    // Synchronized read I/O operations.
    rsync,
    // Write according to synchronized I/O file integrity completion.
    sync
}

enum WspOneClock {
	realtime,
	monotonic,
	process_cputime_id,
	thread_cputime_id
}

enum WspOneFstFlags {
        atim,
        atim_now,
        mtim,
        mtim_now
}

enum Wasi_filetype {
	UNKNOWN,
	BLOCK_DEVICE,
	CHARACTER_DEVICE,
	DIRECTORY,
	REGULAR_FILE,
	SOCKET_DGRAM,
	SOCKET_STREAM,
	SYMBOLIC_LINK
}

layout Wasi_filestat {
	+0	dev:		u64;
	+8	ino:		u64;
	+16	filetype:	Wasi_filetype;
	+24	nlink:		u32;
	+32	size:		u64;
	+40	atim:		u64;
	+48	mtim:		u64;
	+56	ctim:		u64;
	=64;
}

layout Wasi_iovec {
	+0	buf:		u32;
	+4	buf_len:	u32;
	=8;
}

layout Wasi_dirent {
	+0	d_next:		u64;
        +8	d_ino:		u64;
	+16	d_namelen:	u32;
        +20     d_type:         Wasi_filetype;
        =24;
}
