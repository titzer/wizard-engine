// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A simple host module that offers functions that implement saturating arithmetic.
// Demonstrates the use of the {HostModuleBuilder} utility that handles adaption between
// V3 functions and Wasm, as well as registering the module with the global registry.
def X_ = HostModuleBuilder.new("wizeng:arith")
	.func2("i32.sat_add_s", HostAdapters.ii_i(I32_SAT_ADD_S))
	.func2("i32.sat_add_u", HostAdapters.uu_u(I32_SAT_ADD_U))
	.func("i32.trap_on_zero", SigCache.i_i, I32_TRAP_ON_ZERO)
	.register(false);

// Exposed: implements signed 32-bit integer saturation addition.
def I32_SAT_ADD_S(x: int, y: int) -> int {
	var zz = long.!(x) + long.!(y);
	if (zz < int.min) return int.min;
	if (zz > int.max) return int.max;
	return int.!(zz);
}

// Exposed: implements unsigned 32-bit integer saturation addition.
def I32_SAT_ADD_U(x: u32, y: u32) -> u32 {
	var zz = u64.!(x) + u64.!(y);
	if (zz > u32.max) return u32.max;
	return u32.!(zz);
}

def I32_TRAP_ON_ZERO(args: Range<Value>) -> HostResult {
	var val = Values.unbox_u(args[0]);
	if (val == 0) return HostResult.Throw(Trap.new(TrapReason.DIV_BY_ZERO, null, null));
	return HostResult.Value1(Values.box_u(val));
}