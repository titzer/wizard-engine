// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

var x_ = HostModuleBuilderOfNew<WizengModuleNew>.new("wizeng")
	.func_g_v("invoke0", WizengModuleNew.invoke0)
	.func_g_v("tail_invoke0", WizengModuleNew.tailInvoke0)
	.func_ii_v("error", WizengModuleNew.error)
	.func_v_v("crash", WizengModuleNew.crash)
	.func_v_v("force_gc", WizengModuleNew.force_gc)
	.func_i_v("puti", WizengModuleNew.puti)
	.func_ii_v("puts", WizengModuleNew.puts)
	.func_v_l("rdtsc", WizengModuleNew.rdtsc);

// TODO -- add to registry like below:
//def X_ = ModuleRegistry.add(WizengModuleNew.new(), false);

class WizengModuleNew extends HostModule("wizeng") {
	var instance: Instance;
	var memory: Memory;

	// exported: Invokes a {funcref} value with no arguments.
	def invoke0(func: Function) -> Result {
		if (func.sig.params.length != 0 || func.sig.results.length != 0) {
			return Result.Throw(Trap.new(TrapReason.FUNC_SIG_MISMATCH, null, null));
		}
		return Execute.call(func, []);
	}
	// exported: Invokes a {funcref} value with no arguments as a tail call.
	def tailInvoke0(func: Function) -> Result {
		return Result.TailCall(func, []);
	}
	// exported: Throws an error whose message is in the Wasm memory.
	def error(base: int, size: int) -> Result {
		var offset = getRegion2(memory, u32.!(base), u32.!(size));
		if (offset < 0) return Result.Throw(Trap.new(TrapReason.MEM_OUT_OF_BOUNDS, "when calling wizeng.error()", null));
		var msg = memory.extract(u32.!(offset), u32.!(size));
		return Result.Throw(Trap.new(TrapReason.ERROR, msg, null));
	}
	// exported: Crashes the engine intentionally.
	def crash() {
		System.error("Fatal", "wizeng.crash() called by program");
	}
// 	// exported: Creates a new function with bytecode in memory.
// 	def new_funcref(sig: SigDecl, sig_index: int, args: Range<Value>) -> HostResult {
// 		var input = copyString(memory, args[0], args[1]);
// 		if (!input.ok()) return input.toHostResultThrow();
// 		var code = input.result;
// 		var module = instance.module;
// 		var func = FuncDecl.new(sig_index);
// 		func.setOrigCode(code);
// 		func.sig = sig;
// 		func.func_index = module.functions.length + module.new_funcs++;
// 		var err = ErrorGen.new(module.filename);
// 		Execute.tiering.onFuncBody(module, u32.!(func.func_index), code, err);
// 		var validator = CodeValidator.new(Extension.FUNCTION_REFERENCES, Limits.new(), module, err);
// 		match (validator.validateFunc(func)) {
// 			Ok => ;
// 			Error(error_code, error_pos, error_msg) => {
// // TODO				Trace.OUT.put3("error[%s]: %s @ +%d", error_code.name, error_msg, error_pos).ln();
// 				return HostResult.Value1(Values.REF_NULL); // TODO: return error code
// 			}
// 		}
// 		var wf = WasmFunction.new(instance, func);
// 		Execute.tiering.onNewFunction(wf, err);
// 		return HostResult.Value1(Value.Ref(wf));
// 	}
	// Exported: forces a Wizard-level garbage-collection
	def force_gc() {
		Target.forceGC();
	}
	// Exported: read timestamp counter (rdstc on x86).
	def rdtsc() -> i64 {
		return i64.!(Target.rdtsc());
	}
	// Exported: output a signed 32-bit integer to stdout.
	def puti(i: int) {
		System.puti(i);
	}
	// Exported: output a range of bytes directly to stdout.
	def puts(base: int, size: int) -> Result {
		var range = getRegion3(memory, Value.I32(u32.!(base)), Value.I32(u32.!(size)));
		if (!range.ok()) return Traps.result(range.reason);
		System.write(1, range.result);
		return Result.Value([]);
	}
}