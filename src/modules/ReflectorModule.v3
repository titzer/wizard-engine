// Copyright 2025 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Provides reflective access over a module's definitions as a host module.
class ReflectorModule extends HostModule {
	def module: Module;		// the module being reflected upon
	private var memory: Memory;
	private var map: HashMap<string, HostFunction>;

	new(name: string, module) super(name) { }
	// Called by the instantiator to lookup a function by its name.
	def processFunction(error: ErrorGen, name: string, decl: FuncDecl) -> Exportable {
		if (map != null) return map[name];
		// lazy initialize the internal map to avoid linear search
		map = Strings.newMap();
		for (t in [
			("get_module_size", SigCache.v_i, get_module_size),
			("get_num_types", SigCache.v_i, get_num_types),
			("get_num_imports", SigCache.v_i, get_num_imports),
			("get_num_functions", SigCache.v_i, get_num_functions),
			("get_num_tables", SigCache.v_i, get_num_tables),
			("get_num_memories", SigCache.v_i, get_num_memories),
			("get_num_globals", SigCache.v_i, get_num_globals),
			("get_num_tags", SigCache.v_i, get_num_tags),
			("get_num_exports", SigCache.v_i, get_num_exports),
			("get_num_elements", SigCache.v_i, get_num_elements),
			("get_num_data", SigCache.v_i, get_num_data),
			("get_num_custom_sections", SigCache.v_i, get_num_custom_sections),
			("get_import_index", SigCache.ii_i, get_import_index),
			("read_module_path", SigCache.ii_i, read_module_path),
			("read_module_name", SigCache.ii_i, read_module_name),
			("read_module_def", SigCache.ii_i, read_module_def),
			("read_section", SigCache.iiii_i, read_section),
			("read_type_def", SigCache.iii_i, read_type_def),
			("read_import_def", SigCache.iii_i, read_import_def),
			("read_function_def", SigCache.iii_i, read_function_def),
			("read_function_name", SigCache.iii_i, read_function_name),
			("read_function_body", SigCache.iii_i, read_function_body),
			("read_table_def", SigCache.iii_i, read_table_def),
			("read_memory_def", SigCache.iii_i, read_memory_def),
			("read_global_def", SigCache.iii_i, read_global_def),
			("read_tag_def", SigCache.iii_i, read_tag_def),
			("read_export_def", SigCache.iii_i, read_export_def),
			("read_element_def", SigCache.iii_i, read_element_def),
			("read_data_def", SigCache.iii_i, read_data_def),
			("read_custom_section", SigCache.iii_i, read_custom_section)
		]) {
			map[t.0] = HostFunction.new(t.0, t.1, t.2);
		}
		return map[name];
	}
	// After the importer of this module is instantiated, bind to its memory in order to copy out data.
	def postprocess(error: ErrorGen, instance: Instance) {
		this.memory = instance.findExportOfType<Memory>(null);
	}

	// ===== Exported functions ====================================================
	def get_module_size(args: Range<Value>) -> HostResult {
		return i(module.outline.orig_bytes.length);
	}

	def get_num_types(args: Range<Value>) -> HostResult 		{ return i(module.outline.heaptypes.offsets.length); }
	def get_num_imports(args: Range<Value>) -> HostResult 		{ return i(module.outline.imports.offsets.length); }
	def get_num_functions(args: Range<Value>) -> HostResult		{ return i(module.outline.functions.offsets.length); }
	def get_num_tables(args: Range<Value>) -> HostResult		{ return i(module.outline.tables.offsets.length); }
	def get_num_memories(args: Range<Value>) -> HostResult		{ return i(module.outline.memories.offsets.length); }
	def get_num_globals(args: Range<Value>) -> HostResult		{ return i(module.outline.globals.offsets.length); }
	def get_num_tags(args: Range<Value>) -> HostResult		{ return i(module.outline.tags.offsets.length); }
	def get_num_exports(args: Range<Value>) -> HostResult		{ return i(module.outline.exports.offsets.length); }
	def get_num_elements(args: Range<Value>) -> HostResult		{ return i(module.outline.elements.offsets.length); }
	def get_num_data(args: Range<Value>) -> HostResult		{ return i(module.outline.data.offsets.length); }
	def get_num_custom_sections(args: Range<Value>) -> HostResult	{ return i(module.outline.custom_sections.length); }

	def get_import_index(args: Range<Value>) -> HostResult {
		var sect = Values.unbox_u(args[0]);
		var i = Values.unbox_i(args[1]);
		var decl: Decl;
		var offsets: Vector<int>;
		match (sect) {
			BpSection.Function.code => offsets = module.outline.functions.offsets;
			BpSection.Table.code =>  offsets = module.outline.tables.offsets;
			BpSection.Memory.code =>  offsets = module.outline.memories.offsets;
			BpSection.Tag.code =>  offsets = module.outline.tags.offsets;
			BpSection.Global.code =>  offsets = module.outline.globals.offsets;
			_ => return THROW_OOB;
		}
		if (i < 0 || i >= offsets.length) return THROW_OOB;
		var start = offsets[i];
		var val = if (start < 0, -1 - start, -1);
		return HostResult.Value1(Values.box_i(val));
	}

	def read_type_def(args: Range<Value>) -> HostResult		{ return readDeclFromSection(args, module.outline.heaptypes); }
	def read_import_def(args: Range<Value>) -> HostResult		{ return readDeclFromSection(args, module.outline.imports); }
	def read_function_def(args: Range<Value>) -> HostResult		{ return readDeclFromSection(args, module.outline.functions); }
	def read_table_def(args: Range<Value>) -> HostResult		{ return readDeclFromSection(args, module.outline.tables); }
	def read_memory_def(args: Range<Value>) -> HostResult		{ return readDeclFromSection(args, module.outline.memories); }
	def read_global_def(args: Range<Value>) -> HostResult		{ return readDeclFromSection(args, module.outline.globals); }
	def read_tag_def(args: Range<Value>) -> HostResult		{ return readDeclFromSection(args, module.outline.tags); }
	def read_export_def(args: Range<Value>) -> HostResult		{ return readDeclFromSection(args, module.outline.exports); }
	def read_element_def(args: Range<Value>) -> HostResult		{ return readDeclFromSection(args, module.outline.elements); }
	def read_data_def(args: Range<Value>) -> HostResult		{ return readDeclFromSection(args, module.outline.data); }
	def read_custom_section(args: Range<Value>) -> HostResult {
		var i = Values.unbox_i(args[0]);
		if (i < 0 || i >= module.outline.custom_sections.length) return THROW_OOB;
		var bounds = module.outline.custom_sections[i];
		return copyRange(args[1 ..+ 2], module.outline.orig_bytes[bounds.0 ... bounds.1]);
	}

	def read_module_path(args: Range<Value>) -> HostResult {
		return copyRange(args, module.filename);
	}
	def read_module_name(args: Range<Value>) -> HostResult {
		var name = if(module.names != null, module.names.getModuleName());
		return copyRange(args, name);
	}
	def read_module_def(args: Range<Value>) -> HostResult {
		return copyRange(args, module.outline.orig_bytes);
	}
	def read_section(args: Range<Value>) -> HostResult {
		var sect = Values.unbox_u(args[0]);
		var src: Range<byte>;
		var o = module.outline;
		match (sect) {
			BpSection.Type.code =>		src = o.heaptypes.range(o.orig_bytes);
			BpSection.Import.code => 	src = o.imports.range(o.orig_bytes);
			BpSection.Function.code => 	src = o.functions.range(o.orig_bytes);
			BpSection.Table.code => 	src = o.tables.range(o.orig_bytes);
			BpSection.Memory.code => 	src = o.memories.range(o.orig_bytes);
			BpSection.Tag.code => 		src = o.tags.range(o.orig_bytes);
			BpSection.Global.code => 	src = o.globals.range(o.orig_bytes);
			BpSection.Export.code => 	src = o.exports.range(o.orig_bytes);
//TODO			BpSection.Start.code => 	src = o.start.range(o.orig_bytes);
			BpSection.Element.code => 	src = o.elements.range(o.orig_bytes);
//TODO			BpSection.DataCount.code => 	src = o.datacount.range(o.orig_bytes);
//TODO			BpSection.Code.code => 		src = o.code.range(o.orig_bytes);
			BpSection.Data.code => 		src = o.data.range(o.orig_bytes);
		}
		return copyRange(args[1 ..+ 2], src);
	}
	def read_function_name(args: Range<Value>) -> HostResult {
		var i = Values.unbox_i(args[0]);
		var f = module.functions.get(i);
		if (f == null) return THROW_OOB;
		var name = if(module.names != null, module.names.getFuncName(i));
		return copyRange(args[1 ..+ 2], name);
	}
	def read_function_body(args: Range<Value>) -> HostResult {
		var i = Values.unbox_i(args[0]);
		var f = module.functions.get(i);
		if (f == null) return THROW_OOB;
		return copyRange(args[1 ..+ 2], f.orig_bytecode);
	}

	def readDeclFromSection(args: Range<Value>, section: SectionOutline) -> HostResult {
		var i = Values.unbox_u(args[0]);
		if (i >= section.offsets.length) return THROW_OOB;
		var src = section.get(module.outline.orig_bytes, int.view(i));
		return copyRange(args[1 ..+ 2], src);
	}
	def copyRange(args: Range<Value>, src: Range<byte>) -> HostResult {
		var range = getRegion3(memory, args[0], args[1]);
		if (range.reason != TrapReason.NONE) return range.toHostResultThrow();
		var dst = range.result;
		if (dst.length > src.length) dst = dst[0 ... src.length];
		Target.fastFwCopy(dst, src);
		return HostResult.Value1(Values.box_i(src.length));
	}
}

def i(i: int) -> HostResult { return HostResult.Value1(Values.box_i(i)); }
def THROW_OOB = HostResult.Throw(Trap.new(TrapReason.ARRAY_INDEX_OOB, null, null));
