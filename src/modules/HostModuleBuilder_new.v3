// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class HostModuleBuilderOfNew<T>(name: string) {
	def func_i_v(fname: string, f: (T, int) -> void) -> this {
		HostFunction.new(fname, SigCache.i_v, wrapper_i_v(f, _));
	}
	def func_ii_v(fname: string, f: (T, int, int) -> Result) -> this {
		HostFunction.new(fname, SigCache.ii_v, wrapper_ii_v(f, _));
	}
	def func_v_v(fname: string, f: (T) -> ()) -> this {
		HostFunction.new(fname, SigCache.v_v, wrapper_v_v(f, _));
	}
	def func_v_l(fname: string, f: (T) -> i64) -> this {
		HostFunction.new(fname, SigCache.v_l, wrapper_v_l(f, _));
	}
	def func_g_v(fname: string, f: (T, Function) -> Result) -> this {
		HostFunction.new(fname, SigCache.g_v, wrapper_g_v(f, _));
	}
	def finish() { }
}

def wrapper_i_v<T>(f: (T, int) -> void, args: Range<Value>) -> HostResult {
	var a0 = Values.unbox_i(args[0]);
	// todo -- cache t!
	var t: T;
	var r0 = f(t, a0);
	return HostResult.Value0;
}

def wrapper_ii_v<T>(f: (T, int, int) -> Result, args: Range<Value>) -> HostResult {
	var a0 = Values.unbox_i(args[0]);
	var a1 = Values.unbox_i(args[1]);
	// todo -- cache t!
	var t: T;
	var r0 = f(t, a0, a1);
	match (r0) {
		Throw(thrown) => return HostResult.Throw(thrown);
		_ => return HostResult.Value0;
	}
}

def wrapper_v_v<T>(f: (T) -> (), args: Range<Value>) -> HostResult {
	// todo -- cache t!
	var t: T;
	f(t);
	return HostResult.Value0;
}

def wrapper_v_l<T>(f: (T) -> i64, args: Range<Value>) -> HostResult {
	// todo -- cache t!
	var t: T;
	return HostResult.Value1(Value.I64(u64.!(f(t))));
}

def wrapper_g_v<T>(f: (T, Function) -> Result, args: Range<Value>) -> HostResult {
	var a0 = Values.unbox_i(args[0]);
	match (args[0]) {
		Ref(object) => {
			match (object) {
				null => return HostResult.Throw(Trap.new(TrapReason.NULL_DEREF, null, null));
				func: Function => {
					// todo -- cache t!
					var t: T;
					var r0 = f(t, func);
					match (r0) {
						Throw(thrown) => return HostResult.Throw(thrown);
						TailCall(f, a) => return HostResult.TailCall(f, a);
						_ => return HostResult.Value0;
					}
				}
			}
		}
		_ => ;
	}
	return HostResult.Throw(Trap.new(TrapReason.FAILED_CAST, null, null));
}