// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The "wave" module provides an execution environment for Virgil programs compiled to Wasm.
def Y_ = HostModuleBuilderOf<WaveInstance>.new("wave", WaveInstance.new, WaveInstance.bind)
	.func_i_i("arg_len", fun i => i.arg_len)
	.func_uuu_r("arg_copy", fun i => i.arg_copy)
	.func_uu_r("fs_size", fun i => i.fs_size)
	.func_uuu_r("fs_chmod", fun i => i.fs_chmod)
	.func_uuu_r("fs_open", fun i => i.fs_open)
	.func_iuu_r("fs_read", fun i => i.fs_read)
	.func_iuu_r("fs_write", fun i => i.fs_write)
	.func_i_i("fs_avail", fun i => i.fs_avail)
	.func_i_v("fs_close", fun i => i.fs_close)
	.func_v_i("ticks_ms", fun i => System.ticksMs)
	.func_v_i("ticks_us", fun i => System.ticksUs)
	.func_v_i("ticks_ns", fun i => System.ticksNs)
	.func_uuuu_r("throw_ex", fun i => i.throw_ex)
	.init(WaveInstance.init)
	.getMain(WaveInstance.getMain)
	.register(true); // TODO: don't expose wave by default

def OOB = HostResult.Throw(Trap.new(TrapReason.MEM_OUT_OF_BOUNDS, null, null));
def MINUS_1 = HostResult.Value1(Value.I32(0xFFFFFFFFu));
def NONE = HostResult.Value0;
def MAX_FDS = 256;

// Implements the "wave" module interface for programs compiled from Virgil.
class WaveInstance {
	def fdmap = FileDescriptorMap.new(MAX_FDS);
	var cmdline_args: Array<string>;
	var memory: Memory;

	// Bind the WaveInstance to an instance of a module.
	def bind(instance: Instance) {
		memory = instance.findExportOfType<Memory>(null);
	}
	// Initialize the WaveInstance with command-line arguments.
	def init(args: Array<string>, trace: bool, err: ErrorGen) { // XXX: remove trace
		cmdline_args = args;
	}
	// Get the main function of an instance, if there is one.
	def getMain(instance: Instance) -> (Function, Array<Value>) {
		var main = instance.findExportOfType<Function>(GlobMatcher.new("main"));
		if (main == null) {
			for (iex in instance.exports) {
				match (iex) {
					x: Function => {
						// If more than one exported function, don't know
						if (main != null) return (null, null);
						main = x;
					}
				}
			}
		}
		if (main == null) return (null, null);
		if (Arrays.equal(main.sig.params, SigCache.arr_i)) return (main, [Values.box_i(cmdline_args.length)]);
		return (main, Arrays.map(main.sig.params, Values.default));
	}
	def deinit(result: Result) {
		fdmap.closeAll();
	}

	// ==={Provided functions}============================================
	def arg_len(arg: int) -> int {
		if (u32.view(arg) >= cmdline_args.length) return -1;
		return cmdline_args[arg].length;
	}
	def arg_copy(arg: u32, ptr: u32, len: u32) -> HostResult {
		if (memory == null) return OOB;
		if (arg >= cmdline_args.length) return MINUS_1;
		var data = cmdline_args[arg];
		if (len > data.length) len = u32.!(data.length);
		var i = memory.boundsCheck(0, ptr, len);
		if (i < 0) return OOB;
		memory.copyIn(ptr, data, 0, len);
		return this.i(int.!(len));
	}
	def fs_size(ptr: u32, len: u32) -> HostResult {
		var path = copyString(memory, ptr, len);
		if (!path.ok()) return path.toHostResultThrow();
		var fd = System.fileOpen(path.result, true);
		if (fd < 0) return i(0);
		var size = System.fileLeft(fd);
		System.fileClose(fd);
		return i(size);
	}
	def fs_chmod(ptr: u32, len: u32, perm: u32) -> HostResult {
		var path = copyString(memory, ptr, len);
		if (!path.ok()) return path.toHostResultThrow();
		System.chmod(path.result, int.view(perm));
		return i(0);
	}
	def fs_open(ptr: u32, len: u32, mode: u32) -> HostResult {
		var path = copyString(memory, ptr, len);
		if (!path.ok()) return path.toHostResultThrow();
		var fd = fdmap.alloc();
		if (fd < 0) return MINUS_1; // out of file descriptors
		var s = System.fileOpen(path.result, mode == 0);
		if (s < 0) return i(s);
		fdmap.set(fd, s);
		return i(fd);
	}
	def fs_read(fd: int, buf: u32, len: u32) -> HostResult {
		var s = fdmap.get(fd);
		if (s < 0) return MINUS_1;
		if (memory == null) return OOB;
		return i(memory.readIn(s, buf, len));
	}
	def fs_write(fd: int, buf: u32, len: u32) -> HostResult {
		var s = fdmap.get(fd);
		if (s < 0) return MINUS_1;
		if (memory == null) return OOB;
		return i(memory.writeOut(s, buf, len));
	}
	def fs_avail(fd: int) -> int {
		var s = fdmap.get(fd);
		if (s < 0) return -1;
		var r = System.fileLeft(s);
		return r;
	}
	def fs_close(fd: int) {
		var s = fdmap.get(fd);
		if (s < 0) return;
		System.fileClose(s);
		fdmap.free(fd);
	}
	def throw_ex(ex: u32, ex_len: u32, msg: u32, msg_len: u32) -> HostResult {
		if (memory == null) return OOB;
		var errstr = memory.extract(ex, ex_len);
		var msgstr = memory.extract(msg, msg_len);
		// TODO: print out messages
		return HostResult.Throw(Exit.new(u32.max));
	}
	// ===================================================================
	def copyString(memory: Memory, offset: u32, size: u32) -> MaybeTrap<string> {
		if (memory == null) return MaybeTrap<string>(null, TrapReason.NO_EXPORTED_MEM);
		return memory.range_ol_32(offset, size).then(Ranges.dup<byte>);
	}
	private def i(v: int) -> HostResult {
		return HostResult.Value1(Value.I32(u32.view(v)));
	}
}
