// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Main entrypoint to an wasm file format dumping utility.
def main(args: Array<string>) -> int {
	var engine = Engine.new();

	engine.extensions = Extension.set.all;

	// Parse options and extract module and module arguments
	for (i < args.length) {
		var a = args[i];
		if (a.length > 0 && a[0] == '-') {
			if (!(TraceOptions.parse(a) 
				|| EngineOptions.parse(engine, a)
				|| MetricOptions.parse(a)
				)) return ErrorBuilder.new()
				.puts("objdump: unrecognized option ")
				.putsq(a)
				.ln()
				.exit(1);
			args[i] = null;
		} else if (!Strings.endsWith(a, ".wasm")) {
			return ErrorBuilder.new()
				.puts(a)
				.puts(": unknown file format, expected .wasm\n")
				.exit(4);
		}
	}

	for (a in args) {
		if (a == null) continue;
		var exit = parseAndDump(engine, a);
		if (exit != 0) return exit;
	}
	return 0;
}

def parseAndDump(engine: Engine, path: string) -> int {
	// Parse the binary module
	var result = engine.loadWasmFile(path);
	var module: Module;
	match (result) {
		Ok(m) => module = m;
		FileNotFound => return ErrorBuilder.new()
			.puts("objdump: could not load file ")
			.puts(path)
			.puts("\n")
			.exit(2);
		ParseError(code, path, section, error_index, error_pos, error_msg) => return ErrorBuilder.new()
			.render(code, path, section, error_index, error_pos, error_msg)
			.exit(3);
	}
	var names = if(module.names != null, module.names.lazyDecode());
	// Dump the binary module
	var OUT = Trace.OUT;
	for (i < module.heaptypes.length) {
		var h = module.heaptypes[i];
		OUT.put2("types[%d] = %q ", i, h.render);
		renderSuperTypes(OUT, h.supertypes, HeapType.render);
		OUT.outln();
	}
	for (i < module.imports.length) {
		var d = module.imports[i];
		OUT.put1("imports[%d] = ", i);
		OUT.putsq(d.imp.module_name);
		OUT.putc('.');
		OUT.putsq(d.imp.field_name);
		renderImportExportDecl(OUT, d);
		OUT.outln();
	}
	for (i < module.abstypes.length) {
		var a = module.abstypes[i];
		OUT.put3("abstypes[%d] = has_default=%z is_externref=%z ", i, a.has_default, a.is_externref);
		renderSuperTypes(OUT, a.assignable, ValueType.render);
		OUT.outln();
	}
	for (i < module.functions.length) {
		var f = module.functions[i];
		OUT.put2("functions[%d] = %q", i, f.render(names, _));
		OUT.put1(": %q", f.sig.render);
		if (f.imp == null) OUT.put1(" { %d bytes }", f.orig_bytecode.length);
		OUT.outln();
	}
	for (i < module.tables.length) {
		var t = module.tables[i];
		OUT.put1("tables[%d] default elem = ", i);
		match (t.default_elem) {
			I32 => OUT.puts("I32");
			I64 => OUT.puts("I64");
			F32 => OUT.puts("F32");
			F64 => OUT.puts("F64");
			V128 => OUT.puts("V128");
			FuncRefNull => OUT.puts("FuncRefNull");
			ExternRefNull => OUT.puts("ExternRefNull");
			Global => OUT.puts("Global");
			FuncRef => OUT.puts("FuncRef");
			Const => OUT.puts("Const");
			I31 => OUT.puts("I31");
			Array => OUT.puts("Array");
			FixedArray => OUT.puts("FixedArray");
			Struct => OUT.puts("Struct");
			ArrayNewData => OUT.puts("ArrayNewData");
			ArrayNewElem => OUT.puts("ArrayNewElem");
		}
		OUT.outln();
	}
	for (i < module.tags.length) {
		var t = module.tags[i];
		OUT.put1("tags[%d] = ", i);
		if (t.fields != null) {
			for (value in t.fields) {
				OUT.put1("value: %q", value.render);
				OUT.outln();
			}
		}
		OUT.outln();
	}
	for (i < module.exports.length) {
		var e = module.exports[i];
		OUT.put1("exports[%d] = ", i);
		OUT.putsq(e.0);
		renderImportExportDecl2(OUT, e.1);
		OUT.outln();
	}
	OUT.put1("new functions: %d", module.new_funcs);
	OUT.outln();
	return 0;
}
def renderImportExportDecl(out: StringBuilder, decl: Decl) {
	match (decl) {
		x: SigDecl => out.put1(": sig #%d", x.heaptype_index);
		x: StructDecl => out.put1(": struct #%d", x.heaptype_index);
		x: ArrayDecl => out.put1(": array #%d", x.heaptype_index);
		x: AbsTypeDecl => out.put1(": abstype #%d", x.abstype_index);
		x: FuncDecl => out.put2(": func #%d: %q", x.func_index, x.sig.render);
		x: TableDecl => out.put1(": table #%d", x.table_index);
		x: MemoryDecl => out.put1(": memory #%d", 0); // TODO
		x: GlobalDecl => out.put1(": global #%d", x.global_index);
		x: TagDecl => out.put1(": tag #%d", x.tag_index);
		x: ImportCommandDecl => out.puts(": command");
	}
}
def renderImportExportDecl2(out: StringBuilder, decl: Decl2) {
	match (decl) {
		Sig(index)		=> out.put1(": sig #%d", index);
		Struct(index)		=> out.put1(": struct #%d", index);
		Array(index)		=> out.put1(": array #%d", index);
		AbsType(index)		=> out.put1(": abstype #%d", index);
		Func(index)		=> out.put1(": func #%d", index);
		Table(index)		=> out.put1(": table #%d", index);
		Memory(index)		=> out.put1(": memory #%d", index);
		Global(index)		=> out.put1(": global #%d", index);
		Tag(index)		=> out.put1(": tag #%d", index);
		ImportCommand(index)	=> out.put1(": command #%d", index);
	}
}
def renderSuperTypes<T>(out: StringBuilder, t: Array<T>, render: (T, StringBuilder) -> StringBuilder) -> StringBuilder {
	if (t.length == 0) return out;
	out.puts(" <: ");
	for (i < t.length) {
		if (i > 0) out.csp();
		render(t[i], out);
	}
	return out;
}