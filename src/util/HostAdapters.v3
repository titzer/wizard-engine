// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def ui = Values.unbox_i;
def uu = Values.unbox_u;
def bi = Values.box_i;
def bu = Values.box_u;

// Utility methods that adapt host (V3) functions to be called from Wasm.
component HostAdapters {
	def ii_i = adapt(wrap_ii_i, _);
	def uu_u = adapt(wrap_uu_u, _);

	def C_ii_i<C>(func: (C, int, int) -> int) => fun (c: C) => fun (args: Range<Value>) => bi(func(c, ui(args[0]), ui(args[1])));
	def C_uu_u<C>(func: (C, u32, u32) -> u32) => fun (c: C) => fun (args: Range<Value>) => bu(func(c, uu(args[0]), uu(args[1])));
}

def adapt<P, R>(wrap: (P -> R, Range<Value>) -> HostResult, func: P -> R) -> (Range<Value> -> HostResult) {
	return wrap(func, _);
}
def adaptC_1<C, P0, R>(c: C, wrap: ((P0) -> R, Range<Value>) -> HostResult, func: (C, P0) -> R) -> (Range<Value> -> HostResult) {
	return wrap(func(c, _), _);
}
def adaptC_2<C, P0, P1, R>(c: C, wrap: ((P0, P1) -> R, Range<Value>) -> HostResult, func: (C, P0, P1) -> R) -> (Range<Value> -> HostResult) {
	return wrap(func(c, _, _), _);
}
def adaptC_3<C, P0, P1, P2, R>(c: C, wrap: ((P0, P1, P2) -> R, Range<Value>) -> HostResult, func: (C, P0, P1, P2) -> R) -> (Range<Value> -> HostResult) {
	return wrap(func(c, _, _, _), _);
}
def wrap_ii_i(func: (int, int) -> int, args: Range<Value>) -> HostResult {
	return HostResult.Value1(Values.box_i(func(Values.unbox_i(args[0]), Values.unbox_i(args[1]))));
}
def wrap_uu_u(func: (u32, u32) -> u32, args: Range<Value>) -> HostResult {
	return HostResult.Value1(Values.box_u(func(Values.unbox_u(args[0]), Values.unbox_u(args[1]))));
}
