// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component TraceUtil {
	// Returns change in length in {out} after {f(out)} is called.
	// Useful with TraceBuilder.rjustify(...)
	def renderedLength(out: TraceBuilder, f: StringBuilder -> StringBuilder) -> int {
		var length = out.length;
		f(out);
		return out.length - length;
	}
	// Renders the decimal {dividend/divisor} to {prec} decimal places
	def renderFraction(out: StringBuilder, dividend: long, divisor: long, prec: int) -> int {
		var length = out.length;
		var intVal = dividend / divisor;
		out.putd(intVal);
		out.putc('.');

		var base = 10;
		for (i < prec) {
			out.putd((dividend * base / divisor) % 10);
			base *= 10;
		}
		return out.length - length;
	}
	def renderPercent(out: StringBuilder, dividend: long, divisor: long, prec: int) -> int { // TODO: make into u64
		var length = TraceUtil.renderFraction(out, dividend * 100, divisor, prec);
		out.putc('%');
		return length + 1;
	}
	// Render {time} in microseconds as {0.xxxxxxs}
	def renderUs(out: TraceBuilder, time: long) -> int {
		var length = TraceUtil.renderFraction(out, time, 1000000, 6);
		out.putc('s');
		return length + 1;
	}
	def renderThrowable(out: TraceBuilder, thrown: Throwable) {
		var indent = 0;
		for (s = thrown.stacktrace; s != null; s = s.prev) {
			for (t in s.frames) {
				for (i < indent) out.puts("  ");
				t.0.render(out);
				if (t.1 >= 0) out.puts(" +").putd(t.1);
				out.ln();
				indent++;
			}
			if (s.host != null) {
				for (i < indent) out.puts("  ");
				out.puts("\t@ ");
				s.host.render(out);
				out.ln();
				indent++;
			}
		}
		for (i < indent) out.puts("  ");
		out.puts("!");
		thrown.render(out);
		out.ln();
	}
}

// Utility to print a table with aligned columns.
class TraceTable(names: Array<string>) {
	def cells = Array<TableCell>.new(names.length);
	var name_color: Color;

	new() {
		for (i < cells.length) cells[i] = TableCell.new();
	}

	// Output two lines for a table header, like so:
	// Col1      Col2       Col3
	//---------------------------
	def putTableHeader(buf: TraceBuilder) {
		var before = buf.length;
		buf.beginColor(name_color);
		for (i < cells.length) {
			buf.sp();
			var name = names[i], cell = cells[i];
			var diff = cell.width - name.length;
			var t = computePadding(diff, cell.justify), padl = t.0, padr = t.1;
			if (padl > 0) buf.pad(' ', buf.length + padl);
			buf.puts(names[i]);
			if (padr > 0) buf.pad(' ', buf.length + padr);
		}
		var len = buf.length - before;
		buf.endColor(name_color);
		buf.ln();
		buf.pad('-', buf.length + len + 1);
		buf.ln();
	}
	// Output a table line for a row, justified, quoted, and colored according to each cell.
	def putTableRow(buf: TraceBuilder) {
		var color = Color.NONE;
		for (cell in cells) {
			buf.sp();
			var diff = cell.width - (cell.length + if(cell.quoted, 2, 0));
			var t = computePadding(diff, cell.justify), padl = t.0, padr = t.1;
			if (padl > 0) buf.pad(' ', buf.length + padl);
			buf.beginColor(color = cell.color);
			if (cell.quoted) buf.putc('\"');
			var outf: Range<byte> -> StringBuilder = buf.putr; // TODO: jvm type error bug
			cell.send(outf);
			if (cell.quoted) buf.putc('\"');
			if (padr > 0) buf.pad(' ', buf.length + padr);
			cell.reset();
		}
		buf.endColor(color);
		buf.ln();
	}
	// Output a header line for comma-separated values, like so:
	// Col1,Col2,Col3
	def putCsvHeader(buf: StringBuilder) {
		for (i < names.length) {
			if (i > 0) buf.putc(',');
			buf.puts(names[i]);
		}
		buf.ln();
	}
	// Output a line for a command-separated-value row.
	def putCsvRow(buf: StringBuilder) {
		for (i < cells.length) {
			var cell = cells[i];
			if (i > 0) buf.putc(',');
			if (cell.quoted) buf.putc('\"');
			cell.send(buf.putr);
			if (cell.quoted) buf.putc('\"');
			cell.reset();
		}
		buf.ln();
	}
}

def computePadding(diff: int, justify: Justification) -> (int, int) {
	var padl = 0, padr = 0;
	match (justify) {
		LEFT => return (0, diff);
		CENTER_L => {
			var hdiff = diff >> 2;
			return (hdiff, diff - hdiff);
		}
		CENTER_R => {
			var hdiff = diff >> 2;
			return (diff - hdiff, hdiff);
		}
		RIGHT => return (diff, 0);
	}
}

// Represents a cell of a row, including its attributes such as justification, color, etc.
// As each cell is its own {StringBuilder}, they can be written to independently.
class TableCell extends StringBuilder {
	var quoted: bool;
	var width: byte = 12;
	var justify: Justification;
	var color: Color;

	def set(width: byte, justify: Justification, color: Color) -> this {
		this.width = width;
		this.justify = justify;
		this.color = color;
	}
}

// Justification of the text within a cell.
enum Justification { LEFT, CENTER_L, CENTER_R, RIGHT }
