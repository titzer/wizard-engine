// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility methods for vector.
// 
// TODO: all these searches can be done on Range<T>. Maybe add a `toRange`
// method to `Vector` in virgil and change this to `RangeSearchUtil`? Vector<T>
// to Range<T> should be pretty much free.
component RangeUtil {
  // Assumes that the vector is sorted.
  def binarySearch<T>(range: Range<T>, val: T, lt: (T, T) -> bool) -> int {
    var l = 0, r = range.length;
    while (l < r) {
      var mid = (l + r) >> 1;
      var mid_val = range[mid];
      if (lt(val, mid_val)) r = mid - 1;
      else if (lt(mid_val, val)) l = mid + 1;
      else return mid;
    }
    return -1;
  }
  // Returns the *first* element that is *not less* than `val`.
  def lowerbound<T>(range: Range<T>, val: T, lt: (T, T) -> bool) -> int {
    var start = 0;
    var count = range.length;
    while (count > 0) {
      var step = count >> 1;
      var mid = start + step;
      if (lt(range[mid], val)) { start = mid + 1; count -= step + 1; }
      else count = step;
    }
    return start;
  } 
  // Returns the *first* element that is *greater* than `val`.
  def upperbound<T>(range: Range<T>, val: T, lt: (T, T) -> bool) -> int {
    var start = 0;
    var count = range.length;
    while (count > 0) {
      var step = count >> 1;
      var mid = start + step;
      if (!lt(val, range[mid])) { start = mid + 1; count -= step + 1; }
      else count = step;
    }
    return start;
  }
}
