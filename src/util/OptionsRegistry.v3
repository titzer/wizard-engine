// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Centralizes management of help for options and sections for various utilities,
// which is used to print out help for all command-line options.
component OptionsRegistry {
	def ALL = BasicOptions.new(null);
	var groups: List<(OptionGroup, TraceBuilder -> void)>;
	var funcs: List<(string, ErrorGen) -> bool>;

	def newGroup(name: string, printHelp: TraceBuilder -> void) -> OptionGroup {
		var g = OptionGroup.new(name, ALL);
		groups = List.new((g, printHelp), groups);
		return g;
	}
	def addParseFunc(f: (string, ErrorGen) -> bool) {
		funcs = List.new(f, funcs);
	}
	def print() {
		var out = Trace.OUT;
		for (l = groups; l != null; l = l.tail) {
			var g = l.head.0, h = l.head.1;
			out.put1("%s OPTIONS\n", g.name);
			out.ln();
			if (h != null) {
				h(out);
			} else {
				g.print(out, false);
			}
			out.ln();
		}
	}
	def parse(arg: string, err: ErrorGen) -> bool {
		if (ALL.parseOption(arg)) return true;
		for (l = funcs; l != null; l = l.tail) {
			if (l.head(arg, err)) return true;
		}
		return false;
	}
	def filterArgs(args: Array<string>, err: ErrorGen) {
		for (i < args.length) {
			var a = args[i];
			if (a == null || a.length < 1 || a[0] != '-') continue;
			if (parse(a, err)) args[i] = null;
		}
	}
}

// Collects related options and stores a help string for each.
class OptionGroup(name: string, o: BasicOptions) {
	var list: List<OptionGroupEntry>;

	def newDeclFilterOption(name: string, help: string) -> Option<DeclFilter> {
		var r = Option.new<DeclFilter>(name, null, DeclFilters.parseString);
		return add(o.add(r), "=<function patterns>", help);
	}
	def newIntOption(name: string, defval: int, help: string) -> Option<int> {
		return add(o.newIntOption(name, defval), "=<int>", help);
	}
	def newBoolOption(name: string, defval: bool, help: string) -> Option<bool> {
		return add(o.newBoolOption(name, defval), "[=(true|false)]", help);
	}
	def newFlag(name: string, onParse: string -> void, help: string) -> Option<bool> {
		var r = Option<bool>.new(name, false, setFlag(_, onParse));
		return add(o.add(r), "", help);
	}
	def newStringOption(name: string, defval: string, help: string) -> Option<string> {
		return add(o.newStringOption(name, defval), "=<string>", help);
	}
	def newPathOption(name: string, defval: string, help: string) -> Option<string> {
		return add(o.newStringOption(name, defval), "=<path>", help);
	}
	def newSizeOption(name: string, defval: u32, help: string) -> Option<u32> {
		return add(o.newSizeOption(name, defval), "=<int[K|M|G]>", help);
	}
	def newAddrOption(name: string, defval: u64, help: string) -> Option<u64> {
		return add(o.newAddrOption(name, defval), "=<address>", help);
	}
	def newEmptyOption(name: string, help: string) -> Option<bool> {
		return add(o.newOption(name, false, parseEmpty), "", help);
	}
	def newOption<T>(name: string, defval: T, typename: string, parseFun: string -> T, help: string) -> Option<T> {
		return add(o.newOption(name, defval, parseFun), typename, help);
	}
	def add<T>(opt: Option<T>, typename: string, help: string) -> Option<T> {
		list = List.new(OptionGroupEntry.new(opt, opt.name, typename, help), list);
		return opt;
	}
	def addAlias<T>(opt: Option<T>, alias: string) -> Option<T> {
		for (l = list; l != null; l = l.tail) {
			if (Option<T>.?(l.head.opt) && Option<T>.!(l.head.opt) == opt) {
				l.head.display_name = Strings.format2("%s|%s", l.head.display_name, alias);
				var new_opt = o.newOption(alias, opt.init, opt.parseFun);
				new_opt.onSet(syncOptionSet(_, opt.onSetFun, opt));
				opt.onSet(syncOptionSet(_, opt.onSetFun, new_opt));
				return new_opt;
			}
		}
		return null;
	}
	def parseEmpty(str: string) -> bool {
		return str == null;
	}
	def print(buf: StringBuilder, is_monitor_opt: bool) {
		for (l = Lists.reverse(list); l != null; l = l.tail) {
			var t = l.head;
			if (is_monitor_opt) {
				buf.put3("                      {%s%s} %s\n", t.display_name, t.type_name, t.help);
			} else {
				buf.put2("    -%s%s\n", t.display_name, t.type_name);
				buf.put1("        %s\n", t.help);
			}
		}
		if (!is_monitor_opt) buf.ln();
	}
}

def syncOptionSet<T>(val: T, orig_on_set_func: T -> void, opt: Option<T>) {
	opt.val = val;
	if (orig_on_set_func != null) orig_on_set_func(val);
}

def setFlag(str: string, onParse: string -> void) -> bool {
	if (onParse != null) onParse(str);
	return str == null || Strings.equal(str, "true");
}

class OptionGroupEntry(opt: Opt, var display_name: string, type_name: string, help: string) {}
