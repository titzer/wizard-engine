// Copyright 2025 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Wraps imported functions with tracing. Can apply a filter to be selective on which imports to trace.
class ImportTracer(var filter: DeclFilter) {
	def wrap(decl: Decl, ex: Exportable) -> Exportable {
		if (!Function.?(ex)) return ex;
		var func = Function.!(ex);
		var imp = decl.imp;
		if (!filter.matchesStr(imp.module_name, imp.field_name)) return ex;
		var name = Strings.format1("trace(%q)", func.render);
		func = HostFunction.new(name, func.sig, traceCall(imp, func, _));
		return func;
	}
	def traceCall(imp: ImportInfo, f: Function, args: Range<Value>) -> HostResult {
		var out = Trace.OUT;
		out.puts(imp.module_name);
		out.putc('.');
		out.puts(imp.field_name);
		Values.renderVals(out, args);
		out.ln();
		match (f) {
			wf: WasmFunction => {
				var result = Execute.call(wf, args);
				out.puts("  ==> ");
				result.render(out);
				out.ln();
				match (result) {
					Value(vals) => return HostResult.ValueN(vals);
					Throw(thrown) => return HostResult.Throw(thrown);
					Switch => {
						return HostResult.Value0;
						// TODO[ss]: handle this better
						// return HostResult.Throw(info.parent.trap(TrapReason.INVALID_SUSPEND));
					}
				}
			}
			hf: HostFunction => {
				if (Trace.interpreter) Execute.traceCallHostFunction(hf);
				var result = hf.invoke(args);
				out.puts("  ==> ");
				match (result) {
					Value0 => {
					}
					Value1(val) => {
						out.putv(val);
					}
					ValueN(vals) => {
						if (vals.length == 1) {
							out.putv(vals[0]);
						} else {
							Values.renderVals(out, vals);
						}
					}
					Throw(thrown) => thrown.render(out);
					TailCall(func, args) => out.puts("<tailcall>");
				}
				out.ln();
				return result;
			}
			_ => return HostResult.Throw(null); // TODO: should not happen
		}
	}
}

