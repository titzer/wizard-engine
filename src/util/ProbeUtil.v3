// Copyright 2023 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a timeout, returning a trap when a countdown expires.
class TimeoutProbe(var count: int) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		if (--count <= 0) return Resumption.Trap(TrapReason.TIMEOUT, true);
		return Resumption.Continue;
	}
}
// Increments a counter each time it is fired; intrinsified by SPC.
class CountProbe extends Probe {
	var count: u64 = 0;
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		count++;
		return Resumption.Continue;
	}
}
// Increments a {CountProbe} by a fixed {increment} each time it is fired; intrinsified by SPC.
class CountMoreProbe(c: CountProbe, increment: u64) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		c.count += increment;
		return Resumption.Continue;
	}
}
// Wraps a callback {f} to allow it to be called as a probe.
class ClosureProbe<P, R>(f: P -> R, param: P) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		f(param);
		return Resumption.Continue;
	}
}
// Adapts a callback function {f} into a {Probe} instance.
class CallbackProbe(f: DynamicLoc -> Resumption) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		return f(dynamicLoc);
	}
}
// Probes that use the top of the stack, optimized by SPC.
class OperandProbe extends Probe { }
class OperandProbe_i_v extends OperandProbe {
	def fire_i(i: u32) {}

	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		var accessor = dynamicLoc.frame.getFrameAccessor();
		var value = accessor.getOperand(0);
		fire_i(Values.unbox_u(value));
		return Resumption.Continue;
	}
}
// A utility class that wraps a {probe} so that it can be enabled or disabled, either temporarily
// or permanently.
class SamplingProbe(probe: Probe) extends Probe {
	var counter: i64 = -1;

	// Unconditionally enables this probe.
	def enable() {
		counter = i64.max;
	}
	// Unconditionally disables this probe.
	def disable() {
		counter = -1;
	}
	// Enables this probe for the next {n} fires, after which it reverts to disabled.
	def enableFor(n: u63) {
		counter = n;
	}
	// Disables this probe for the next {n} fires, after which it reverts to enabled.
	def disableFor(n: u63) {
		counter = i64.min + n;
	}
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		var next = counter - 1;
		var r = if(next >= 0, probe.fire(dynamicLoc), Resumption.Continue);
		counter = next;
		return r;
		// x86 asm (biased toward disabled):
		//   sub [s1.counter], 1
		//   ja fire_probe[s1]
		// this_pc:
		//   ...
		//   <end of func>
		// fire_probe[s1]:
		//   <spill regs>
		//   <call s1.probe.fire()>
		//   <restore regs>
		//   jmp this_pc

		// x86 asm (biased toward enabled):
		//   sub [s1.counter], 1
		//   jna this_pc
		//   <spill regs>
		//   <call s1.probe.fire()>
		//   <restore regs>
		// this_pc:
		//   ...
		//   <end of func>
	}
}
// A utility class that triggers an external debugger breakpoint when fired.
class ExternalDebuggerBreakpointProbe extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		return Resumption.Continue; // TODO: currently only has effect in SPC code
	}
}

// A probe that instruments memory read, intrinsified by SPC. 
class MemoryReadProbe extends Probe {
	var imm: MemArg;
	var size: u8;
	// fallback invocation when not intrinsified.
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		var accessor = dynamicLoc.frame.getFrameAccessor();
		var address: u64 = Values.unbox_u(accessor.getTopOfStack());
		address += imm.offset;
		var memory = dynamicLoc.func.instance.memories[imm.memory_index];
		var size = u32.view(size);
		var mem_ptr_trap = memory.range_ol_64(address, size);
		if (mem_ptr_trap.trapped())
			return Resumption.Trap(mem_ptr_trap.reason, true);
		var low: u64, high: u64;
		var mem_ptr = mem_ptr_trap.result;
		match (size) {
			1 => {
				low = DataReaders.read_range_u8(mem_ptr);
			}
			2 => {
				low = DataReaders.read_range_u16(mem_ptr);
			}
			4 => {
				low = DataReaders.read_range_u32(mem_ptr);
			}
			8 => {
				low = DataReaders.read_range_u64(mem_ptr);
			}
			16 => {
				var data_result = DataReaders.read_range_u128(mem_ptr);
				low = data_result.0;
				high = data_result.1;
			}
			_ => ;
		}
		fire_probe(address, low, high);
		return Resumption.Continue;
	}
	def fire_probe(addr: u64, val_lower: u64, val_upper: u64) {}
}
