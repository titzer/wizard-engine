// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility to make generating Wasm bytecode easier.
class WasmAsm extends Vector<byte> {
	def put_u32leb(v: int) -> this {
		var data = u32.view(v);
		while (data >= 0x80) {
			put(byte.view(0x80u | (data & 0x7F)));
			data = data >> 7;
		}
		put(byte.view(data));
	}
	def put_s32leb(data: int) -> this {
		while (data != i7.view(data)) {
			put(byte.view(0x80 | (data & 0x7F)));
			data = data >> 7;
		}
		put(byte.view(data & 0x7F));
	}
	def locals(count: int, vt: ValueType) -> this {
		put_u32leb(count);
		put_blockType(vt);
	}
	def local_get(index: int) -> this {
		put_u32leb(Opcode.LOCAL_GET.code).put_u32leb(index);
	}
	def local_tee(index: int) -> this {
		put_u32leb(Opcode.LOCAL_TEE.code).put_u32leb(index);
	}
	def global_get(index: int) -> this {
		put_u32leb(Opcode.GLOBAL_GET.code).put_u32leb(index);
	}
	def global_set(index: int) -> this {
		put_u32leb(Opcode.GLOBAL_SET.code).put_u32leb(index);
	}
	def local_set(index: int) -> this {
		put_u32leb(Opcode.LOCAL_SET.code).put_u32leb(index);
	}
	def i32const(v: int) -> this {
		put_u32leb(Opcode.I32_CONST.code).put_u32leb(v);
	}
	def struct_get(decl: StructDecl, field: int) -> this {
		put(Opcode.STRUCT_GET.prefix).put_u32leb(Opcode.STRUCT_GET.code).put_u32leb(decl.heaptype_index).put_u32leb(field);
	}
	def struct_get_s(decl: StructDecl, field: int) -> this {
		put(Opcode.STRUCT_GET_S.prefix).put_u32leb(Opcode.STRUCT_GET_S.code).put_u32leb(decl.heaptype_index).put_u32leb(field);
	}
	def struct_get_u(decl: StructDecl, field: int) -> this {
		put(Opcode.STRUCT_GET_U.prefix).put_u32leb(Opcode.STRUCT_GET_U.code).put_u32leb(decl.heaptype_index).put_u32leb(field);
	}
	def struct_set(decl: StructDecl, field: int) -> this {
		put(Opcode.STRUCT_SET.prefix).put_u32leb(Opcode.STRUCT_SET.code).put_u32leb(decl.heaptype_index).put_u32leb(field);
	}
	def struct_new_canon_default(decl: StructDecl) -> this {
		put(Opcode.STRUCT_NEW_DEFAULT.prefix)
			.put_u32leb(Opcode.STRUCT_NEW_DEFAULT.code).put_u32leb(decl.heaptype_index);
	}
	def struct_new_canon(decl: StructDecl) -> this {
		put(Opcode.STRUCT_NEW.prefix)
			.put_u32leb(Opcode.STRUCT_NEW.code).put_u32leb(decl.heaptype_index);
	}
	def array_get(decl: ArrayDecl) -> this {
		put(Opcode.ARRAY_GET.prefix).put_u32leb(Opcode.ARRAY_GET.code).put_u32leb(decl.heaptype_index);
	}
	def array_get_s(decl: ArrayDecl) -> this {
		put(Opcode.ARRAY_GET_S.prefix).put_u32leb(Opcode.ARRAY_GET_S.code).put_u32leb(decl.heaptype_index);
	}
	def array_get_u(decl: ArrayDecl) -> this {
		put(Opcode.ARRAY_GET_U.prefix).put_u32leb(Opcode.ARRAY_GET_U.code).put_u32leb(decl.heaptype_index);
	}
	def array_set(decl: ArrayDecl) -> this {
		put(Opcode.ARRAY_SET.prefix).put_u32leb(Opcode.ARRAY_SET.code).put_u32leb(decl.heaptype_index);
	}
	def array_new(decl: ArrayDecl) -> this {
		put(Opcode.ARRAY_NEW.prefix).put_u32leb(Opcode.ARRAY_NEW.code).put_u32leb(decl.heaptype_index);
	}
	def array_new_canon_default(decl: ArrayDecl) -> this {
		put(Opcode.ARRAY_NEW_DEFAULT.prefix)
			.put_u32leb(Opcode.ARRAY_NEW_DEFAULT.code).put_u32leb(decl.heaptype_index);
	}
	def array_len(decl: ArrayDecl) -> this {
		put(Opcode.ARRAY_LEN.prefix).put_u32leb(Opcode.ARRAY_LEN.code).put_u32leb(decl.heaptype_index);
	}
	def ref_eq() -> this {
		put_u32leb(Opcode.REF_EQ.code);
	}
	def ref_is_null() -> this {
		put_u32leb(Opcode.REF_IS_NULL.code);
	}
	def ref_cast(ft: int, tt: int) -> this {
		put(Opcode.REF_CAST.prefix).put_u32leb(Opcode.REF_CAST.code);
		put_u32leb(tt);
	}
	def ref_test(ft: int, tt: int) -> this {
		put(Opcode.REF_TEST.prefix).put_u32leb(Opcode.REF_TEST.code);
		put_u32leb(tt);
	}
	def ref_null(i: int) -> this {
		put_u32leb(Opcode.REF_NULL.code).put_u32leb(i);
	}
	def ref_as_non_null() -> this {
		put_u32leb(Opcode.REF_AS_NON_NULL.code);
	}
	def call_ref() -> this {
		put_u32leb(Opcode.CALL_REF.code);
	}
	def return_call_ref() -> this {
		put_u32leb(Opcode.RETURN_CALL_REF.code);
	}
	def loop0() -> this {
		put_u32leb(Opcode.LOOP.code);
		put(BpTypeCode.EmptyBlock.code);
	}
	def block0() -> this {
		put_u32leb(Opcode.BLOCK.code);
		put(BpTypeCode.EmptyBlock.code);
	}
	def blocks(sig: SigDecl) -> this {
		put_u32leb(Opcode.BLOCK.code);
		put_u32leb(sig.heaptype_index);
	}
	def loops(sig: SigDecl) -> this {
		put_u32leb(Opcode.LOOP.code);
		put_u32leb(sig.heaptype_index);
	}
	def if_(t: ValueType) -> this {
		put_u32leb(Opcode.IF.code);
		put_blockType(t);
	}
	def if0() -> this {
		put_u32leb(Opcode.IF.code);
		put(BpTypeCode.EmptyBlock.code);
	}
	def else_() -> this {
		put_u32leb(Opcode.ELSE.code);
	}
	def drop() -> this {
		put_u32leb(Opcode.DROP.code);
	}
	def br_if(depth: int) -> this {
		put_u32leb(Opcode.BR_IF.code);
		put_u32leb(depth);
	}
	def br(depth: int) -> this {
		put_u32leb(Opcode.BR.code);
		put_u32leb(depth);
	}
	def br_on_cast(depth: int, t1: int, t2: int) -> this {
		put(Opcode.BR_ON_CAST.prefix).put_u32leb(Opcode.BR_ON_CAST.code);
		put_u32leb(depth);
		put_u32leb(t2);
	}
	def br_on_null(depth: int) -> this {
		put_u32leb(Opcode.BR_ON_NULL.code);
		put_u32leb(depth);
	}
	def end() -> this {
		put_u32leb(Opcode.END.code);
	}
	def op(opcode: Opcode) -> this {
		put_u32leb(opcode.code);
	}
	def unreachable() -> this {
		put_u32leb(Opcode.UNREACHABLE.code);
	}
	def ret() -> this {
		put_u32leb(Opcode.RETURN.code);
	}
	def put_blockType(t: ValueType) -> this {
		// TODO: factor out code into src/util/WasmWriter
		match (t) {
			I32 => put_u32leb(BpTypeCode.I32.code);
			I64 => put_u32leb(BpTypeCode.I64.code);
			F32 => put_u32leb(BpTypeCode.F32.code);
			F64 => put_u32leb(BpTypeCode.F64.code);
			V128 => put_u32leb(BpTypeCode.V128.code);
			_ => ; // TODO
		}
	}
}
