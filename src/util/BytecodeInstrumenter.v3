// Copyright 2024 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// This class implements a utility to simplify the process of iterating over a module's
// functions and inserting instrumentation. Clients can subclass this and override
// {visit?()} methods.
class BytecodeInstrumenter(module: Module) extends BytecodeVisitor {
	def bi = BytecodeIterator.new();
	var filter: DeclFilter; 	// client can set to filter functions instrumented

	// Runs instrumentation on all functions in this module that match any {filter} that's been installed.
	def run() {
		for (i < module.functions.length) {
			var func = module.functions[i];
			if (func.imp != null) continue; // no bytecode in imported functions
			if (filter != null && !filter.matches(module, func)) continue; // filtered out
			onFunc(func);
			bi.iterate(func, this);
		}
	}
	// Runs instrumentation on all functions in this module that match {matcher}.
	def runMatching(matcher: (Module, FuncDecl) -> bool) {
		for (i < module.functions.length) {
			var func = module.functions[i];
			if (func.imp != null) continue; // no bytecode in imported functions
			if (!matcher(module, func)) continue; // filtered out
			onFunc(func);
			bi.iterate(func, this);
		}
	}
	// Runs instrumentation on the given function {func}, if it is not imported.
	def runOne(func: FuncDecl) {
		if (func.imp == null) {
			onFunc(func);
			bi.iterate(func, this);
		}
	}
	// Called upon beginning instrumentation of each function.
	def onFunc(func: FuncDecl) {
	}
	// Utility that can be used by subclasses to insert a probe on the current bytecode while iterating.
	def insertProbeHere(probe: Probe) {
		Instrumentation.insertLocalProbe(module, bi.func.func_index, bi.pc, probe);
	}
}
