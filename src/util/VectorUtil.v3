// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility methods for vector.
component VectorUtil {
  // Assumes that the vector is sorted.
  def binarySearch<T>(vec: Vector<T>, val: T, lt: (T, T) -> bool) -> int {
    var l = 0, r = vec.length;
    while (l < r) {
      var mid = (l + r) >> 1;
      var mid_val = vec[mid];
      if (lt(val, mid_val)) r = mid - 1;
      else if (lt(mid_val, val)) l = mid + 1;
      else return mid;
    }
    return -1;
  }

  // Returns the *first* element that is *greater* than `val.
  def upperbound<T>(vec: Vector<T>, val: T, lt: (T, T) -> bool) -> int {
    var start = 0;
    var count = vec.length;
    while (count > 0) {
      var step = count >> 1;
      var mid = start + step;
      if (!lt(val, vec[mid])) { start = mid + 1; count -= step + 1; }
      else count = step;
    }
    return start;
  }
}
