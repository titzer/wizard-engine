// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility that serves as a base class for defining behavior on bytecodes, defining one
// method per opcode as well as categories. The default implementation of each method calls
// the appropriate category method, allowing many instructions to be handled by overriding
// one or more methods.
class BytecodeVisitor {
	// Called on the first bytecode (pc == 0).
	def visitEntry()				{ }

	// This method is called upon each group of local declarations.
	// Override it to visit all local declarations.
	def visitLocalDecl(count: u32, vtc: ValueTypeCode)	{ }

	// Opcodes are organized into categories by the default visit_OP() methods.
	// Override these methods to handle a whole category of bytecodes at once.
	def visitOp(op: Opcode) 			{ }
	def visitConst(op: Opcode)			{ visitOp(op); }
	def visitMisc(op: Opcode) 			{ visitOp(op); }
	def visitControl(op: Opcode) 			{ visitOp(op); }
	def visitCall(op: Opcode)			{ visitOp(op); }
	def visitCallDirect(op: Opcode, func_index: u31, tailCall: bool)	{ visitCall(op); }
	def visitCallIndirect(op: Opcode, sig_index: u31, table_index: u31, tailCall: bool)	{ visitCall(op); }
	def visitCallRef(op: Opcode, sig_index: u31, tailCall: bool)		{ visitCall(op); }
	def visitLocal(op: Opcode, local_index: u31)	{ visitOp(op); }
	def visitGlobal(op: Opcode, local_index: u31)	{ visitOp(op); }
	def visitTable(op: Opcode, table_index: u31)	{ visitOp(op); }
	def visitMem(op: Opcode, memory_index: u31)	{ visitOp(op); }
	def visitLoad(op: Opcode, imm: MemArg, size: u8)	{ visitMem(op, imm.memory_index); }
	def visitStore(op: Opcode, imm: MemArg, size: u8)	{ visitMem(op, imm.memory_index); }
	def visitUnop(op: Opcode)			{ visitOp(op); }
	def visitBinop(op: Opcode)			{ visitOp(op); }
	def visitCompare(op: Opcode)			{ visitBinop(op); }
	def visitConvert(op: Opcode)			{ visitUnop(op); }
	def visitSimd(op: Opcode)			{ visitOp(op); }
	def visitRef(op: Opcode)			{ visitOp(op); }
	def visitGc(op: Opcode)				{ visitOp(op); }
	def visitAtomic(op: Opcode, imm: MemArg)	{ visitOp(op); }

	// Called on invalid instructions, including user error by iterating off the end.
	def visit_INVALID(prefix: byte, code: u32)	{ }
	
	// Called on the {crash} internal instruction.
	def visit_CRASH_EXEC()				{ }
	def visit_CRASH_COMPILER()			{ }

	// If probes exist in the code, this method will be called before the visit method for the instruction.
	// Override this method to handle a probe inserted before an instruction.
	def visitProbe()				{ }
	
	// Visit methods for each opcode.
	// Override these methods to handle a single instruction.
	// XXX: generate visit_OP() methods automatically from the Opcodes definition.
	def visit_UNREACHABLE	() 						{ visitMisc(Opcode.UNREACHABLE); }
	def visit_NOP		() 						{ visitMisc(Opcode.NOP); }
	def visit_BLOCK		(btc: BlockTypeCode) 				{ visitControl(Opcode.BLOCK); }
	def visit_LOOP		(btc: BlockTypeCode)			 	{ visitControl(Opcode.LOOP); }
	def visit_IF		(btc: BlockTypeCode) 				{ visitControl(Opcode.IF); }
	def visit_ELSE		() 						{ visitControl(Opcode.ELSE); }
	def visit_TRY		(btc: BlockTypeCode) 				{ visitControl(Opcode.TRY); }
	def visit_CATCH		(tag_code: u31) 				{ visitControl(Opcode.CATCH); }
	def visit_THROW		(tag_code: u31) 				{ visitControl(Opcode.THROW); }
	def visit_RETHROW	(depth: u31) 					{ visitControl(Opcode.RETHROW); }
	def visit_THROW_REF	() 						{ visitControl(Opcode.THROW_REF); }
	def visit_END		() 						{ visitControl(Opcode.END); }
	def visit_BR		(depth: u31) 					{ visitControl(Opcode.BR); }
	def visit_BR_IF		(depth: u31) 					{ visitControl(Opcode.BR_IF); }
	def visit_BR_TABLE	(labels: Range<u31>)			 	{ visitControl(Opcode.BR_TABLE); }
	def visit_RETURN	() 						{ visitControl(Opcode.RETURN); }
	def visit_CALL		(func_index: u31) 				{ visitCallDirect(Opcode.CALL, func_index, false); }
	def visit_CALL_INDIRECT	(sig_index: u31, table_index: u31) 		{ visitCallIndirect(Opcode.CALL_INDIRECT, sig_index, table_index, false); }
	def visit_RETURN_CALL	(func_index: u31) 				{ visitCallDirect(Opcode.RETURN_CALL, func_index, true); }
	def visit_RETURN_CALL_INDIRECT(sig_index: u31, table_index: u31)	{ visitCallIndirect(Opcode.RETURN_CALL_INDIRECT, sig_index, table_index, true); }
	def visit_CALL_REF	(sig_index: u31) 				{ visitCallRef(Opcode.CALL_REF, sig_index, false); }
	def visit_RETURN_CALL_REF(sig_index: u31) 				{ visitCallRef(Opcode.RETURN_CALL_REF, sig_index, true); }
	def visit_DELEGATE	(depth: u31) 					{ visitControl(Opcode.DELEGATE); }
	def visit_CATCH_ALL	() 						{ visitControl(Opcode.CATCH_ALL); }
	def visit_DROP		() 						{ visitMisc(Opcode.DROP); }
	def visit_SELECT	() 						{ visitMisc(Opcode.SELECT); }
	def visit_SELECT_T	(val_types: Range<ValueTypeCode>) 		{ visitMisc(Opcode.SELECT_T); }
	def visit_TRY_TABLE	(btc: BlockTypeCode, catches: Range<BpCatchCode>) { visitControl(Opcode.TRY_TABLE); }
	// Locals.
	def visit_LOCAL_GET(local_index: u31) { visitLocal(Opcode.LOCAL_GET, local_index); }
	def visit_LOCAL_SET(local_index: u31) { visitLocal(Opcode.LOCAL_SET, local_index); }
	def visit_LOCAL_TEE(local_index: u31) { visitLocal(Opcode.LOCAL_TEE, local_index); }
	// Globals.
	def visit_GLOBAL_GET		(global_index: u31) { visitGlobal(Opcode.GLOBAL_GET, global_index); }
	def visit_GLOBAL_SET		(global_index: u31) { visitGlobal(Opcode.GLOBAL_SET, global_index); }
	// Table elems.
	def visit_TABLE_GET		(table_index: u31) { visitTable(Opcode.TABLE_GET, table_index); }
	def visit_TABLE_SET		(table_index: u31) { visitTable(Opcode.TABLE_SET, table_index); }
	// Loads and stores.
	def visit_I32_LOAD		(imm: MemArg) { visitLoad(Opcode.I32_LOAD, imm, 4); }
	def visit_I64_LOAD		(imm: MemArg) { visitLoad(Opcode.I64_LOAD, imm, 8); }
	def visit_F32_LOAD		(imm: MemArg) { visitLoad(Opcode.F32_LOAD, imm, 4); }
	def visit_F64_LOAD		(imm: MemArg) { visitLoad(Opcode.F64_LOAD, imm, 8); }
	def visit_I32_LOAD8_S		(imm: MemArg) { visitLoad(Opcode.I32_LOAD8_S, imm, 1); }
	def visit_I32_LOAD8_U		(imm: MemArg) { visitLoad(Opcode.I32_LOAD8_U, imm, 1); }
	def visit_I32_LOAD16_S		(imm: MemArg) { visitLoad(Opcode.I32_LOAD16_S, imm, 2); }
	def visit_I32_LOAD16_U		(imm: MemArg) { visitLoad(Opcode.I32_LOAD16_U, imm, 2); }
	def visit_I64_LOAD8_S		(imm: MemArg) { visitLoad(Opcode.I64_LOAD8_S, imm, 1); }
	def visit_I64_LOAD8_U		(imm: MemArg) { visitLoad(Opcode.I64_LOAD8_U, imm, 1); }
	def visit_I64_LOAD16_S		(imm: MemArg) { visitLoad(Opcode.I64_LOAD16_S, imm, 2); }
	def visit_I64_LOAD16_U		(imm: MemArg) { visitLoad(Opcode.I64_LOAD16_U, imm, 2); }
	def visit_I64_LOAD32_S		(imm: MemArg) { visitLoad(Opcode.I64_LOAD32_S, imm, 4); }
	def visit_I64_LOAD32_U		(imm: MemArg) { visitLoad(Opcode.I64_LOAD32_U, imm, 4); }
	def visit_I32_STORE		(imm: MemArg) { visitStore(Opcode.I32_STORE, imm, 4); }
	def visit_I64_STORE		(imm: MemArg) { visitStore(Opcode.I64_STORE, imm, 8); }
	def visit_F32_STORE		(imm: MemArg) { visitStore(Opcode.F32_STORE, imm, 4); }
	def visit_F64_STORE		(imm: MemArg) { visitStore(Opcode.F64_STORE, imm, 8); }
	def visit_I32_STORE8		(imm: MemArg) { visitStore(Opcode.I32_STORE8, imm, 1); }
	def visit_I32_STORE16		(imm: MemArg) { visitStore(Opcode.I32_STORE16, imm, 2); }
	def visit_I64_STORE8		(imm: MemArg) { visitStore(Opcode.I64_STORE8, imm, 1); }
	def visit_I64_STORE16		(imm: MemArg) { visitStore(Opcode.I64_STORE16, imm, 2); }
	def visit_I64_STORE32		(imm: MemArg) { visitStore(Opcode.I64_STORE32, imm, 4); }
	// Misc memory.
	def visit_MEMORY_SIZE		(memory_index: u31) { visitMem(Opcode.MEMORY_SIZE, memory_index); }
	def visit_MEMORY_GROW		(memory_index: u31) { visitMem(Opcode.MEMORY_GROW, memory_index); }
	// Constants.
	def visit_I32_CONST		(val: i32) { visitConst(Opcode.I32_CONST); }
	def visit_I64_CONST		(val: i64) { visitConst(Opcode.I64_CONST); }
	def visit_F32_CONST		(bits: u32) { visitConst(Opcode.F32_CONST); }
	def visit_F64_CONST		(bits: u64) { visitConst(Opcode.F64_CONST); }
	// Comparisons.
	def visit_I32_EQZ		() { visitCompare(Opcode.I32_EQZ); }
	def visit_I32_EQ		() { visitCompare(Opcode.I32_EQ); }
	def visit_I32_NE		() { visitCompare(Opcode.I32_NE); }
	def visit_I32_LT_S		() { visitCompare(Opcode.I32_LT_S); }
	def visit_I32_LT_U		() { visitCompare(Opcode.I32_LT_U); }
	def visit_I32_GT_S		() { visitCompare(Opcode.I32_GT_S); }
	def visit_I32_GT_U		() { visitCompare(Opcode.I32_GT_U); }
	def visit_I32_LE_S		() { visitCompare(Opcode.I32_LE_S); }
	def visit_I32_LE_U		() { visitCompare(Opcode.I32_LE_U); }
	def visit_I32_GE_S		() { visitCompare(Opcode.I32_GE_S); }
	def visit_I32_GE_U		() { visitCompare(Opcode.I32_GE_U); }
	def visit_I64_EQZ		() { visitCompare(Opcode.I64_EQZ); }
	def visit_I64_EQ		() { visitCompare(Opcode.I64_EQ); }
	def visit_I64_NE		() { visitCompare(Opcode.I64_NE); }
	def visit_I64_LT_S		() { visitCompare(Opcode.I64_LT_S); }
	def visit_I64_LT_U		() { visitCompare(Opcode.I64_LT_U); }
	def visit_I64_GT_S		() { visitCompare(Opcode.I64_GT_S); }
	def visit_I64_GT_U		() { visitCompare(Opcode.I64_GT_U); }
	def visit_I64_LE_S		() { visitCompare(Opcode.I64_LE_S); }
	def visit_I64_LE_U		() { visitCompare(Opcode.I64_LE_U); }
	def visit_I64_GE_S		() { visitCompare(Opcode.I64_GE_S); }
	def visit_I64_GE_U		() { visitCompare(Opcode.I64_GE_U); }
	def visit_F32_EQ		() { visitCompare(Opcode.F32_EQ); }
	def visit_F32_NE		() { visitCompare(Opcode.F32_NE); }
	def visit_F32_LT		() { visitCompare(Opcode.F32_LT); }
	def visit_F32_GT		() { visitCompare(Opcode.F32_GT); }
	def visit_F32_LE		() { visitCompare(Opcode.F32_LE); }
	def visit_F32_GE		() { visitCompare(Opcode.F32_GE); }
	def visit_F64_EQ		() { visitCompare(Opcode.F64_EQ); }
	def visit_F64_NE		() { visitCompare(Opcode.F64_NE); }
	def visit_F64_LT		() { visitCompare(Opcode.F64_LT); }
	def visit_F64_GT		() { visitCompare(Opcode.F64_GT); }
	def visit_F64_LE		() { visitCompare(Opcode.F64_LE); }
	def visit_F64_GE		() { visitCompare(Opcode.F64_GE); }
	// I32 arithmetic.
	def visit_I32_CLZ		() { visitUnop(Opcode.I32_CLZ); }
	def visit_I32_CTZ		() { visitUnop(Opcode.I32_CTZ); }
	def visit_I32_POPCNT		() { visitUnop(Opcode.I32_POPCNT); }
	def visit_I32_ADD		() { visitBinop(Opcode.I32_ADD); }
	def visit_I32_SUB		() { visitBinop(Opcode.I32_SUB); }
	def visit_I32_MUL		() { visitBinop(Opcode.I32_MUL); }
	def visit_I32_DIV_S		() { visitBinop(Opcode.I32_DIV_S); }
	def visit_I32_DIV_U		() { visitBinop(Opcode.I32_DIV_U); }
	def visit_I32_REM_S		() { visitBinop(Opcode.I32_REM_S); }
	def visit_I32_REM_U		() { visitBinop(Opcode.I32_REM_U); }
	def visit_I32_AND		() { visitBinop(Opcode.I32_AND); }
	def visit_I32_OR		() { visitBinop(Opcode.I32_OR); }
	def visit_I32_XOR		() { visitBinop(Opcode.I32_XOR); }
	def visit_I32_SHL		() { visitBinop(Opcode.I32_SHL); }
	def visit_I32_SHR_S		() { visitBinop(Opcode.I32_SHR_S); }
	def visit_I32_SHR_U		() { visitBinop(Opcode.I32_SHR_U); }
	def visit_I32_ROTL		() { visitBinop(Opcode.I32_ROTL); }
	def visit_I32_ROTR		() { visitBinop(Opcode.I32_ROTR); }
	// I64 arithmetic.
	def visit_I64_CLZ		() { visitUnop(Opcode.I64_CLZ); }
	def visit_I64_CTZ		() { visitUnop(Opcode.I64_CTZ); }
	def visit_I64_POPCNT		() { visitUnop(Opcode.I64_POPCNT); }
	def visit_I64_ADD		() { visitBinop(Opcode.I64_ADD); }
	def visit_I64_SUB		() { visitBinop(Opcode.I64_SUB); }
	def visit_I64_MUL		() { visitBinop(Opcode.I64_MUL); }
	def visit_I64_DIV_S		() { visitBinop(Opcode.I64_DIV_S); }
	def visit_I64_DIV_U		() { visitBinop(Opcode.I64_DIV_U); }
	def visit_I64_REM_S		() { visitBinop(Opcode.I64_REM_S); }
	def visit_I64_REM_U		() { visitBinop(Opcode.I64_REM_U); }
	def visit_I64_AND		() { visitBinop(Opcode.I64_AND); }
	def visit_I64_OR		() { visitBinop(Opcode.I64_OR); }
	def visit_I64_XOR		() { visitBinop(Opcode.I64_XOR); }
	def visit_I64_SHL		() { visitBinop(Opcode.I64_SHL); }
	def visit_I64_SHR_S		() { visitBinop(Opcode.I64_SHR_S); }
	def visit_I64_SHR_U		() { visitBinop(Opcode.I64_SHR_U); }
	def visit_I64_ROTL		() { visitBinop(Opcode.I64_ROTL); }
	def visit_I64_ROTR		() { visitBinop(Opcode.I64_ROTR); }
	// F32 arithmetic.
	def visit_F32_ABS		() { visitUnop(Opcode.F32_ABS); }
	def visit_F32_NEG		() { visitUnop(Opcode.F32_NEG); }
	def visit_F32_CEIL		() { visitUnop(Opcode.F32_CEIL); }
	def visit_F32_FLOOR		() { visitUnop(Opcode.F32_FLOOR); }
	def visit_F32_TRUNC		() { visitUnop(Opcode.F32_TRUNC); }
	def visit_F32_NEAREST		() { visitUnop(Opcode.F32_NEAREST); }
	def visit_F32_SQRT		() { visitUnop(Opcode.F32_SQRT); }
	def visit_F32_ADD		() { visitBinop(Opcode.F32_ADD); }
	def visit_F32_SUB		() { visitBinop(Opcode.F32_SUB); }
	def visit_F32_MUL		() { visitBinop(Opcode.F32_MUL); }
	def visit_F32_DIV		() { visitBinop(Opcode.F32_DIV); }
	def visit_F32_MIN		() { visitBinop(Opcode.F32_MIN); }
	def visit_F32_MAX		() { visitBinop(Opcode.F32_MAX); }
	def visit_F32_COPYSIGN		() { visitBinop(Opcode.F32_COPYSIGN); }
	// F64 arithmetic.
	def visit_F64_ABS		() { visitUnop(Opcode.F64_ABS); }
	def visit_F64_NEG		() { visitUnop(Opcode.F64_NEG); }
	def visit_F64_CEIL		() { visitUnop(Opcode.F64_CEIL); }
	def visit_F64_FLOOR		() { visitUnop(Opcode.F64_FLOOR); }
	def visit_F64_TRUNC		() { visitUnop(Opcode.F64_TRUNC); }
	def visit_F64_NEAREST		() { visitUnop(Opcode.F64_NEAREST); }
	def visit_F64_SQRT		() { visitUnop(Opcode.F64_SQRT); }
	def visit_F64_ADD		() { visitBinop(Opcode.F64_ADD); }
	def visit_F64_SUB		() { visitBinop(Opcode.F64_SUB); }
	def visit_F64_MUL		() { visitBinop(Opcode.F64_MUL); }
	def visit_F64_DIV		() { visitBinop(Opcode.F64_DIV); }
	def visit_F64_MIN		() { visitBinop(Opcode.F64_MIN); }
	def visit_F64_MAX		() { visitBinop(Opcode.F64_MAX); }
	def visit_F64_COPYSIGN		() { visitBinop(Opcode.F64_COPYSIGN); }
	// Conversions and casts.
	def visit_I32_WRAP_I64		() { visitConvert(Opcode.I32_WRAP_I64); }
	def visit_I32_TRUNC_F32_S	() { visitConvert(Opcode.I32_TRUNC_F32_S); }
	def visit_I32_TRUNC_F32_U	() { visitConvert(Opcode.I32_TRUNC_F32_U); }
	def visit_I32_TRUNC_F64_S	() { visitConvert(Opcode.I32_TRUNC_F64_S); }
	def visit_I32_TRUNC_F64_U	() { visitConvert(Opcode.I32_TRUNC_F64_U); }
	def visit_I64_EXTEND_I32_S	() { visitConvert(Opcode.I64_EXTEND_I32_S); }
	def visit_I64_EXTEND_I32_U	() { visitConvert(Opcode.I64_EXTEND_I32_U); }
	def visit_I64_TRUNC_F32_S	() { visitConvert(Opcode.I64_TRUNC_F32_S); }
	def visit_I64_TRUNC_F32_U	() { visitConvert(Opcode.I64_TRUNC_F32_U); }
	def visit_I64_TRUNC_F64_S	() { visitConvert(Opcode.I64_TRUNC_F64_S); }
	def visit_I64_TRUNC_F64_U	() { visitConvert(Opcode.I64_TRUNC_F64_U); }
	def visit_F32_CONVERT_I32_S	() { visitConvert(Opcode.F32_CONVERT_I32_S); }
	def visit_F32_CONVERT_I32_U	() { visitConvert(Opcode.F32_CONVERT_I32_U); }
	def visit_F32_CONVERT_I64_S	() { visitConvert(Opcode.F32_CONVERT_I64_S); }
	def visit_F32_CONVERT_I64_U	() { visitConvert(Opcode.F32_CONVERT_I64_U); }
	def visit_F32_DEMOTE_F64	() { visitConvert(Opcode.F32_DEMOTE_F64); }
	def visit_F64_CONVERT_I32_S	() { visitConvert(Opcode.F64_CONVERT_I32_S); }
	def visit_F64_CONVERT_I32_U	() { visitConvert(Opcode.F64_CONVERT_I32_U); }
	def visit_F64_CONVERT_I64_S	() { visitConvert(Opcode.F64_CONVERT_I64_S); }
	def visit_F64_CONVERT_I64_U	() { visitConvert(Opcode.F64_CONVERT_I64_U); }
	def visit_F64_PROMOTE_F32	() { visitConvert(Opcode.F64_PROMOTE_F32); }
	def visit_I32_REINTERPRET_F32	() { visitConvert(Opcode.I32_REINTERPRET_F32); }
	def visit_I64_REINTERPRET_F64	() { visitConvert(Opcode.I64_REINTERPRET_F64); }
	def visit_F32_REINTERPRET_I32	() { visitConvert(Opcode.F32_REINTERPRET_I32); }
	def visit_F64_REINTERPRET_I64	() { visitConvert(Opcode.F64_REINTERPRET_I64); }
	// Sign extensions.
	def visit_I32_EXTEND8_S		() { visitUnop(Opcode.I32_EXTEND8_S); }
	def visit_I32_EXTEND16_S	() { visitUnop(Opcode.I32_EXTEND16_S); }
	def visit_I64_EXTEND8_S		() { visitUnop(Opcode.I64_EXTEND8_S); }
	def visit_I64_EXTEND16_S	() { visitUnop(Opcode.I64_EXTEND16_S); }
	def visit_I64_EXTEND32_S	() { visitUnop(Opcode.I64_EXTEND32_S); }
	// Reference instructions.
	def visit_REF_NULL		(ht_val: int)		{ visitRef(Opcode.REF_NULL); }
	def visit_REF_IS_NULL		()			{ visitRef(Opcode.REF_IS_NULL); }
	def visit_REF_FUNC		(func_index: u31)	{ visitRef(Opcode.REF_FUNC); }
	def visit_REF_AS_NON_NULL	() 			{ visitRef(Opcode.REF_AS_NON_NULL); }
	def visit_BR_ON_NULL		(label: u31) 		{ visitControl(Opcode.BR_ON_NULL); }
	def visit_REF_EQ		() 			{ visitRef(Opcode.REF_EQ); }
	def visit_BR_ON_NON_NULL	(label: u31) 		{ visitControl(Opcode.BR_ON_NON_NULL); }
	// FB prefix: gc proposal opcodes.
	def visit_STRUCT_NEW		(ht_index: u31) 			{ visitGc(Opcode.STRUCT_NEW); }
	def visit_STRUCT_NEW_DEFAULT	(ht_index: u31) 			{ visitGc(Opcode.STRUCT_NEW_DEFAULT); }
	def visit_STRUCT_GET		(ht_index: u31, field_index: u31) 	{ visitGc(Opcode.STRUCT_GET); }
	def visit_STRUCT_GET_S		(ht_index: u31, field_index: u31) 	{ visitGc(Opcode.STRUCT_GET_S); }
	def visit_STRUCT_GET_U		(ht_index: u31, field_index: u31) 	{ visitGc(Opcode.STRUCT_GET_U); }
	def visit_STRUCT_SET		(ht_index: u31, field_index: u31) 	{ visitGc(Opcode.STRUCT_SET); }
	def visit_ARRAY_NEW		(ht_index: u31) 			{ visitGc(Opcode.ARRAY_NEW); }
	def visit_ARRAY_NEW_DEFAULT	(ht_index: u31) 			{ visitGc(Opcode.ARRAY_NEW_DEFAULT); }
	def visit_ARRAY_NEW_FIXED	(ht_index: u31, length: u31)		{ visitGc(Opcode.ARRAY_NEW_FIXED); }
	def visit_ARRAY_NEW_DATA	(ht_index: u31, data_index: u31)	{ visitGc(Opcode.ARRAY_NEW_DATA); }
	def visit_ARRAY_NEW_ELEM	(ht_index: u31, elem_index: u31)	{ visitGc(Opcode.ARRAY_NEW_ELEM); }
	def visit_ARRAY_GET		(ht_index: u31) 			{ visitGc(Opcode.ARRAY_GET); }
	def visit_ARRAY_GET_S		(ht_index: u31) 			{ visitGc(Opcode.ARRAY_GET_S); }
	def visit_ARRAY_GET_U		(ht_index: u31) 			{ visitGc(Opcode.ARRAY_GET_U); }
	def visit_ARRAY_SET		(ht_index: u31) 			{ visitGc(Opcode.ARRAY_SET); }
	def visit_ARRAY_LEN		() 					{ visitGc(Opcode.ARRAY_LEN); }
	def visit_ARRAY_FILL		(ht_index: u31)				{ visitGc(Opcode.ARRAY_FILL); }
	def visit_ARRAY_COPY		(ht_index1: u31, ht_index2: u31)	{ visitGc(Opcode.ARRAY_COPY); }
	def visit_ARRAY_INIT_DATA	(ht_index: u31, data_index: u31)	{ visitGc(Opcode.ARRAY_INIT_DATA); }
	def visit_ARRAY_INIT_ELEM	(ht_index: u31, elem_index: u31)	{ visitGc(Opcode.ARRAY_INIT_ELEM); }
	def visit_REF_TEST		(ht_val: int)				{ visitGc(Opcode.REF_TEST); }
	def visit_REF_TEST_NULL		(ht_val: int)				{ visitGc(Opcode.REF_TEST_NULL); }
	def visit_REF_CAST		(ht_val: int)				{ visitGc(Opcode.REF_CAST); }
	def visit_REF_CAST_NULL		(ht_val: int)				{ visitGc(Opcode.REF_CAST_NULL); }
	def visit_BR_ON_CAST		(imm: BrOnCastImm)			{ visitControl(Opcode.BR_ON_CAST); }
	def visit_BR_ON_CAST_FAIL	(imm: BrOnCastImm)			{ visitControl(Opcode.BR_ON_CAST_FAIL); }
	def visit_ANY_CONVERT_EXTERN	() 					{ visitGc(Opcode.ANY_CONVERT_EXTERN); }
	def visit_EXTERN_CONVERT_ANY	() 					{ visitGc(Opcode.EXTERN_CONVERT_ANY); }
	def visit_REF_I31		()					{ visitGc(Opcode.REF_I31); }
	def visit_I31_GET_S		()					{ visitGc(Opcode.I31_GET_S); }
	def visit_I31_GET_U		() 					{ visitGc(Opcode.I31_GET_U); }
	// FC prefix: saturating truncations.
	def visit_I32_TRUNC_SAT_F32_S	() { visitConvert(Opcode.I32_TRUNC_SAT_F32_S); }
	def visit_I32_TRUNC_SAT_F32_U	() { visitConvert(Opcode.I32_TRUNC_SAT_F32_U); }
	def visit_I32_TRUNC_SAT_F64_S	() { visitConvert(Opcode.I32_TRUNC_SAT_F64_S); }
	def visit_I32_TRUNC_SAT_F64_U	() { visitConvert(Opcode.I32_TRUNC_SAT_F64_U); }
	def visit_I64_TRUNC_SAT_F32_S	() { visitConvert(Opcode.I64_TRUNC_SAT_F32_S); }
	def visit_I64_TRUNC_SAT_F32_U	() { visitConvert(Opcode.I64_TRUNC_SAT_F32_U); }
	def visit_I64_TRUNC_SAT_F64_S	() { visitConvert(Opcode.I64_TRUNC_SAT_F64_S); }
	def visit_I64_TRUNC_SAT_F64_U	() { visitConvert(Opcode.I64_TRUNC_SAT_F64_U); }
	// FC prefix: bulk-memory and references.
	def visit_MEMORY_INIT		(data_index: u31, memory_index: u31) { visitMem(Opcode.MEMORY_INIT, memory_index); }
	def visit_DATA_DROP		(data_index: u31) 		{ visitMisc(Opcode.DATA_DROP); }
	def visit_MEMORY_COPY		(dst_memory_index: u31, src_memory_index: u31) { visitMem(Opcode.MEMORY_COPY, dst_memory_index); }
	def visit_MEMORY_FILL		(memory_index: u31)		{ visitMem(Opcode.MEMORY_FILL, memory_index); }
	def visit_TABLE_INIT		(elem_index: u31, table_index: u31) { visitTable(Opcode.TABLE_INIT, table_index); }
	def visit_ELEM_DROP		(elem_index: u31) 		{ visitMisc(Opcode.ELEM_DROP); }
	def visit_TABLE_COPY		(dst_table_index: u31, src_table_index: u31)	{ visitTable(Opcode.TABLE_COPY, dst_table_index); }
	def visit_TABLE_GROW		(table_index: u31)		{ visitTable(Opcode.TABLE_GROW, table_index); }
	def visit_TABLE_SIZE		(table_index: u31)		{ visitTable(Opcode.TABLE_SIZE, table_index); }
	def visit_TABLE_FILL		(table_index: u31)		{ visitTable(Opcode.TABLE_FILL, table_index); }
	// FD prefix: vector instructions.
	def visit_V128_LOAD			(imm: MemArg) { visitLoad(Opcode.V128_LOAD, imm, 16); }
	def visit_V128_LOAD_8X8_S		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_8X8_S, imm, 8); }
	def visit_V128_LOAD_8X8_U		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_8X8_U, imm, 8); }
	def visit_V128_LOAD_16X4_S		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_16X4_S, imm, 8); }
	def visit_V128_LOAD_16X4_U		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_16X4_U, imm, 8); }
	def visit_V128_LOAD_32X2_S		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_32X2_S, imm, 8); }
	def visit_V128_LOAD_32X2_U		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_32X2_U, imm, 8); }
	def visit_V128_LOAD_8_SPLAT		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_8_SPLAT, imm, 1); }
	def visit_V128_LOAD_16_SPLAT		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_16_SPLAT, imm, 2); }
	def visit_V128_LOAD_32_SPLAT		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_32_SPLAT, imm, 4); }
	def visit_V128_LOAD_64_SPLAT		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_64_SPLAT, imm, 8); }
	def visit_V128_LOAD_32_ZERO		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_32_ZERO, imm, 4); }
	def visit_V128_LOAD_64_ZERO		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_64_ZERO, imm, 8); }
	def visit_V128_STORE			(imm: MemArg) { visitStore(Opcode.V128_STORE, imm, 16); }
	def visit_V128_LOAD_8_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_LOAD_8_LANE, imm, 1); }
	def visit_V128_LOAD_16_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_LOAD_16_LANE, imm, 2); }
	def visit_V128_LOAD_32_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_LOAD_32_LANE, imm, 4); }
	def visit_V128_LOAD_64_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_LOAD_64_LANE, imm, 8); }
	def visit_V128_STORE_8_LANE		(imm: MemArg, lane_index: u8) { visitStore(Opcode.V128_STORE_8_LANE, imm, 1); }
	def visit_V128_STORE_16_LANE		(imm: MemArg, lane_index: u8) { visitStore(Opcode.V128_STORE_16_LANE, imm, 2); }
	def visit_V128_STORE_32_LANE		(imm: MemArg, lane_index: u8) { visitStore(Opcode.V128_STORE_32_LANE, imm, 4); }
	def visit_V128_STORE_64_LANE		(imm: MemArg, lane_index: u8) { visitStore(Opcode.V128_STORE_64_LANE, imm, 8); }
	def visit_V128_CONST			(low: u64, high: u64) { visitConst(Opcode.V128_CONST); }
	def visit_I8X16_SHUFFLE			(lane_indexes: Array<u8>) { visitSimd(Opcode.I8X16_SHUFFLE); }
	def visit_I8X16_EXTRACT_LANE_S		(lane_index: u8) { visitSimd(Opcode.I8X16_EXTRACT_LANE_S); }
	def visit_I8X16_EXTRACT_LANE_U		(lane_index: u8) { visitSimd(Opcode.I8X16_EXTRACT_LANE_U); }
	def visit_I8X16_REPLACE_LANE		(lane_index: u8) { visitSimd(Opcode.I8X16_REPLACE_LANE); }
	def visit_I16X8_EXTRACT_LANE_S		(lane_index: u8) { visitSimd(Opcode.I16X8_EXTRACT_LANE_S); }
	def visit_I16X8_EXTRACT_LANE_U		(lane_index: u8) { visitSimd(Opcode.I16X8_EXTRACT_LANE_U); }
	def visit_I16X8_REPLACE_LANE		(lane_index: u8) { visitSimd(Opcode.I16X8_REPLACE_LANE); }
	def visit_I32X4_EXTRACT_LANE		(lane_index: u8) { visitSimd(Opcode.I32X4_EXTRACT_LANE); }
	def visit_I32X4_REPLACE_LANE		(lane_index: u8) { visitSimd(Opcode.I32X4_REPLACE_LANE); }
	def visit_I64X2_EXTRACT_LANE		(lane_index: u8) { visitSimd(Opcode.I64X2_EXTRACT_LANE); }
	def visit_I64X2_REPLACE_LANE		(lane_index: u8) { visitSimd(Opcode.I64X2_REPLACE_LANE); }
	def visit_F32X4_EXTRACT_LANE		(lane_index: u8) { visitSimd(Opcode.F32X4_EXTRACT_LANE); }
	def visit_F32X4_REPLACE_LANE		(lane_index: u8) { visitSimd(Opcode.F32X4_REPLACE_LANE); }
	def visit_F64X2_EXTRACT_LANE		(lane_index: u8) { visitSimd(Opcode.F64X2_EXTRACT_LANE); }
	def visit_F64X2_REPLACE_LANE		(lane_index: u8) { visitSimd(Opcode.F64X2_REPLACE_LANE); }
	def visit_I8X16_SWIZZLE			() { visitSimd(Opcode.I8X16_SWIZZLE); }
	def visit_I8X16_SPLAT			() { visitSimd(Opcode.I8X16_SPLAT); }
	def visit_I16X8_SPLAT			() { visitSimd(Opcode.I16X8_SPLAT); }
	def visit_I32X4_SPLAT			() { visitSimd(Opcode.I32X4_SPLAT); }
	def visit_I64X2_SPLAT			() { visitSimd(Opcode.I64X2_SPLAT); }
	def visit_F32X4_SPLAT			() { visitSimd(Opcode.F32X4_SPLAT); }
	def visit_F64X2_SPLAT			() { visitSimd(Opcode.F64X2_SPLAT); }
	def visit_I8X16_EQ			() { visitSimd(Opcode.I8X16_EQ); }
	def visit_I8X16_NE			() { visitSimd(Opcode.I8X16_NE); }
	def visit_I8X16_LT_S			() { visitSimd(Opcode.I8X16_LT_S); }
	def visit_I8X16_LT_U			() { visitSimd(Opcode.I8X16_LT_U); }
	def visit_I8X16_GT_S			() { visitSimd(Opcode.I8X16_GT_S); }
	def visit_I8X16_GT_U			() { visitSimd(Opcode.I8X16_GT_U); }
	def visit_I8X16_LE_S			() { visitSimd(Opcode.I8X16_LE_S); }
	def visit_I8X16_LE_U			() { visitSimd(Opcode.I8X16_LE_U); }
	def visit_I8X16_GE_S			() { visitSimd(Opcode.I8X16_GE_S); }
	def visit_I8X16_GE_U			() { visitSimd(Opcode.I8X16_GE_U); }
	def visit_I16X8_EQ			() { visitSimd(Opcode.I16X8_EQ); }
	def visit_I16X8_NE			() { visitSimd(Opcode.I16X8_NE); }
	def visit_I16X8_LT_S			() { visitSimd(Opcode.I16X8_LT_S); }
	def visit_I16X8_LT_U			() { visitSimd(Opcode.I16X8_LT_U); }
	def visit_I16X8_GT_S			() { visitSimd(Opcode.I16X8_GT_S); }
	def visit_I16X8_GT_U			() { visitSimd(Opcode.I16X8_GT_U); }
	def visit_I16X8_LE_S			() { visitSimd(Opcode.I16X8_LE_S); }
	def visit_I16X8_LE_U			() { visitSimd(Opcode.I16X8_LE_U); }
	def visit_I16X8_GE_S			() { visitSimd(Opcode.I16X8_GE_S); }
	def visit_I16X8_GE_U			() { visitSimd(Opcode.I16X8_GE_U); }
	def visit_I32X4_EQ			() { visitSimd(Opcode.I32X4_EQ); }
	def visit_I32X4_NE			() { visitSimd(Opcode.I32X4_NE); }
	def visit_I32X4_LT_S			() { visitSimd(Opcode.I32X4_LT_S); }
	def visit_I32X4_LT_U			() { visitSimd(Opcode.I32X4_LT_U); }
	def visit_I32X4_GT_S			() { visitSimd(Opcode.I32X4_GT_S); }
	def visit_I32X4_GT_U			() { visitSimd(Opcode.I32X4_GT_U); }
	def visit_I32X4_LE_S			() { visitSimd(Opcode.I32X4_LE_S); }
	def visit_I32X4_LE_U			() { visitSimd(Opcode.I32X4_LE_U); }
	def visit_I32X4_GE_S			() { visitSimd(Opcode.I32X4_GE_S); }
	def visit_I32X4_GE_U			() { visitSimd(Opcode.I32X4_GE_U); }
	def visit_I64X2_EQ			() { visitSimd(Opcode.I64X2_EQ); }
	def visit_I64X2_NE			() { visitSimd(Opcode.I64X2_NE); }
	def visit_I64X2_LT_S			() { visitSimd(Opcode.I64X2_LT_S); }
	def visit_I64X2_GT_S			() { visitSimd(Opcode.I64X2_GT_S); }
	def visit_I64X2_LE_S			() { visitSimd(Opcode.I64X2_LE_S); }
	def visit_I64X2_GE_S			() { visitSimd(Opcode.I64X2_GE_S); }
	def visit_F32X4_EQ			() { visitSimd(Opcode.F32X4_EQ); }
	def visit_F32X4_NE			() { visitSimd(Opcode.F32X4_NE); }
	def visit_F32X4_LT			() { visitSimd(Opcode.F32X4_LT); }
	def visit_F32X4_GT			() { visitSimd(Opcode.F32X4_GT); }
	def visit_F32X4_LE			() { visitSimd(Opcode.F32X4_LE); }
	def visit_F32X4_GE			() { visitSimd(Opcode.F32X4_GE); }
	def visit_F64X2_EQ			() { visitSimd(Opcode.F64X2_EQ); }
	def visit_F64X2_NE			() { visitSimd(Opcode.F64X2_NE); }
	def visit_F64X2_LT			() { visitSimd(Opcode.F64X2_LT); }
	def visit_F64X2_GT			() { visitSimd(Opcode.F64X2_GT); }
	def visit_F64X2_LE			() { visitSimd(Opcode.F64X2_LE); }
	def visit_F64X2_GE			() { visitSimd(Opcode.F64X2_GE); }
	def visit_V128_NOT			() { visitSimd(Opcode.V128_NOT); }
	def visit_V128_AND			() { visitSimd(Opcode.V128_AND); }
	def visit_V128_ANDNOT			() { visitSimd(Opcode.V128_ANDNOT); }
	def visit_V128_OR			() { visitSimd(Opcode.V128_OR); }
	def visit_V128_XOR			() { visitSimd(Opcode.V128_XOR); }
	def visit_V128_BITSELECT		() { visitSimd(Opcode.V128_BITSELECT); }
	def visit_V128_ANYTRUE			() { visitSimd(Opcode.V128_ANYTRUE); }
	def visit_I8X16_ABS			() { visitSimd(Opcode.I8X16_ABS); }
	def visit_I8X16_NEG			() { visitSimd(Opcode.I8X16_NEG); }
	def visit_I8X16_POPCNT			() { visitSimd(Opcode.I8X16_POPCNT); }
	def visit_I8X16_ALLTRUE			() { visitSimd(Opcode.I8X16_ALLTRUE); }
	def visit_I8X16_BITMASK			() { visitSimd(Opcode.I8X16_BITMASK); }
	def visit_I8X16_NARROW_I16X8_S		() { visitSimd(Opcode.I8X16_NARROW_I16X8_S); }
	def visit_I8X16_NARROW_I16X8_U		() { visitSimd(Opcode.I8X16_NARROW_I16X8_U); }
	def visit_I8X16_SHL			() { visitSimd(Opcode.I8X16_SHL); }
	def visit_I8X16_SHR_S			() { visitSimd(Opcode.I8X16_SHR_S); }
	def visit_I8X16_SHR_U			() { visitSimd(Opcode.I8X16_SHR_U); }
	def visit_I8X16_ADD			() { visitSimd(Opcode.I8X16_ADD); }
	def visit_I8X16_ADD_SAT_S		() { visitSimd(Opcode.I8X16_ADD_SAT_S); }
	def visit_I8X16_ADD_SAT_U		() { visitSimd(Opcode.I8X16_ADD_SAT_U); }
	def visit_I8X16_SUB			() { visitSimd(Opcode.I8X16_SUB); }
	def visit_I8X16_SUB_SAT_S		() { visitSimd(Opcode.I8X16_SUB_SAT_S); }
	def visit_I8X16_SUB_SAT_U		() { visitSimd(Opcode.I8X16_SUB_SAT_U); }
	def visit_I8X16_MIN_S			() { visitSimd(Opcode.I8X16_MIN_S); }
	def visit_I8X16_MIN_U			() { visitSimd(Opcode.I8X16_MIN_U); }
	def visit_I8X16_MAX_S			() { visitSimd(Opcode.I8X16_MAX_S); }
	def visit_I8X16_MAX_U			() { visitSimd(Opcode.I8X16_MAX_U); }
	def visit_I8X16_AVGR_U			() { visitSimd(Opcode.I8X16_AVGR_U); }
	def visit_I16X8_EXTADDPAIRWISE_I8X16_S	() { visitSimd(Opcode.I16X8_EXTADDPAIRWISE_I8X16_S); }
	def visit_I16X8_EXTADDPAIRWISE_I8X16_U	() { visitSimd(Opcode.I16X8_EXTADDPAIRWISE_I8X16_U); }
	def visit_I16X8_ABS			() { visitSimd(Opcode.I16X8_ABS); }
	def visit_I16X8_NEG			() { visitSimd(Opcode.I16X8_NEG); }
	def visit_I16X8_Q15MULRSAT_S		() { visitSimd(Opcode.I16X8_Q15MULRSAT_S); }
	def visit_I16X8_ALLTRUE			() { visitSimd(Opcode.I16X8_ALLTRUE); }
	def visit_I16X8_BITMASK			() { visitSimd(Opcode.I16X8_BITMASK); }
	def visit_I16X8_NARROW_I32X4_S		() { visitSimd(Opcode.I16X8_NARROW_I32X4_S); }
	def visit_I16X8_NARROW_I32X4_U		() { visitSimd(Opcode.I16X8_NARROW_I32X4_U); }
	def visit_I16X8_EXTEND_LOW_I8X16_S	() { visitSimd(Opcode.I16X8_EXTEND_LOW_I8X16_S); }
	def visit_I16X8_EXTEND_HIGH_I8X16_S	() { visitSimd(Opcode.I16X8_EXTEND_HIGH_I8X16_S); }
	def visit_I16X8_EXTEND_LOW_I8X16_U	() { visitSimd(Opcode.I16X8_EXTEND_LOW_I8X16_U); }
	def visit_I16X8_EXTEND_HIGH_I8X16_U	() { visitSimd(Opcode.I16X8_EXTEND_HIGH_I8X16_U); }
	def visit_I16X8_SHL			() { visitSimd(Opcode.I16X8_SHL); }
	def visit_I16X8_SHR_S			() { visitSimd(Opcode.I16X8_SHR_S); }
	def visit_I16X8_SHR_U			() { visitSimd(Opcode.I16X8_SHR_U); }
	def visit_I16X8_ADD			() { visitSimd(Opcode.I16X8_ADD); }
	def visit_I16X8_ADD_SAT_S		() { visitSimd(Opcode.I16X8_ADD_SAT_S); }
	def visit_I16X8_ADD_SAT_U		() { visitSimd(Opcode.I16X8_ADD_SAT_U); }
	def visit_I16X8_SUB			() { visitSimd(Opcode.I16X8_SUB); }
	def visit_I16X8_SUB_SAT_S		() { visitSimd(Opcode.I16X8_SUB_SAT_S); }
	def visit_I16X8_SUB_SAT_U		() { visitSimd(Opcode.I16X8_SUB_SAT_U); }
	def visit_I16X8_MUL			() { visitSimd(Opcode.I16X8_MUL); }
	def visit_I16X8_MIN_S			() { visitSimd(Opcode.I16X8_MIN_S); }
	def visit_I16X8_MIN_U			() { visitSimd(Opcode.I16X8_MIN_U); }
	def visit_I16X8_MAX_S			() { visitSimd(Opcode.I16X8_MAX_S); }
	def visit_I16X8_MAX_U			() { visitSimd(Opcode.I16X8_MAX_U); }
	def visit_I16X8_AVGR_U			() { visitSimd(Opcode.I16X8_AVGR_U); }
	def visit_I16X8_EXTMUL_LOW_I8X16_S	() { visitSimd(Opcode.I16X8_EXTMUL_LOW_I8X16_S); }
	def visit_I16X8_EXTMUL_HIGH_I8X16_S	() { visitSimd(Opcode.I16X8_EXTMUL_HIGH_I8X16_S); }
	def visit_I16X8_EXTMUL_LOW_I8X16_U	() { visitSimd(Opcode.I16X8_EXTMUL_LOW_I8X16_U); }
	def visit_I16X8_EXTMUL_HIGH_I8X16_U	() { visitSimd(Opcode.I16X8_EXTMUL_HIGH_I8X16_U); }
	def visit_I32X4_EXTADDPAIRWISE_I16X8_S	() { visitSimd(Opcode.I32X4_EXTADDPAIRWISE_I16X8_S); }
	def visit_I32X4_EXTADDPAIRWISE_I16X8_U	() { visitSimd(Opcode.I32X4_EXTADDPAIRWISE_I16X8_U); }
	def visit_I32X4_ABS			() { visitSimd(Opcode.I32X4_ABS); }
	def visit_I32X4_NEG			() { visitSimd(Opcode.I32X4_NEG); }
	def visit_I32X4_ALLTRUE			() { visitSimd(Opcode.I32X4_ALLTRUE); }
	def visit_I32X4_BITMASK			() { visitSimd(Opcode.I32X4_BITMASK); }
	def visit_I32X4_EXTEND_LOW_I16X8_S	() { visitSimd(Opcode.I32X4_EXTEND_LOW_I16X8_S); }
	def visit_I32X4_EXTEND_HIGH_I16X8_S	() { visitSimd(Opcode.I32X4_EXTEND_HIGH_I16X8_S); }
	def visit_I32X4_EXTEND_LOW_I16X8_U	() { visitSimd(Opcode.I32X4_EXTEND_LOW_I16X8_U); }
	def visit_I32X4_EXTEND_HIGH_I16X8_U	() { visitSimd(Opcode.I32X4_EXTEND_HIGH_I16X8_U); }
	def visit_I32X4_SHL			() { visitSimd(Opcode.I32X4_SHL); }
	def visit_I32X4_SHR_S			() { visitSimd(Opcode.I32X4_SHR_S); }
	def visit_I32X4_SHR_U			() { visitSimd(Opcode.I32X4_SHR_U); }
	def visit_I32X4_ADD			() { visitSimd(Opcode.I32X4_ADD); }
	def visit_I32X4_SUB			() { visitSimd(Opcode.I32X4_SUB); }
	def visit_I32X4_MUL			() { visitSimd(Opcode.I32X4_MUL); }
	def visit_I32X4_MIN_S			() { visitSimd(Opcode.I32X4_MIN_S); }
	def visit_I32X4_MIN_U			() { visitSimd(Opcode.I32X4_MIN_U); }
	def visit_I32X4_MAX_S			() { visitSimd(Opcode.I32X4_MAX_S); }
	def visit_I32X4_MAX_U			() { visitSimd(Opcode.I32X4_MAX_U); }
	def visit_I32X4_DOT_I16X8_S		() { visitSimd(Opcode.I32X4_DOT_I16X8_S); }
	def visit_I32X4_EXTMUL_LOW_I16X8_S	() { visitSimd(Opcode.I32X4_EXTMUL_LOW_I16X8_S); }
	def visit_I32X4_EXTMUL_HIGH_I16X8_S	() { visitSimd(Opcode.I32X4_EXTMUL_HIGH_I16X8_S); }
	def visit_I32X4_EXTMUL_LOW_I16X8_U	() { visitSimd(Opcode.I32X4_EXTMUL_LOW_I16X8_U); }
	def visit_I32X4_EXTMUL_HIGH_I16X8_U	() { visitSimd(Opcode.I32X4_EXTMUL_HIGH_I16X8_U); }
	def visit_I64X2_ABS			() { visitSimd(Opcode.I64X2_ABS); }
	def visit_I64X2_NEG			() { visitSimd(Opcode.I64X2_NEG); }
	def visit_I64X2_ALLTRUE			() { visitSimd(Opcode.I64X2_ALLTRUE); }
	def visit_I64X2_BITMASK			() { visitSimd(Opcode.I64X2_BITMASK); }
	def visit_I64X2_EXTEND_LOW_I32X4_S	() { visitSimd(Opcode.I64X2_EXTEND_LOW_I32X4_S); }
	def visit_I64X2_EXTEND_HIGH_I32X4_S	() { visitSimd(Opcode.I64X2_EXTEND_HIGH_I32X4_S); }
	def visit_I64X2_EXTEND_LOW_I32X4_U	() { visitSimd(Opcode.I64X2_EXTEND_LOW_I32X4_U); }
	def visit_I64X2_EXTEND_HIGH_I32X4_U	() { visitSimd(Opcode.I64X2_EXTEND_HIGH_I32X4_U); }
	def visit_I64X2_SHL			() { visitSimd(Opcode.I64X2_SHL); }
	def visit_I64X2_SHR_S			() { visitSimd(Opcode.I64X2_SHR_S); }
	def visit_I64X2_SHR_U			() { visitSimd(Opcode.I64X2_SHR_U); }
	def visit_I64X2_ADD			() { visitSimd(Opcode.I64X2_ADD); }
	def visit_I64X2_SUB			() { visitSimd(Opcode.I64X2_SUB); }
	def visit_I64X2_MUL			() { visitSimd(Opcode.I64X2_MUL); }
	def visit_I64X2_EXTMUL_LOW_I32X4_S	() { visitSimd(Opcode.I64X2_EXTMUL_LOW_I32X4_S); }
	def visit_I64X2_EXTMUL_HIGH_I32X4_S	() { visitSimd(Opcode.I64X2_EXTMUL_HIGH_I32X4_S); }
	def visit_I64X2_EXTMUL_LOW_I32X4_U	() { visitSimd(Opcode.I64X2_EXTMUL_LOW_I32X4_U); }
	def visit_I64X2_EXTMUL_HIGH_I32X4_U	() { visitSimd(Opcode.I64X2_EXTMUL_HIGH_I32X4_U); }
	def visit_F32X4_CEIL			() { visitSimd(Opcode.F32X4_CEIL); }
	def visit_F32X4_FLOOR			() { visitSimd(Opcode.F32X4_FLOOR); }
	def visit_F32X4_TRUNC			() { visitSimd(Opcode.F32X4_TRUNC); }
	def visit_F32X4_NEAREST			() { visitSimd(Opcode.F32X4_NEAREST); }
	def visit_F32X4_ABS			() { visitSimd(Opcode.F32X4_ABS); }
	def visit_F32X4_NEG			() { visitSimd(Opcode.F32X4_NEG); }
	def visit_F32X4_SQRT			() { visitSimd(Opcode.F32X4_SQRT); }
	def visit_F32X4_ADD			() { visitSimd(Opcode.F32X4_ADD); }
	def visit_F32X4_SUB			() { visitSimd(Opcode.F32X4_SUB); }
	def visit_F32X4_MUL			() { visitSimd(Opcode.F32X4_MUL); }
	def visit_F32X4_DIV			() { visitSimd(Opcode.F32X4_DIV); }
	def visit_F32X4_MIN			() { visitSimd(Opcode.F32X4_MIN); }
	def visit_F32X4_MAX			() { visitSimd(Opcode.F32X4_MAX); }
	def visit_F32X4_PMIN			() { visitSimd(Opcode.F32X4_PMIN); }
	def visit_F32X4_PMAX			() { visitSimd(Opcode.F32X4_PMAX); }
	def visit_F64X2_CEIL			() { visitSimd(Opcode.F64X2_CEIL); }
	def visit_F64X2_FLOOR			() { visitSimd(Opcode.F64X2_FLOOR); }
	def visit_F64X2_TRUNC			() { visitSimd(Opcode.F64X2_TRUNC); }
	def visit_F64X2_NEAREST			() { visitSimd(Opcode.F64X2_NEAREST); }
	def visit_F64X2_ABS			() { visitSimd(Opcode.F64X2_ABS); }
	def visit_F64X2_NEG			() { visitSimd(Opcode.F64X2_NEG); }
	def visit_F64X2_SQRT			() { visitSimd(Opcode.F64X2_SQRT); }
	def visit_F64X2_ADD			() { visitSimd(Opcode.F64X2_ADD); }
	def visit_F64X2_SUB			() { visitSimd(Opcode.F64X2_SUB); }
	def visit_F64X2_MUL			() { visitSimd(Opcode.F64X2_MUL); }
	def visit_F64X2_DIV			() { visitSimd(Opcode.F64X2_DIV); }
	def visit_F64X2_MIN			() { visitSimd(Opcode.F64X2_MIN); }
	def visit_F64X2_MAX			() { visitSimd(Opcode.F64X2_MAX); }
	def visit_F64X2_PMIN			() { visitSimd(Opcode.F64X2_PMIN); }
	def visit_F64X2_PMAX			() { visitSimd(Opcode.F64X2_PMAX); }
	def visit_I32X4_TRUNC_SAT_F32X4_S	() { visitSimd(Opcode.I32X4_TRUNC_SAT_F32X4_S); }
	def visit_I32X4_TRUNC_SAT_F32X4_U	() { visitSimd(Opcode.I32X4_TRUNC_SAT_F32X4_U); }
	def visit_F32X4_CONVERT_I32X4_S		() { visitSimd(Opcode.F32X4_CONVERT_I32X4_S); }
	def visit_F32X4_CONVERT_I32X4_U		() { visitSimd(Opcode.F32X4_CONVERT_I32X4_U); }
	def visit_I32X4_TRUNC_SAT_F64X2_S_ZERO	() { visitSimd(Opcode.I32X4_TRUNC_SAT_F64X2_S_ZERO); }
	def visit_I32X4_TRUNC_SAT_F64X2_U_ZERO	() { visitSimd(Opcode.I32X4_TRUNC_SAT_F64X2_U_ZERO); }
	def visit_F64X2_CONVERT_LOW_I32X4_S	() { visitSimd(Opcode.F64X2_CONVERT_LOW_I32X4_S); }
	def visit_F64X2_CONVERT_LOW_I32X4_U	() { visitSimd(Opcode.F64X2_CONVERT_LOW_I32X4_U); }
	def visit_F32X4_DEMOTE_F64X2_ZERO	() { visitSimd(Opcode.F32X4_DEMOTE_F64X2_ZERO); }
	def visit_F64X2_PROMOTE_LOW_F32X4	() { visitSimd(Opcode.F64X2_PROMOTE_LOW_F32X4); }
	// FE prefix: atomics.
	def visit_MEMORY_ATOMIC_NOTIFY		(imm: MemArg) 	{ visitAtomic(Opcode.MEMORY_ATOMIC_NOTIFY, imm); }
	def visit_MEMORY_ATOMIC_WAIT32		(imm: MemArg) 	{ visitAtomic(Opcode.MEMORY_ATOMIC_WAIT32, imm); }
	def visit_MEMORY_ATOMIC_WAIT64		(imm: MemArg) 	{ visitAtomic(Opcode.MEMORY_ATOMIC_WAIT64, imm); }
	def visit_ATOMIC_FENCE			(flags: u8)	{ visitMisc(Opcode.ATOMIC_FENCE); }
	def visit_I32_ATOMIC_LOAD		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_LOAD, imm); }
	def visit_I64_ATOMIC_LOAD		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_LOAD, imm); }
	def visit_I32_ATOMIC_LOAD8_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_LOAD8_U, imm); }
	def visit_I32_ATOMIC_LOAD16_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_LOAD16_U, imm); }
	def visit_I64_ATOMIC_LOAD8_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_LOAD8_U, imm); }
	def visit_I64_ATOMIC_LOAD16_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_LOAD16_U, imm); }
	def visit_I64_ATOMIC_LOAD32_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_LOAD32_U, imm); }
	def visit_I32_ATOMIC_STORE		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_STORE, imm); }
	def visit_I64_ATOMIC_STORE		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_STORE, imm); }
	def visit_I32_ATOMIC_STORE8		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_STORE8, imm); }
	def visit_I32_ATOMIC_STORE16		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_STORE16, imm); }
	def visit_I64_ATOMIC_STORE8		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_STORE8, imm); }
	def visit_I64_ATOMIC_STORE16		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_STORE16, imm); }
	def visit_I64_ATOMIC_STORE32		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_STORE32, imm); }
	def visit_I32_ATOMIC_RMW_ADD		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_ADD, imm); }
	def visit_I64_ATOMIC_RMW_ADD		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_ADD, imm); }
	def visit_I32_ATOMIC_RMW8_ADD_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_ADD_U, imm); }
	def visit_I32_ATOMIC_RMW16_ADD_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_ADD_U, imm); }
	def visit_I64_ATOMIC_RMW8_ADD_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_ADD_U, imm); }
	def visit_I64_ATOMIC_RMW16_ADD_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_ADD_U, imm); }
	def visit_I64_ATOMIC_RMW32_ADD_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_ADD_U, imm); }
	def visit_I32_ATOMIC_RMW_SUB		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_SUB, imm); }
	def visit_I64_ATOMIC_RMW_SUB		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_SUB, imm); }
	def visit_I32_ATOMIC_RMW8_SUB_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_SUB_U, imm); }
	def visit_I32_ATOMIC_RMW16_SUB_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_SUB_U, imm); }
	def visit_I64_ATOMIC_RMW8_SUB_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_SUB_U, imm); }
	def visit_I64_ATOMIC_RMW16_SUB_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_SUB_U, imm); }
	def visit_I64_ATOMIC_RMW32_SUB_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_SUB_U, imm); }
	def visit_I32_ATOMIC_RMW_AND		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_AND, imm); }
	def visit_I64_ATOMIC_RMW_AND		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_AND, imm); }
	def visit_I32_ATOMIC_RMW8_AND_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_AND_U, imm); }
	def visit_I32_ATOMIC_RMW16_AND_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_AND_U, imm); }
	def visit_I64_ATOMIC_RMW8_AND_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_AND_U, imm); }
	def visit_I64_ATOMIC_RMW16_AND_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_AND_U, imm); }
	def visit_I64_ATOMIC_RMW32_AND_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_AND_U, imm); }
	def visit_I32_ATOMIC_RMW_OR		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_OR, imm); }
	def visit_I64_ATOMIC_RMW_OR		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_OR, imm); }
	def visit_I32_ATOMIC_RMW8_OR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_OR_U, imm); }
	def visit_I32_ATOMIC_RMW16_OR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_OR_U, imm); }
	def visit_I64_ATOMIC_RMW8_OR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_OR_U, imm); }
	def visit_I64_ATOMIC_RMW16_OR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_OR_U, imm); }
	def visit_I64_ATOMIC_RMW32_OR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_OR_U, imm); }
	def visit_I32_ATOMIC_RMW_XOR		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_XOR, imm); }
	def visit_I64_ATOMIC_RMW_XOR		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_XOR, imm); }
	def visit_I32_ATOMIC_RMW8_XOR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_XOR_U, imm); }
	def visit_I32_ATOMIC_RMW16_XOR_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_XOR_U, imm); }
	def visit_I64_ATOMIC_RMW8_XOR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_XOR_U, imm); }
	def visit_I64_ATOMIC_RMW16_XOR_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_XOR_U, imm); }
	def visit_I64_ATOMIC_RMW32_XOR_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_XOR_U, imm); }
	def visit_I32_ATOMIC_RMW_XCHG		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_XCHG, imm); }
	def visit_I64_ATOMIC_RMW_XCHG		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_XCHG, imm); }
	def visit_I32_ATOMIC_RMW8_XCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_XCHG_U, imm); }
	def visit_I32_ATOMIC_RMW16_XCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_XCHG_U, imm); }
	def visit_I64_ATOMIC_RMW8_XCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_XCHG_U, imm); }
	def visit_I64_ATOMIC_RMW16_XCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_XCHG_U, imm); }
	def visit_I64_ATOMIC_RMW32_XCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_XCHG_U, imm); }
	def visit_I32_ATOMIC_RMW_CMPXCHG	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_CMPXCHG, imm); }
	def visit_I64_ATOMIC_RMW_CMPXCHG	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_CMPXCHG, imm); }
	def visit_I32_ATOMIC_RMW8_CMPXCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_CMPXCHG_U, imm); }
	def visit_I32_ATOMIC_RMW16_CMPXCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_CMPXCHG_U, imm); }
	def visit_I64_ATOMIC_RMW8_CMPXCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_CMPXCHG_U, imm); }
	def visit_I64_ATOMIC_RMW16_CMPXCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_CMPXCHG_U, imm); }
	def visit_I64_ATOMIC_RMW32_CMPXCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_CMPXCHG_U, imm); }
	// stack switching
	def visit_CONT_NEW					(cont: u31) 	{ visitOp(Opcode.CONT_NEW); }
	def visit_CONT_BIND					(ct1: u31, ct2: u31) { visitOp(Opcode.CONT_BIND); }
	def visit_RESUME					(cont: u31) 	{ visitOp(Opcode.RESUME); }
	def visit_RESUME_THROW				(cont: u31, tag: u31) 	{ visitOp(Opcode.RESUME_THROW); }
	def visit_SUSPEND					(tag: u31)  	{ visitOp(Opcode.SUSPEND); }
	def visit_SWITCH					(cont: u31, tag: u31) 	{ visitOp(Opcode.SWITCH); }
}
