// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def ENGINE_MEM = "engine:data";

// Represents an event that is instrumentable in Whamm.
type WhammEvent {
	case Null;
	case Func(mode: FuncMode);
	case Opcode(op: Opcode);

	def render(buf: StringBuilder) -> StringBuilder {
		match (this) {
			Func(mode) => return buf.puts("func:").puts(mode.mnemonic);
			Opcode(op) => return buf.puts("opcode:").puts(op.mnemonic);
			Null => return buf.puts("<null>");
		}
	}
}
enum FuncMode(mnemonic: string) {
	Entry("entry"),
	Exit("exit")
}

// Represents a declared parameter to a Whamm probe call.
type WhammParam {
	case DynamicLoc;
	case FrameAccessor;
	case Pc;
	case Func;
	case ProbeId;
	case NumTargets;
	case Offset;
	case Imm(orig: Token, i: u31);
	case Arg(orig: Token, i: u31);
	case Local(orig: Token, i: u31);
	case Call(target: Token, params: Array<WhammParam>);

	def render(buf: StringBuilder) -> StringBuilder {
		match (this) {
			DynamicLoc => return buf.puts("loc");
			FrameAccessor => return buf.puts("frame");
			Pc => return buf.puts("pc");
			Func => return buf.puts("fid");
			ProbeId => return buf.puts("probe_id");
			NumTargets => return buf.puts("num_targets");
			Offset => return buf.puts("offset");
			Imm(orig, i) => return buf.put1("imm%d", i);
			Arg(orig, i) => return buf.put1("arg%d", i);
			Local(orig, i) => return buf.put1("local%d", i);
			Call(target, params) => {
				buf.puts(target.image);
				buf.putc('(');
				Trace.renderCspRange(buf, params, WhammParam.render);
				buf.putc(')');
				return buf;
			}
		}
	}
}

// {WhammParam}s are converted to {WhammArg}s when they are bound at a match site. After a match
// is determined, some {WhammParam}s are turned into constants (e.g. func, pc), while others (e.g.
// local slot) have their types determined by the match location. Similarly, calls will be
// evaluated at the match site and replaced with their results.
type WhammArg {
	case Null;
	case FrameAccessor;
	case Val(v: Value);
	case Operand(t: ValueType, i: int);
	case Local(t: ValueType, i: int);
}

class WhammPredicate(call: WhammParam.Call) { }

// Represents an instance of a Whamm monitor attached to an application module.
class WhammInstance {
	def app: Module;			// application module
	def instance: Instance;			// instance of the whamm monitor

	new(app, instance) { }
}

// Utilities associated with Whamm probes.
component Whamm {
	def NO_PARAMS: Array<WhammParam> = [];
	def NO_ARGS: Array<WhammArg> = [];

	// Parse a string representing an opcode match with optional parameters.
	def parseProbePattern(r: TextReader) -> (WhammEvent, Array<WhammParam>, WhammPredicate) {		
		var event: WhammEvent = WhammEvent.Null;
		if (r.optN("wasm:") >= 0) {
			if (r.optN("opcode:") >= 0) {
				var op = Opcodes.parseName(r.data[r.pos ...]);
				if (op != Opcode.INVALID) {
					event = WhammEvent.Opcode(op);
					r.advance(op.mnemonic.length);
					r.skipWhitespace();
				}
			} else if (r.optN("func:") >= 0) {
				event = parseFuncEvent(r);
			}
		}

		if (event == WhammEvent.Null) {
			return (event, NO_PARAMS, null);
		}

		var pred = if(r.char == '/', parsePredicate(r));
		r.skipWhitespace();
		var params = if(r.char == '(', parseParams(r), NO_PARAMS);
		return (event, params, pred);
	}
	def parseFuncEvent(r: TextReader) -> WhammEvent {
		if (r.optN(FuncMode.Entry.mnemonic) >= 0) {
			return WhammEvent.Func(FuncMode.Entry);
		} else if (r.optN(FuncMode.Exit.mnemonic) >= 0){
			return WhammEvent.Func(FuncMode.Exit);
		}
		return WhammEvent.Null;
	}
	// Parse a string representing Whamm parameters, enclosed in parentheses.
	// Any parse errors are left in the supplied {TextReader}.
	def parseParams(r: TextReader) -> Array<WhammParam> {
		var params = Vector<WhammParam>.new();
		r.req1('(');
		while (r.ok) {
			if (r.opt1(')') > 0) break;
			var p = parseParam0(r);
			if (!r.ok) break;
			params.put(p);
			if (r.opt1(')') > 0) break;
			r.req1(',');
		}
		return params.extract();
	}
	// Parse a string representation of a predicate, which is restricted to be
	// a call, thus "/$func(args)/".
	def parsePredicate(r: TextReader) -> WhammPredicate {
		r.req1('/');
		r.skipWhitespace();
		match (parseParam0(r)) {
			x: WhammParam.Call => {
				var pred = WhammPredicate.new(x);
				r.skipWhitespace();
				r.req1('/');
				return pred;
			}
			_ => {
				r.fail("expected call in predicate");
				return null;
			}
		}
	}
}

// A probe that adapts a Wasm function to be called by the engine-internal probing mechanism.
class WhammProbe(func: Function, sig: Array<WhammArg>) extends Probe {
	var trampoline: TargetCode;
	// properties set by the spc to make inlining optimization decisions.
	var inline_heuristic_checked = false;
	var spc_inline_func = false;
	var spc_swap_instance = false;
	var spc_swap_membase = false;

	private def args = if(sig.length == 0, Values.NONE, Array<Value>.new(sig.length));

	def fire(loc: DynamicLoc) -> Resumption {
		for (i < sig.length) {
			var v: Value;
			match (sig[i]) {
				FrameAccessor => v = Value.Ref(loc.frame.getFrameAccessor().getMetaRef());
				Val(val) => v = val;
				Operand(t, i) => v = loc.frame.getFrameAccessor().getOperand(i);
				Local(t, i) => v = loc.frame.getFrameAccessor().getLocal(i);
				Null => System.error("whamm", "null whamm arg!");
			}
			args[i] = v;
		}
		match (Execute.call(func, args)) {
			Throw(thrown) => {
				TraceUtil.renderThrowable(Trace.OUT, thrown);
				System.error("whamm", "probe threw exception");
			}
			_ => ;
		}
		return Resumption.Continue;
	}
}

def parseParam0(r: TextReader) -> WhammParam {
	var i = r.star_rel(0, isAlphaOrUnderscore);
	var id = r.data[r.pos ... i];
	if (Ranges.equal("arg", id)) return parseUint(r, i, WhammParam.Arg);
	if (Ranges.equal("imm", id)) return parseUint(r, i, WhammParam.Imm);
	if (Ranges.equal("local", id)) return parseUint(r, i, WhammParam.Local);

	i = r.star_rel(i - r.pos, isIdentChar);

	if (i == r.pos) {
		r.fail("expected identifier");
		return WhammParam.DynamicLoc;
	}

	var token = r.readToken(i - r.pos);
	if (r.char == '(') {
		var params = Whamm.parseParams(r); // TODO: don't allow nested calls.
		return WhammParam.Call(token, params);
	}

	if (Strings.equal("pc", token.image)) return WhammParam.Pc;
	if (Strings.equal("fid", token.image)) return WhammParam.Func;
	if (Strings.equal("probe_id", token.image)) return WhammParam.ProbeId;
	if (Strings.equal("frame", token.image)) return WhammParam.FrameAccessor;
	if (Strings.equal("num_targets", token.image)) return WhammParam.NumTargets;
	if (Strings.equal("offset", token.image)) return WhammParam.Offset;

	r.setFirstError(token.beginLine, token.beginColumn, Strings.format1("unresolved identifier: \"%s\"", token.image));
	return WhammParam.DynamicLoc;
}
def parseUint<T>(r: TextReader, i: int, f: (Token, u31) -> T) -> T {
	var t = Ints.parsePosDecimal(r.data, i);
	if (t.0 > 0) {
		var token = r.readToken(i + t.0 - r.pos);
		return f(token, u31.!(t.1));
	}
	r.failRel(i, "expected positive integer");
	var d: T;
	return d;
}
def isAlphaOrUnderscore(ch: byte) -> bool {
	return (ch >= 'a' && ch <= 'z')
		|| (ch >= 'A' && ch <= 'Z')
		|| ch == '_';
}
def isIdentChar(ch: byte) -> bool {
	return (ch >= 'a' && ch <= 'z')
		|| (ch >= 'A' && ch <= 'Z')
		|| (ch >= '0' && ch <= '9')
		|| ch == '_' || ch == '$';
}

def debug(r: TextReader, where: string) {
	Trace.OUT.puts(where).ln();
	r.renderCurrentLineWithCaret(Trace.OUT, r.pos);
	Trace.OUT.ln();
}

class WhammVarBinder(wi: WhammInstance, err: ErrorGen) {
	var probe_id = -1;
	var func_cache: HashMap<string, Function>;

	def evalCall(target: Token, params: Array<WhammParam>, cv: CodeValidator, op: Opcode) -> CallResult {
		def exports = wi.instance.module.exports;
		def func = lookupExportedFunction(target.image);
		if (func == null) {
			err.at(cv.parser.decoder).WhammProbeError("whamm probe", Strings.format1("static function %s not found", target.image));
			return CallResult.Fail;
		}

		def whammArgs = bindParams(cv, func.sig.params, params, op, true);
		if (whammArgs == null) return CallResult.Fail;	// propagating error, not a good idea
		def args = if(whammArgs.length == 0, Values.NONE, Array<Value>.new(whammArgs.length));

		for (i < whammArgs.length) {
			// this cast should always succeed, as a dynamic parameter will
			// cause  `bindParams` to fail
			args[i] = WhammArg.Val.!(whammArgs[i]).v;
		}
		// typecheck before execute
		def result = Execute.call(func, args); // XXX: runs on a new stack
		match (result) {
			Value(vals) => {
				if (vals.length != 1) {
					err.at(cv.parser.decoder).WhammProbeError("whamm probe", "incorrect function return arity");
					return CallResult.Fail;
				}
				return CallResult.OK(func.sig.results[0], vals[0]);
			}
			Throw(thrown) => {
				err.at(cv.parser.decoder).WhammProbeError("whamm probe", "static function threw exception");
				TraceUtil.renderThrowable(Trace.OUT, thrown);
				return CallResult.Fail;
			}
			Switch => {
				err.at(cv.parser.decoder).WhammProbeError("whamm probe", "attempted stack switch");
				return CallResult.Fail;
			}
		}
	}

	def bindParams(cv: CodeValidator, expParams: Array<ValueType>,
			params: Array<WhammParam>, op: Opcode, nested: bool) -> Array<WhammArg> {
		var args = Array<WhammArg>.new(params.length);
		// calls to lazily perform (only if we have a match)
		var callsToEval: List<void -> WhammArg>;

	  	if (expParams.length != args.length) {
			err.at(cv.parser.decoder).WhammProbeError("whamm probe", "arity mismatch between wasm function params and whamm exported name");
			return null;
	 	}

		for (i < args.length) {
			var arg: WhammArg;
			match (params[i]) {
				DynamicLoc => ; // TODO
				FrameAccessor => {
					if (nested) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "cannot use dynamic data in static context (FrameAccessor)");
						return null;
					}
					arg = bindFrameAccessor(op, expParams[i], cv);
			  	}
				Pc => {
					arg = bindPc(op, expParams[i], cv);
				}
				Func => {
					arg = bindFunc(op, expParams[i], cv);
				}
				ProbeId => {
					arg = bindProbeId(op, expParams[i], cv);
				}
				NumTargets => {
					arg = bindNumTargets(op, expParams[i], cv);
				}
				Offset => {
					arg = bindOffset(op, expParams[i], cv);
				}
				Imm(orig, j) => {
					arg = bindImm(j, op, expParams[i], cv);
				}
				Arg(orig, j) => {  // arg0 = first arg to bytecode
					if (nested) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "cannot use dynamic data in static context (arg)");
						return null;
					}
					arg = bindArg(j, op, expParams[i], cv);
				}
				Local(orig, j) => {
					if (nested) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "cannot use dynamic data in static context (local)");
						return null;
					}
					arg = bindLocal(j, op, expParams[i], cv);
				}
				Call(target, params) => {
					if (nested) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "nested function calls");
						return null;
					}
					// Call this function only if we have a match!
					callsToEval = List.new((fun => args[i] = bindCallResult(target, params, op, expParams[i], cv)),
						callsToEval);
					continue;
				}
			}
			if (arg == WhammArg.Null) return null;
			args[i] = arg;
		}
		for (l = callsToEval; l != null; l = l.tail) {
			def arg = l.head();
			if (arg == WhammArg.Null) return null;
		}
		return args;
	}

	private def bindFrameAccessor(op: Opcode, expType: ValueType, cv: CodeValidator) -> WhammArg {
		if (expType != ValueTypes.EXTERNREF) {
			err.at(cv.parser.decoder).WhammProbeError("whamm probe", "type mismatch on frame accessor argument");
			return WhammArg.Null;
		}
		return WhammArg.FrameAccessor; // type externref
	}

	private def bindPc(op: Opcode, expType: ValueType, cv: CodeValidator) -> WhammArg {
		if (expType != ValueType.I32) {
			err.at(cv.parser.decoder).WhammProbeError("whamm probe", "type mismatch on pc argument");
			return WhammArg.Null;
		}
		return WhammArg.Val(Values.box_i(cv.opcode_pos));
	}

	private def bindFunc(op: Opcode, expType: ValueType, cv: CodeValidator) -> WhammArg {
		if (expType != ValueType.I32) {
			err.at(cv.parser.decoder).WhammProbeError("whamm probe", "type mismatch on function index argument");
			return WhammArg.Null;
		}
		return WhammArg.Val(Values.box_i(cv.func.func_index));
	}

	private def bindProbeId(op: Opcode, expType: ValueType, cv: CodeValidator) -> WhammArg {
		if (expType != ValueType.I32) {
			err.at(cv.parser.decoder).WhammProbeError("whamm probe", "type mismatch on probe ID argument");
			return WhammArg.Null;
		}
		if (probe_id < 0) {
			if (wi.app.dyn_probes == null) wi.app.dyn_probes = Vector.new();
			probe_id = wi.app.dyn_probes.length;
			wi.app.dyn_probes.put(0, 0, null);
		}
		return WhammArg.Val(Values.box_i(probe_id));
	}

	private def bindNumTargets(op: Opcode, expType: ValueType, cv: CodeValidator) -> WhammArg {
		if (op != Opcode.BR_TABLE) {
			err.at(cv.parser.decoder).WhammProbeError("whamm probe", "num_targets variable only in-scope for br_table opcode.");
			return WhammArg.Null;
		}
		if (expType != ValueType.I32) {
			err.at(cv.parser.decoder).WhammProbeError("whamm probe", "type mismatch on num_targets argument");
			return WhammArg.Null;
		}

		var accessors = cv.immAccessors();
		var parser = accessors.0;
		var codeptr = accessors.1;
		for (imm in op.imms) {
			if (imm == ImmKind.LABELS) {
				// num_targets is the number of branches (not including the default branch)
				def labels = parser.readLabels();
				
				return WhammArg.Val(Values.box_i(labels.length - 1));
			} else {
				codeptr.skip_immediates([imm]);
			}
		}
		return WhammArg.Null;
	}

	private def bindOffset(op: Opcode, expType: ValueType, cv: CodeValidator) -> WhammArg {
		def imms = op.imms;

		var accessors = cv.immAccessors();
		var parser = accessors.0;
		var codeptr = accessors.1;
		for (imm in op.imms) {
			if (imm == ImmKind.MEMARG) {
				if (expType != ValueType.I64) {
					err.at(cv.parser.decoder).WhammProbeError("whamm probe", "offset variable type mismatch.");
				}

				def memarg = parser.readMemoryArg();
				return WhammArg.Val(Values.box_l(i64.!(memarg.offset)));
			} else {
				codeptr.skip_immediates([imm]);
			}
		}
		err.at(cv.parser.decoder).WhammProbeError("whamm probe", "offset variable not available for opcode.");
		return WhammArg.Null;
	}

	private def bindImm(n: int, op: Opcode, expType: ValueType, cv: CodeValidator) -> WhammArg {
		def imms = op.imms;
		def vals = Vector<Value>.new();

		var accessors = cv.immAccessors();
		var parser = accessors.0;
		for (imm in op.imms) {
			match (imm) {
				ARRAY_TYPE_INDEX  => vals.put(Values.box_u(parser.readU32("array type index", u32.max)));
				BLOCK_TYPE        => vals.put(Values.box_i(parser.readTypeCode()));
				DATA_INDEX        => vals.put(Values.box_u(parser.readU32("data index", u32.max)));
				ELEM_INDEX        => vals.put(Values.box_u(parser.readU32("elem index", u32.max)));
				TAG_INDEX         => vals.put(Values.box_u(parser.readU32("tag index", u32.max)));
				FIELD_INDEX       => vals.put(Values.box_u(parser.readU32("field index", u32.max)));
				FUNC_INDEX        => vals.put(Values.box_u(parser.readU32("func index", u32.max)));
				GLOBAL_INDEX      => vals.put(Values.box_u(parser.readU32("global index", u32.max)));
				LABEL             => vals.put(Values.box_u(parser.readLabel()));
				LABELS            => {
					def labels = parser.readLabels();
					// NOTE hardcoded, because BR_TABLE is the only one that uses imm.LABELS
					vals.put(Values.box_i(labels.length - 1));
					vals.puta(Arrays.map(labels, Values.box_u));
				}
				LOCAL_INDEX       => vals.put(Values.box_u(parser.readU32("local index", u32.max)));
				MEMARG            => {
					// TODO discuss memarg format
					def memarg = parser.readMemoryArg();
					vals.put(Values.box_u(memarg.flags));
					vals.put(Values.box_u(memarg.memory_index));
					vals.put(Values.box_u(u32.!(memarg.offset)));
				}
				MEMORY_INDEX      => vals.put(Values.box_u(parser.readU32("memory index", u32.max)));
				HEAP_TYPE         => vals.put(Values.box_i(parser.readTypeCode()));
				SIG_INDEX         => vals.put(Values.box_u(parser.readU32("sig index", u32.max)));
				STRUCT_TYPE_INDEX => vals.put(Values.box_u(parser.readU32("struct type index", u32.max)));
				TABLE_INDEX	  => vals.put(Values.box_u(parser.readU32("table index", u32.max)));
				VALUE_TYPES	  => ;		// TODO
				ZERO_BYTE	  => vals.put(Values.box_u(parser.decoder.read1()));
				U32		  => vals.put(Values.box_u(parser.readU32("imm U32", u32.max)));
				I32		  => vals.put(Values.box_i(parser.readI32()));
				I64		  => vals.put(Values.box_l(parser.readI64()));
				F32		  => vals.put(Values.box_fu32(parser.readF32()));
				F64		  => vals.put(Values.box_du64(parser.readF64()));
				V128		  => vals.put(Values.box_s(parser.decoder.read_u64(), parser.decoder.read_u64()));
				LANE_INDEX	  => vals.put(Values.box_u(parser.decoder.read1()));
				BR_CAST		  => ;		// TODO
				CATCHES		  => ;		// TODO
				CONT_INDEX	  => ;		// TODO
				EX_HANDLERS	  => ;		// TODO
				SUS_HANDLERS	  => ;		// TODO
			}
		}

		if (n >= vals.length) {
			match (op) {
				BR_TABLE, TRY_TABLE => {
					if (Trace.whamm) Trace.OUT.ln().puts("    no match: immediate argument out of bounds").ln();
				} // no match error
				_ => {
					err.at(cv.parser.decoder).WhammProbeError("whamm probe", "immediate argument out of bounds");
				}
			}
			return WhammArg.Null;
		}

		var t: ValueType;
		match (vals[n]) {
			Ref  => t = ValueTypes.ANYREF;
			I31  => t = ValueTypes.I31REF;
			I32  => t = ValueType.I32;
			I64  => t = ValueType.I64;
			F32  => t = ValueType.F32;
			F64  => t = ValueType.F64;
			V128 => t = ValueType.V128;
		}
		if (expType != t) {
			err.at(cv.parser.decoder).WhammProbeError("whamm probe", "instruction immediate type mismatch");
			return WhammArg.Null;
		}
		return WhammArg.Val(vals[n]);
	}

	private def bindArg(n: int, op: Opcode, expType: ValueType, cv: CodeValidator) -> WhammArg {
		var accessors = cv.immAccessors();
		var parser = accessors.0;
		def io = Opcodes.stackDelta(cv.sig, op, parser);
		def args = io.0;

		if (n >= args) {
			match (op) {
				CALL, CALL_INDIRECT => {
					if (Trace.whamm) Trace.OUT.ln().puts("    no match: instruction argument type mismatch").ln();
				} // no match
				_ => {
					err.at(cv.parser.decoder).WhammProbeError("whamm probe", "instruction argument out of bounds");
				}
			}
			return WhammArg.Null;
		}
		def stk = cv.val_stack.peekn(args);
		def t   = stk[args - n - 1];
		if (expType != t) {
			match (op) {
				CALL, CALL_INDIRECT => {
					if (Trace.whamm) Trace.OUT.ln().puts("    no match: instruction argument type mismatch").ln();
				} // no match
				_ => {
					err.at(cv.parser.decoder).WhammProbeError("whamm probe", "instruction argument type mismatch");
				}
			}
			return WhammArg.Null;
		}
		return WhammArg.Operand(t, 0 - n);
	}

	private def bindLocal(n: int, op: Opcode, expType: ValueType, cv: CodeValidator) -> WhammArg {
		if (n >= cv.locals.length) {
			if (Trace.whamm) Trace.OUT.ln().puts("    no match: probe requested an OOB local variable").ln();
			return WhammArg.Null;
		} // no match error

		def t = cv.locals[n];

		if (expType != t) {
			if (Trace.whamm) Trace.OUT.ln().puts("    no match: local variable type mismatch").ln();
			return WhammArg.Null;
		} // no match error
		return WhammArg.Local(t, n);
	}

	private def bindCallResult(target: Token, params: Array<WhammParam>, op: Opcode, expType: ValueType, cv: CodeValidator) -> WhammArg {
		var arg: WhammArg;
		match (evalCall(target, params, cv, op)) {
			Fail => {
				if (Trace.whamm) Trace.OUT.ln().puts("    no match: failure during static call invocation").ln();
				return WhammArg.Null;
			}
			OK(t, v) => {
				arg = WhammArg.Val(v);
				if (expType != t) {
					err.at(cv.parser.decoder).WhammProbeError("whamm probe",
						Strings.format2("expected static call return type %q, got %q", expType.render, t.render));
					return WhammArg.Null;
				}
			}
		}
		return arg;
	}
	def lookupExportedFunction(name: string) -> Function {
		if (func_cache == null) {
			func_cache = Strings.newMap();
			def exports = wi.instance.module.exports;
			for (i < exports.length) {
				var ex = exports[i];
				if (!FuncDecl.?(ex.1)) continue;
				func_cache[ex.0] = Function.!(wi.instance.exports[i]);
			}
		}
		return func_cache[name];
	}
}

type CallResult {
	case Fail; // should be set in errorgen, so no extra context needed
	case OK(t: ValueType, v: Value);
}
