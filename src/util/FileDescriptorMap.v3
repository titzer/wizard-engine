// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Provides a mapping between user-level file descriptors and system-level file descriptors.
class FileDescriptorMap(max: int) {
	private def fds = Array<int>.new(max);
	private var sysfd_to_userfd: HashMap<int, int>;
	private var lastfd: int;
	
	new() {
		sysfd_to_userfd = HashMap<int, int>.new(int.!, int.==);
		for (i < fds.length) fds[i] = -1;
		set(0, 0);
		set(1, 1);
		set(2, 2);
		lastfd = 3;
	}
	def get(fd: int) -> int {
		return if(fd < 0 || fd >= fds.length, -1, fds[fd]);
	}
	def get_userfd(sys: int) -> int {
		if (sysfd_to_userfd.has(sys)) {
			return sysfd_to_userfd[sys];
		}
		return -1;
	}
	def set(fd: int, sys: int) {
		fds[fd] = sys;
		sysfd_to_userfd[sys] = fd;
	}
	def alloc() -> int {
		for (i = lastfd; i < fds.length; i++) {
			if (fds[i] < 0) {
				lastfd = (i + 1) % fds.length;
				return i;
			}
		}
		for (i < lastfd) {
			lastfd = (i + 1) % fds.length;
			return i;
		}
		return -1;
	}
	def free(fd: int) -> int {
		if (fd < 3 || fd >= fds.length) return -1;
		if (fds[fd] < 0) return -1;
		fds[fd] = -1;
		return fd;
	}
	def closeAll() {
		for (i = 3; i < fds.length; i++) {
			if (fds[i] >= 0) {
				System.fileClose(fds[i]);
				fds[i] = -1;
			}
		}
	}
}
