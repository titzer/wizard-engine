// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Canonicalizes structurally-equivalent heap type declarations.
component Canon {
	// The global heap type cache for the whole engine.
	def globalCache = HeapTypeCache.new();

	def sigId(sig: SigDecl) -> int {
		if (sig.canon_id >= 0) return sig.canon_id;
		return globalCache.doOne(sig).canon_id;
	}
	def sig(s: SigDecl) -> SigDecl {
		if (s.canon_id >= 0) return s;
		return SigDecl.!(globalCache.doOne(s));
	}
	def sigPR(params: Array<ValueType>, results: Array<ValueType>) -> SigDecl {
		return sig(SigDecl.new(true, ValueTypes.NO_HEAPTYPES, params, results));
	}
}

def hashValueType(t: ValueType) -> int {
	var h = int.view(t.tag);
	match (t) {
		Ref(nullable, heap) => {
			if (nullable) h *= 3;
			match (heap) {
				Struct(sdecl) => h += if(sdecl == null, 40, sdecl.recgrp_index);
				Array(array) => h += if(array == null, 42, array.recgrp_index);
				Func(sig) => h += if(sig == null, 42, sig.recgrp_index);
				Cont(cont) => h += if(cont == null, 42, cont.recgrp_index);
				_ => h += heap.tag;
			}
		}
		_ => ;
	}
	return h;
}
def hashHeapTypeDecl(decl: HeapTypeDecl) -> int {
	match (decl) {
		x: StructDecl => return hashStructDecl(x);
		x: ArrayDecl => return hashArrayDecl(x);
		x: SigDecl => return hashSigDecl(x);
	}
	return -1;
}
def hashSigDecl(sig: SigDecl) -> int {
	if (sig == null) return BpTypeCode.FUNCREF.code;
	if (sig.hash != 0) return sig.hash;
	var h = sig.params.length + if(sig.final, 22); // XXX: hash supertypes?
	for (t in sig.params) h = h * 31 + hashValueType(t);
	for (t in sig.results) h = h * 31 + hashValueType(t);
	return sig.hash = h | int.min;
}
def hashStructDecl(decl: StructDecl) -> int {
	if (decl == null) return BpTypeCode.ANYREF.code; // TODO: STRUCTREF
	if (decl.hash != 0) return decl.hash;
	var h = if(decl.final, 21, 23); // XXX: hash supertypes?
	for (st in decl.field_types) {
		h = h * 31 + hashValueType(st.valtype) + st.pack.tag + if(st.mutable, 33);
	}
	return decl.hash = h | int.min;
}
def hashArrayDecl(decl: ArrayDecl) -> int {
	if (decl == null) return BpTypeCode.ARRAYREF.code;
	if (decl.hash >= 0) return decl.hash;
	var h = if(decl.final, 24, 25); // XXX: hash supertypes?
	for (st in decl.elem_types) {
		h = h * 31 + hashValueType(st.valtype) + st.pack.tag + if(st.mutable, 33);
	}
	return decl.hash = h | int.min;
}
def eqHeapTypeDecl(x: HeapTypeDecl, y: HeapTypeDecl) -> bool {
	if (x.final != y.final) return false;
	if (!Arrays.allTrue(x.supertypes, y.supertypes, HeapType.==)) return false;
	match (x) {
		px: StructDecl => match (y) {
			py: StructDecl => return Arrays.allTrue(px.field_types, py.field_types, StorageType.==);
			_ => return false;
		}
		px: ArrayDecl => match (y) {
			py: ArrayDecl => return Arrays.allTrue(px.elem_types, py.elem_types, StorageType.==);
			_ => return false;
		}
		px: SigDecl => match (y) {
			py: SigDecl => {
				return Arrays.allTrue(px.params, py.params, ValueType.==)
					&& Arrays.allTrue(px.results, py.results, ValueType.==);
			}
			_ => return false;
		}
		px: ContDecl => match (y) {
			py: ContDecl => {
				return px.sig_ref == py.sig_ref;
			}
			_ => return false;
		}
	}
	return false;
}

// Caches structurally-equivalent heap type declarations.
// Only exposed as a separate mechanism for testing.
class HeapTypeCache {
	var uid = 0;
	def recGroups = HashMap<RecGroup, RecGroup>.new(RecGroup.hash, RecGroup.equal);

	// insert a heap type that should not already be in this cache
	def insert(decl: HeapTypeDecl) {
		doOne(decl);
	}
	// Canonicalize a group in {heaptypes[recgrp_start...(recgrp_start + count)]} and update the
	// vector if necessary.
	def doGroup(heaptypes: Vector<HeapTypeDecl>, recgrp_start: int, count: int) {
		if (Trace.canon) Trace.OUT.put2("canon_group(%d, %d)", recgrp_start, count).ln();
		var g = RecGroup.new(count), max = recgrp_start + count;
		for (i = recgrp_start; i < max; i++) g.add(heaptypes[i]);
		var result = g.finish(this);
		for (i = recgrp_start; i < max; i++) {
			var r = result[i - recgrp_start];
			if (Trace.canon) Trace.OUT.put2("  heaptypes[%d] = %q", i, r.render).ln();
			heaptypes[i] = r;
			r.heaptype_index = i;
		}
	}
	// Canonicalize a single (non-recursive) type whose nested types are already canonicalized.
	// More efficient than above.
	def doOne(decl: HeapTypeDecl) -> HeapTypeDecl {
		return RecGroup.new(1).add(decl).finish(this)[0];
	}
}

// Builder and representation of a recursion group.
class RecGroup(length: int) {
	def var hash: int;
	private def decls = Array<HeapTypeDecl>.new(length);
	private var done: Array<HeapTypeDecl>;
	private var cursor: int;

	def add(d: HeapTypeDecl) -> this {
		decls[cursor++] = d;
		hash = hash * 33 + hashHeapTypeDecl(d);
	}
	def addStruct(final: bool, supertypes: Array<HeapType>, fields: Array<StorageType>) -> this {
		var d = decls[cursor++] = StructDecl.new(final, supertypes, fields);
		hash = hash * 33 + hashStructDecl(d);
	}
	def addArray(final: bool, supertypes: Array<HeapType>, elems: Array<StorageType>) -> this {
		var d = decls[cursor++] = ArrayDecl.new(final, supertypes, elems);
		hash = hash * 33 + hashArrayDecl(d);
	}
	def addSig(final: bool, supertypes: Array<HeapType>, params: Array<ValueType>, results: Array<ValueType>) -> this {
		var d = decls[cursor++] = SigDecl.new(final, supertypes, params, results);
		hash = hash * 33 + hashSigDecl(d);
	}

	// Compares this recursion group with another, structurally. Returns {false} if either is
	// not yet {finish()}ed, or if they are structurally different.
	def equal(that: RecGroup) -> bool {
		if (this.length != that.length) return false;
		if (this.hash != that.hash) return false;
		if (this.cursor != that.cursor) return false;
		return Arrays.allTrue(this.decls, that.decls, eqHeapTypeDecl);
	}
	// Finishes a recursion group after all the declarations have been added and returns the
	// (recursive) group of results. If a {cache} is supplied, this will return the canonical
	// group of declarations, adding a new entry if no previous entry existed.
	// Finish is idempotent: repeated calls return the same (cached) result.
	def finish(cache: HeapTypeCache) -> Array<HeapTypeDecl> {
		if (done != null) {
			if (Trace.canon) Trace.OUT.puts("  recgrp done").ln();
			return done;
		}
		if (cache != null) {
			var prev = cache.recGroups[this];
			if (prev != null) {
				if (Trace.canon) Trace.OUT.puts("  recgrp cached").ln();
				return done = prev.done;
			}
		}
		// Create new declarations that will be substituted, leaving the {decls} with
		// declarations that include the original {HeapType.FwRef}s, used for future
		// equivalence checking.
		var done = this.done = Array.new(length);
		for (i < done.length) {
			// XXX: compute openness during hashing
			def isOpenHeapType = HeapType.FwRef.?<HeapType>;
			var d = decls[i], ns = d.supertypes, isOpen = hasOpenHeapType(ns);
			if (isOpen) ns = Arrays.dup(ns);
			match (d) {
				x: StructDecl => {
					if (isOpen || hasOpenStorageType(x.field_types)) {
						d = StructDecl.new(x.final, ns, Arrays.dup(x.field_types));
					}
				}
				x: ArrayDecl => {
					if (isOpen || hasOpenStorageType(x.elem_types)) {
						d = ArrayDecl.new(x.final, ns, Arrays.dup(x.elem_types));
					}
				}
				x: SigDecl => {
					if (isOpen || hasOpenValueType(x.params) || hasOpenValueType(x.results)) {
						d = SigDecl.new(x.final, ns, Arrays.dup(x.params), Arrays.dup(x.results));
					}
				}
				x: ContDecl => {
					if (isOpen || HeapType.FwRef.?(x.sig_ref)) {
						d = ContDecl.new(x.final, ns, x.sig_ref);
					}
				}
			}
			if (Trace.canon) Trace.OUT.put3("%q hash=%d open=%z", d.render, d.hash, d != decls[i]).ln();
			d.recgrp_index = i;
			done[i] = d;
		}
		// substitute all forward refs
		for (i < done.length) {
			var d = done[i];
			ArrayUtil.mapInPlace(d.supertypes, substHeapType);
			match (d) {
				x: StructDecl => ArrayUtil.mapInPlace(x.field_types, substStorageType);
				x: ArrayDecl => ArrayUtil.mapInPlace(x.elem_types, substStorageType);
				x: SigDecl => {
					ArrayUtil.mapInPlace(x.params, substValueType);
					ArrayUtil.mapInPlace(x.results, substValueType);
				}
				x: ContDecl => {
					x.sig_ref = substHeapType(x.sig_ref);
					x.sig = SigDecl.!(x.sig_ref.decl());
				}
			}
			if (d.canon_id < 0 && cache != null) d.canon_id = ++cache.uid;
			if (Trace.canon) Trace.OUT.put1("%q", d.render).ln();
		}
		// cache this recursion group if a cache has been supplied
		if (cache != null) cache.recGroups[this] = this;
		return done;
	}
	private def substValueType(vt: ValueType) -> ValueType {
		match (vt) {
			Ref(nullable, ht) => match (ht) {
				FwRef(index) => return ValueType.Ref(nullable, substHeapType(ht));
				_ => return vt;
			}
			_ => return vt;
		}
	}
	private def substHeapType(ht: HeapType) -> HeapType {
		match (ht) {
			FwRef(index) => match (done[index]) {
				x: StructDecl => return HeapType.Struct(x);
				x: ArrayDecl => return HeapType.Array(x);
				x: SigDecl => return HeapType.Func(x);
				x: ContDecl => return HeapType.Cont(x);
				_ => return ht; // shouldn't happen
			}
			_ => return ht;
		}
	}
	private def substStorageType(st: StorageType) -> StorageType {
		return StorageType(substValueType(st.valtype), st.pack, st.mutable);
	}
	private def hasOpenHeapType(a: Array<HeapType>) -> bool {
		for (x in a) if (HeapType.FwRef.?(x)) return true;
		return false;
	}
	private def hasOpenStorageType(a: Array<StorageType>) -> bool {
		for (x in a) if (isOpenValueType(x.valtype)) return true;
		return false;
	}
	private def hasOpenValueType(a: Array<ValueType>) -> bool {
		for (x in a) if (isOpenValueType(x)) return true;
		return false;
	}
	private def isOpenValueType(vt: ValueType) -> bool {
		match (vt) {
			Ref(nullable, ht) => return HeapType.FwRef.?(ht);
			_ => return false;
		}
	}
}
