// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def env = X86_64MasmRegs.INT_EXEC_ENV;
def PAGE_SIZE_i: int = 4096;
def default_target_code: X86_64SpcModuleCode;
var trampoline_code: X86_64SpcModuleCode;
var trampoline_entries: List<(Array<WhammArg>, Pointer)>;

component X86_64WhammTrampoline {
	// Make a trampoline for the given {probe} by first looking for a trampoline with an identical
	// signature, or generating one if a previous one doesn't exist.
	def makeTrampoline(probe: WhammProbe, ic: X86_64InterpreterCode) {
		if (trampoline_code == default_target_code) allocateCodeForTrampoline();
		var whamm_sig = probe.sig;
		var entry_ptr = getEntry(whamm_sig);
		if (entry_ptr == Pointer.NULL) entry_ptr = genTrampolineCode(whamm_sig, ic);
		probe.trampoline = TargetCode(entry_ptr);
	}
	def genTrampolineCode(whamm_sig: Array<WhammArg>, ic: X86_64InterpreterCode) -> Pointer {
		var w = DataWriter.new();
		var masm = X86_64MacroAssembler.new(w, X86_64MasmRegs.CONFIG);
		var valuerep = masm.valuerep;
		var offsets = masm.getOffsets();
		for (i < whamm_sig.length) {
			var slot_tag_addr = MasmAddr(env.vsp, i * valuerep.slot_size);
			var slot_addr = MasmAddr(env.vsp, i * valuerep.slot_size + valuerep.tag_size);
			match (whamm_sig[i]) {
				FrameAccessor => {
					masm.emit_call_runtime_getFrameAccessorMetaRef();
					masm.emit_mov_m_r(ValueKind.REF, slot_addr, env.runtime_ret0);
					masm.emit_mov_m_i(slot_tag_addr, ValueKind.REF.code);
				}
				Val(val) => {
					var kind: ValueKind;
					match (val) {
						I31(v) => {
							masm.emit_mov_m_d(slot_addr, u64.view(v) << 1);
							kind = ValueKind.REF;
						}
						I32(v) => {
							masm.emit_mov_m_d(slot_addr, v);
							kind = ValueKind.I32;
						}
						I64(v) => {
							masm.emit_mov_m_d(slot_addr, v);
							kind = ValueKind.I64;
						}
						F32(v) => {
							masm.emit_mov_m_d(slot_addr, v);
							kind = ValueKind.F32;
						}
						F64(v) => {
							masm.emit_mov_m_d(slot_addr, v);
							kind = ValueKind.F64;
						}
						V128(l, h) => {
							masm.emit_mov_m_d(slot_addr, l);
							masm.emit_mov_m_d(slot_addr.plus(8), h);
							kind = ValueKind.V128;
						}
						Ref(v) => {
							masm.asm.intK(3);
							masm.emit_mov_r_Object(env.scratch, v);
							masm.emit_mov_m_r(ValueKind.REF, slot_addr, env.scratch);
							kind = ValueKind.REF;
						}
						Cont(cont) => {
							masm.emit_mov_m_d(slot_addr, u64.view(Pointer.atObject(cont.stack) - Pointer.NULL));
							masm.emit_mov_m_d(slot_addr.plus(8), cont.stack.version);
							kind = ValueKind.REF_U64;
						}
					}
					masm.emit_mov_m_i(slot_tag_addr, kind.code);
				}
				Operand(t, i) => {
					var src_addr = MasmAddr(env.vsp, (i - 1) * valuerep.slot_size + valuerep.tag_size);
					var src_tag_addr = MasmAddr(env.vsp, (i - 1) * valuerep.slot_size);
					var kind = ValueTypes.kind(t);
					masm.emit_mov_m_m(kind, slot_addr, src_addr);
					masm.emit_mov_m_m(ValueKind.I32, slot_tag_addr, src_tag_addr); // XXX: tag is only a byte
				}
				Local(t, i) => {
					var src_addr = MasmAddr(env.vfp, i * valuerep.slot_size + valuerep.tag_size);
					var src_tag_addr = MasmAddr(env.vfp, i * valuerep.slot_size);
					var kind = ValueTypes.kind(t);
					masm.emit_mov_m_m(kind, slot_addr, src_addr);
					masm.emit_mov_m_m(ValueKind.I32, slot_tag_addr, src_tag_addr); // XXX: tag is only a byte
				}
				Null => System.error("whamm", "null whamm arg!");
			}
		}
		// Update vsp to reflect the Whamm args that have been pushed.
		masm.emit_addw_r_i(env.vsp, whamm_sig.length * valuerep.slot_size);
		// Jump back to whamm probe handler.
		masm.emit_mov_r_l(env.tmp0, (ic.start + ic.header.whammReentryOffset) - Pointer.NULL);
		masm.emit_jump_r(env.tmp0);
		var addr = setTrampolineCode(masm);
		trampoline_entries = List<(Array<WhammArg>, Pointer)>.new((whamm_sig, addr), trampoline_entries);
		return addr;
	}
}

def getEntry(sig: Array<WhammArg>) -> Pointer {
	// XXX: use a HashMap
	for (entry = trampoline_entries; entry != null; entry = entry.tail) {
		if (Arrays.equal(entry.head.0, sig)) {
			return entry.head.1;
		}
	}
	return Pointer.NULL;
}

def allocateCodeForTrampoline() {
	// Allocate pages to ensure that we have enough space for all trampoline code.
	// TODO -- refactor, put this in the application module and dynamically check if we
	// need more space.
	var code_size = PAGE_SIZE_i * FastIntTuning.whammProbeTrampolineNumPages;
	// Allocate a read/write/execute mapping for code.
	var mapping = Mmap.reserve(u64.!(code_size), Mmap.PROT_WRITE | Mmap.PROT_READ | Mmap.PROT_EXEC);
	var code = X86_64SpcModuleCode.new(mapping);
	RiRuntime.registerUserCode(code);
	code.keepAlive();
	if (Trace.compiler) Trace.OUT.put2("Reserved 0x%x ... 0x%x for WhammProbe trampoline jit code",
		(mapping.range.start - Pointer.NULL), (mapping.range.end - Pointer.NULL)).ln();
	trampoline_code = code;
}

def setTrampolineCode(masm: X86_64MacroAssembler) -> Pointer {
	var addr = trampoline_code.appendCode(masm);
	var end = addr + masm.w.atEnd().pos;
	if (Trace.compiler) {
		Trace.OUT.put1("WhammProbe trampoline code: break *0x%x", addr - Pointer.NULL)
			.put2(" disass 0x%x, 0x%x", addr - Pointer.NULL, end - Pointer.NULL).ln();
		var cur_byte = addr;
		Trace.OUT.puts("JIT code: ");
		while (cur_byte < end) {
			Trace.OUT.put1("%x ", cur_byte.load<u8>());
			cur_byte++;
		}
		Trace.OUT.ln();
	}
	return addr;
}