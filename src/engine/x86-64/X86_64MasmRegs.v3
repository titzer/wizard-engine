// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Describes the set of architectural registers for X86-64 for the macro assembler.
component X86_64MasmRegs {
	// local state used during building of {SET} and {CONFIG}
	def NO_REG = Reg(0);
	private def GPRS = Array<X86_64Gpr>.new(256);	// fast mapping byte -> GPR
	private def XMMS = Array<X86_64Xmmr>.new(256);	// fast mapping byte -> XMM
	private var all = Vector<Reg>.new().grow(32).put(NO_REG);
	private var ints = Vector<Reg>.new().grow(16);
	private var floats = Vector<Reg>.new().grow(16);
	private var names = Vector<string>.new().grow(32).put(null);
	private var num: byte = 1;

	// Registers, roles, and allocation order
	def RAX = addGpr(X86_64Regs.RAX);
	def RCX = addGpr(X86_64Regs.RCX);
	def RDX = addGpr(X86_64Regs.RDX);
	def RBX = addGpr(X86_64Regs.RBX);
	def RSP = addGpr(X86_64Regs.RSP);
	def RBP = addGpr(X86_64Regs.RBP);
	def RSI = addGpr(X86_64Regs.RSI);
	def RDI = addGpr(X86_64Regs.RDI);
	def R8  = addGpr(X86_64Regs.R8);
	def R9  = addGpr(X86_64Regs.R9);
	def R10 = addGpr(X86_64Regs.R10);
	def R11 = addGpr(X86_64Regs.R11);
	def R12 = addGpr(X86_64Regs.R12);
	def R13 = addGpr(X86_64Regs.R13);
	def R14 = addGpr(X86_64Regs.R14);
	def R15 = addGpr(X86_64Regs.R15);

	def XMM0 = addXmmr(X86_64Regs.XMM0);
	def XMM1 = addXmmr(X86_64Regs.XMM1);
	def XMM2 = addXmmr(X86_64Regs.XMM2);
	def XMM3 = addXmmr(X86_64Regs.XMM3);
	def XMM4 = addXmmr(X86_64Regs.XMM4);
	def XMM5 = addXmmr(X86_64Regs.XMM5);
	def XMM6 = addXmmr(X86_64Regs.XMM6);
	def XMM7 = addXmmr(X86_64Regs.XMM7);
	def XMM8 = addXmmr(X86_64Regs.XMM8);
	def XMM9 = addXmmr(X86_64Regs.XMM9);
	def XMM10 = addXmmr(X86_64Regs.XMM10);
	def XMM11 = addXmmr(X86_64Regs.XMM11);
	def XMM12 = addXmmr(X86_64Regs.XMM12);
	def XMM13 = addXmmr(X86_64Regs.XMM13);
	def XMM14 = addXmmr(X86_64Regs.XMM14);
	def XMM15 = addXmmr(X86_64Regs.XMM15);

	def PARAM_GPRS = [RDI, RSI, RDX, RCX, R8, R9];
	def RET_GPRS = [RAX, RDX, RCX, RSI];

	def SET = buildRegSet();
	def CONFIG = buildRegConfig();
	private def t = buildSpcAndIntExecEnvs();
	def SPC_EXEC_ENV = t.0;
	def INT_EXEC_ENV = t.1;
	def SPC_ALLOC = buildSpcAlloc();

	def toGpr(reg: Reg) -> X86_64Gpr { return GPRS[reg.index]; }
	def toXmmr(reg: Reg) -> X86_64Xmmr { return XMMS[reg.index]; }

	private def addGpr(gpr: X86_64Gpr) -> Reg {
		var reg = Reg(num++);
		all.put(reg);
		ints.put(reg);
		names.put(gpr.name64);
		GPRS[reg.index] = gpr;
		return reg;
	}
	private def addXmmr(xmm: X86_64Xmmr) -> Reg {
		var reg = Reg(num++);
		all.put(reg);
		floats.put(reg);
		names.put(xmm.name);
		XMMS[reg.index] = xmm;
		return reg;
	}
	private def buildRegSet() -> RegSet {
		var set = RegSet.new(all.extract(), names.extract());
		return set;
	}
	private def buildRegConfig() -> RegConfig {

		var config = RegConfig.new(SET);
		config.vfp = R11;
		config.scratch = RBP;

		var poolMap = PoolMap.new(SET, 2);
		for (i < poolMap.regToPool.length) poolMap.regToPool[i] = -1;

		for (i < ints.length) {
			var r = ints[i];
			poolMap.regToPool[r.index] = 0;
		}
		for (i < floats.length) {
			var r = floats[i];
			poolMap.regToPool[r.index] = 1;
		}

		poolMap.kindToPool[ValueKind.I32.tag] = 0;
		poolMap.kindToPool[ValueKind.I64.tag] = 0;
		poolMap.kindToPool[ValueKind.F32.tag] = 1;
		poolMap.kindToPool[ValueKind.F64.tag] = 1;
		poolMap.kindToPool[ValueKind.V128.tag] = 1;
		poolMap.kindToPool[ValueKind.REF.tag] = 0;

		config.poolMap = poolMap;
		return config;
	}
	private def buildSpcAndIntExecEnvs() -> (SpcExecEnv, IntExecEnv) {
		var xspc = SpcExecEnv.new();
		var xint = IntExecEnv.new();

		xint.sp			=	xspc.sp			= RSP;
		xint.func_arg		= 	xspc.func_arg		= RDX;
		xint.vsp 		= 	xspc.vsp		= RSI;
		xint.vfp 		= 	xspc.vfp		= R11;
		xint.mem0_base 		= 	xspc.mem0_base		= R10;
		xint.instance 		= 	xspc.instance		= RDI;
		xint.runtime_arg0 	= 	xspc.runtime_arg0	= RSI;
		xint.runtime_arg1 	=	xspc.runtime_arg1 	= RDX;
		xint.runtime_arg2 	= 	xspc.runtime_arg2 	= RCX;
		xint.runtime_arg3 	= 	xspc.runtime_arg3 	= R8;
		xint.runtime_arg4 	= 	xspc.runtime_arg4 	= R9;
		xint.ret_throw 		=	xspc.ret_throw		= RAX;
		xint.runtime_ret0 	= 	xspc.runtime_ret0	= RAX;
		xint.runtime_ret1 	=	xspc.runtime_ret1 	= RDX;
		xint.scratch		=	xspc.scratch		= RBP;

		xint.curpc 		= R15;
		xint.stp		= RBX;
		xint.ip			= RAX;
		xint.func_decl		= R12;
		xint.eip		= R13;
		xint.dispatch		= R14;
		xint.xmm0		= XMM0;
		xint.xmm1		= XMM1;
		xint.xmm2		= XMM2;
		xint.xmm3		= XMM3;
		xint.tmp0		= RCX;
		xint.tmp1		= RDX;
		xint.tmp2		= RBP;
		xint.tmp3		= R8;
		xint.tmp4		= R9;

		def m = MasmAddr(xspc.sp, _);

		xint.accessor_slot	=	xspc.accessor_slot			= m(X86_64InterpreterFrame.accessor.offset);
		xint.instance_slot	=	xspc.instance_slot			= m(X86_64InterpreterFrame.instance.offset);
		xint.mem0_base_slot	=	xspc.mem0_base_slot			= m(X86_64InterpreterFrame.mem0_base.offset);
		xint.pc_slot		=	xspc.pc_slot				= m(X86_64InterpreterFrame.curpc.offset);
		xint.vfp_slot		=	xspc.vfp_slot				= m(X86_64InterpreterFrame.vfp.offset);
		xint.vsp_slot		=	xspc.vsp_slot				= m(X86_64InterpreterFrame.vsp.offset);
		xint.wasm_func_slot	=	xspc.wasm_func_slot			= m(X86_64InterpreterFrame.wasm_func.offset);
		xint.ip_slot		=	xspc.inlined_mem0_base_slot	= m(X86_64InterpreterFrame.ip.offset);
		xint.stp_slot		=	xspc.inlined_instance_slot	= m(X86_64InterpreterFrame.stp.offset);

		xint.func_decl_slot	=   m(X86_64InterpreterFrame.func_decl.offset);
		xint.code_slot		=	m(X86_64InterpreterFrame.code.offset);
		xint.eip_slot		=	m(X86_64InterpreterFrame.eip.offset);

		xint.frameSize		=	xspc.frameSize		= X86_64InterpreterFrame.size;

		return (xspc, xint);
	}

	def buildSpcAlloc() -> RegAlloc {
		var pools = [
			RegPool32.new([RAX, RBX, RSI, RCX, RDX, R8, R9, R12, R13, R14, R15]),
			RegPool32.new([XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6, XMM7, XMM8, XMM9, XMM10, XMM11, XMM12, XMM13, XMM14])
		];
		return RegAlloc.new(CONFIG.poolMap, pools, null);
	}
	def buildIntAlloc() -> RegAlloc {
		var pools = [
			RegPool32.new([RCX, RDX, R8, R9]),
			RegPool32.new([XMM2, XMM3, XMM4, XMM5, XMM6, XMM7, XMM8, XMM9, XMM10, XMM11, XMM12, XMM13, XMM14])
		];
		return RegAlloc.new(CONFIG.poolMap, pools, null);
	}
}
