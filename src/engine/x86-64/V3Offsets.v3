// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def mems = Array<Memory>.new(2);
def RT: X86_64Runtime;
def I: X86_64Interpreter;
// Computes the field offsets of specific V3 fields that are used in generated code.
class V3Offsets {
	private def module = Module.new("<null>");
	private def sig = SigCache.i_i;
	private def decl = FuncDecl.new(0);
	private def i = Instance.new(module, null);
	private def t = Table.new(ValueTypes.FUNCREF, TableDecl.new(ValueTypes.FUNCREF, SizeConstraint(false, 0, Max.Set(1))));
	private def wf = WasmFunction.new(i, decl);
	private def mem = X86_64Memory.new(null);
	private def vs = X86_64Stack.new(2u * 4096u);
	private def acc = X86_64FrameAccessor.new(vs, Pointer.NULL, decl);
	private def ha = HeapArray.new(null, []);
	private def cnt = CountProbe.new();
	private def whamm_Probe = WhammProbe.new(null, []);
	private def cont = Continuation.new(null, null);

	def Function_sig		= int.view(Pointer.atField(wf.sig) - Pointer.atObject(wf));
	def WasmFunction_instance	= int.view(Pointer.atField(wf.instance) - Pointer.atObject(wf));
	def WasmFunction_decl		= int.view(Pointer.atField(wf.decl) - Pointer.atObject(wf));

	def FuncDecl_sig		= int.view(Pointer.atField(decl.sig) - Pointer.atObject(decl));
	def FuncDecl_cur_bytecode	= int.view(Pointer.atField(decl.cur_bytecode) - Pointer.atObject(decl));
	def FuncDecl_orig_bytecode	= int.view(Pointer.atField(decl.orig_bytecode) - Pointer.atObject(decl));
	def FuncDecl_sidetable		= int.view(Pointer.atField(decl.sidetable) - Pointer.atObject(decl));
	def FuncDecl_target_code	= int.view(Pointer.atField(decl.target_code) - Pointer.atObject(decl));
	def FuncDecl_tierup_trigger	= int.view(Pointer.atField(decl.tierup_trigger) - Pointer.atObject(decl));
	def FuncDecl_entry_probed	= int.view(Pointer.atField(decl.entry_probed) - Pointer.atObject(decl));
	def FuncDecl_func_index		= int.view(Pointer.atField(decl.func_index) - Pointer.atObject(decl));

	def SigDecl_params		= int.view(Pointer.atField(sig.params) - Pointer.atObject(sig));
	def SigDecl_results		= int.view(Pointer.atField(sig.results) - Pointer.atObject(sig));

	def Instance_memories		= int.view(Pointer.atField(i.memories) - Pointer.atObject(i));
	def Instance_functions		= int.view(Pointer.atField(i.functions) - Pointer.atObject(i));
	def Instance_tables		= int.view(Pointer.atField(i.tables) - Pointer.atObject(i));
	def Instance_sig_ids		= int.view(Pointer.atField(i.sig_ids) - Pointer.atObject(i));
	def Instance_dropped_elems	= int.view(Pointer.atField(i.dropped_elems) - Pointer.atObject(i));
	def Instance_dropped_data	= int.view(Pointer.atField(i.dropped_data) - Pointer.atObject(i));
	def Instance_module		= int.view(Pointer.atField(i.module) - Pointer.atObject(i));

	def Table_funcs			= int.view(Pointer.atField(t.funcs) - Pointer.atObject(t));
	def Table_elems			= int.view(Pointer.atField(t.elems) - Pointer.atObject(t));
	def Table_ids			= int.view(Pointer.atField(t.ids) - Pointer.atObject(t));

	def Array_length		= int.view(Pointer.atLength(mems) - Pointer.atObject(mems));
	def Array_contents		= int.view(Pointer.atContents(mems) - Pointer.atObject(mems));

	def X86_64Memory_start		= int.view(Pointer.atField(mem.start) - Pointer.atObject(mem));
	def X86_64Memory_limit		= int.view(Pointer.atField(mem.limit) - Pointer.atObject(mem));
	def X86_64Memory_index_tag	= int.view(Pointer.atField(mem.index_tag) - Pointer.atObject(mem));
	def X86_64Memory_num_pages	= int.view(Pointer.atField(mem.num_pages) - Pointer.atObject(mem));

	def X86_64Runtime_curStack	= Pointer.atField(RT.curStack);
	def Interpreter_dispatchTable	= Pointer.atField(I.dispatchTable);
	def X86_64Stack_vsp		= int.view(Pointer.atField(vs.vsp) - Pointer.atObject(vs));
	def X86_64Stack_rsp		= int.view(Pointer.atField(vs.rsp) - Pointer.atObject(vs));
	def X86_64Stack_func		= int.view(Pointer.atField(vs.func) - Pointer.atObject(vs));
	def X86_64Stack_parent_rsp_ptr	= int.view(Pointer.atField(vs.parent_rsp_ptr) - Pointer.atObject(vs));
	def X86_64Stack_parent		= int.view(Pointer.atField(vs.parent) - Pointer.atObject(vs));
	def X86_64Stack_throw_on_resume	= int.view(Pointer.atField(vs.throw_on_resume) - Pointer.atObject(vs));
	def X86_64FrameAccessor_metaRef	= int.view(Pointer.atField(acc.metaRef) - Pointer.atObject(acc));
	def X86_64Stack_state		= int.view(Pointer.atField(vs.state_) - Pointer.atObject(vs));
	def X86_64Stack_return_results	= int.view(Pointer.atField(vs.return_results) - Pointer.atObject(vs));

	def WasmFunction_typeId		= Pointer.atObject(wf).load<int>();

	def HeapArray_vals		= int.view(Pointer.atField(ha.vals) - Pointer.atObject(ha));

	def CountProbe_count		= int.view(Pointer.atField(cnt.count) - Pointer.atObject(cnt));
	def WhammProbe_trampoline	= int.view(Pointer.atField(whamm_Probe.trampoline) - Pointer.atObject(whamm_Probe));
	def WhammProbe_func		= int.view(Pointer.atField(whamm_Probe.func) - Pointer.atObject(whamm_Probe));

	def Module_probes		= int.view(Pointer.atField(module.probes) - Pointer.atObject(module));
	def Continuation_top		= int.view(Pointer.atField(cont.top) - Pointer.atObject(cont));
	def Continuation_bottom		= int.view(Pointer.atField(cont.bottom) - Pointer.atObject(cont));
	def Continuation_used		= int.view(Pointer.atField(cont.used) - Pointer.atObject(cont));

	// Try to future-proof for compressed references someday and use REF_SIZE everywhere
	def REF_SIZE			= byte.!(Pointer.atElement(mems, 1) - Pointer.atElement(mems, 0));
	def INT_SIZE: byte		= 4;
}
