// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Shared runtime routines that are called by both the fast interpreter and JITed code.
component X86_64Runtime {
	def globalFrameDescriptionBuf = StringBuilder.new().grow(256);  // avoid allocations when describing frames
	var curStack: X86_64Stack;

	// Callback for running host functions. Since host functions can trap, throw exceptions, and
	// tail-call other functions, this routine must handle all these cases. Trapping/throwing
	// is handled by returning a non-null {Throwable} and tail-calling a {WasmFunction} is handled
	// by returning that function to the (Wasm) caller, with the stack already containing its arguments.
	def runtime_callHost(stack: X86_64Stack, hf: HostFunction) -> (Throwable, WasmFunction) {
		var stack = stack; // XXX: accept as parameter?
		var args: Range<Value> = stack.popN(hf.sig.params);
		while (hf != null) {
			if (Trace.interpreter) Execute.traceCallHostFunction(hf);
			var result = hf.invoke(args);
			match (result) {
				Throw(thrown) => {
					stack.throw(thrown).prependHostFunction(hf);
					return (thrown, null);
				}
				Value0 => {
					break;
				}
				Value1(val) => {
					stack.push(val);
					break;
				}
				ValueN(vals) => {
					for (a in vals) stack.push(a);
					break;
				}
				TailCall(ntarget, nargs) => {
					match (ntarget) {
						x: HostFunction => { // loop above will handle tail-call to host
							hf = x;
							args = nargs;
							continue;
						}
						x: WasmFunction => { // caller Wasm code will handle tail-call
							for (a in nargs) stack.push(a);
							return (null, x);
						}
					}
				}
			}
		}
		return (null, null);
	}
	//=====================================================================
	// Callbacks for complex bytecodes
	//=====================================================================
	// XXX: Call into {Runtime} directly from interpreter and JIT code
	def runtime_MEMORY_GROW(stack: X86_64Stack, instance: Instance, mem_index: u31) {
		return Runtime.MEMORY_GROW(stack, instance, mem_index);
	}
	def runtime_MEMORY_INIT(stack: X86_64Stack, instance: Instance, data_index: u31, mem_index: u31) -> Throwable {
		return Runtime.MEMORY_INIT(stack, instance, data_index, mem_index);
	}
	def runtime_MEMORY_COPY(stack: X86_64Stack, instance: Instance, mem_index1: u31, mem_index2: u31) -> Throwable {
		return Runtime.MEMORY_COPY(stack, instance, mem_index1, mem_index2);
	}
	def runtime_MEMORY_FILL(stack: X86_64Stack, instance: Instance, mem_index: u31) -> Throwable {
		return Runtime.MEMORY_FILL(stack, instance, mem_index);
	}
	def runtime_GLOBAL_GET(stack: X86_64Stack, instance: Instance, global_index: u31) {
		return Runtime.GLOBAL_GET(stack, instance, global_index);
	}
	def runtime_GLOBAL_SET(stack: X86_64Stack, instance: Instance, global_index: u31) {
		return Runtime.GLOBAL_SET(stack, instance, global_index);
	}
	def runtime_TABLE_GET(stack: X86_64Stack, instance: Instance, table_index: u31) -> Throwable {
		return Runtime.TABLE_GET(stack, instance, table_index);
	}
	def runtime_TABLE_SET(stack: X86_64Stack, instance: Instance, table_index: u31) -> Throwable {
		return Runtime.TABLE_SET(stack, instance, table_index);
	}
	def runtime_TABLE_INIT(stack: X86_64Stack, instance: Instance, elem_index: u31, table_index: u31) -> Throwable {
		return Runtime.TABLE_INIT(stack, instance, elem_index, table_index);
	}
	def runtime_TABLE_COPY(stack: X86_64Stack, instance: Instance, table_index1: u31, table_index2: u31) -> Throwable {
		return Runtime.TABLE_COPY(stack, instance, table_index1, table_index2);
	}
	def runtime_TABLE_GROW(stack: X86_64Stack, instance: Instance, table_index: u31) {
		return Runtime.TABLE_GROW(stack, instance, table_index);
	}
	def runtime_TABLE_FILL(stack: X86_64Stack, instance: Instance, table_index: u31) -> Throwable { // XXX: inline when Value rep known
		return Runtime.TABLE_FILL(stack, instance, table_index);
	}

	def runtime_PROBE_loop(stack: X86_64Stack, func: WasmFunction, pc: int) -> Throwable {
		var frame = TargetFrame(stack.rsp);
		var ret = Instrumentation.fireGlobalProbes(DynamicLoc(func, pc, frame));
		if (ret != null) return stack.throw(ret);
		return ret;
	}
	def runtime_PROBE_instr(stack: X86_64Stack, func: WasmFunction, pc: int) -> Throwable {
		var frame = TargetFrame(stack.rsp);
		var ret = Instrumentation.fireLocalProbes(DynamicLoc(func, pc, frame));
		if (ret != null) return stack.throw(ret);
		return ret;
	}
	def runtime_GET_LOCAL_PROBE(func: WasmFunction, pc: int) -> Probe {
		return func.instance.module.probes[func.decl.func_index][pc];
	}
	def runtime_getFrameAccessorMetaRef() -> FrameAccessorRef {
		var rsp = CiRuntime.callerSp();
		var frame = TargetFrame(rsp);
		return frame.getFrameAccessor().getMetaRef();
	}
	def runtime_TRAP(func: WasmFunction, pc: int, reason: TrapReason) -> Throwable {
		var rsp = CiRuntime.callerSp();
		var stack = curStack.setRsp(rsp);
		if (Debug.runtime) Trace.OUT.put3("runtime_TRAP(%q, @+%d, %s)", func.render, pc, reason.name).ln();
		return stack.trap(reason);
	}
	def runtime_TIERUP(stack: X86_64Stack, func: WasmFunction, pc: int) {
		if (Debug.runtime) Trace.OUT.put3("tierup(wf=0x%x, func=#%d, pc=%d)",
					(Pointer.atObject(func) - Pointer.NULL), func.decl.func_index, pc).ln();
		var osr = Execute.tiering.onTierUp(func, pc);
		for (l = osr.osr_entries; l != null; l = l.tail) {
			if (l.head.0 == pc) {
				var entrypoint = osr.spc_entry + l.head.1;
				if (Debug.runtime) Trace.OUT.put1("  tierup to 0x%x", entrypoint - Pointer.NULL).ln();
				var retaddr_ptr = CiRuntime.callerSp() + -Pointer.SIZE;
				retaddr_ptr.store<Pointer>(entrypoint); // overwrite return address to return to JIT code
				return;
			}
		}
	}
	def runtime_THROW(stack: X86_64Stack, instance: Instance, tag_index: u31) -> Throwable {
		var rsp = CiRuntime.callerSp();
		var stack = stack.setRsp(rsp);
		var tag = instance.tags[tag_index];
		var args = stack.popN(tag.sig.params);
		var ex = Exception.new(tag, args, null);
		return stack.throw(ex);
	}
	def runtime_THROW_REF(stack: X86_64Stack, thrown: Throwable) -> Throwable {
		var rsp = CiRuntime.callerSp();
		var stack = stack.setRsp(rsp);
		return stack.throw(thrown);
	}
	def runtime_CONT_NEW(stack: X86_64Stack, instance: Instance, cont_index: u31) -> Throwable {
		return Runtime.CONT_NEW(stack, instance, cont_index, make_new_x86_stack);
	}
	def runtime_CONT_BIND(stack: X86_64Stack, instance: Instance, in_cont_index: u31, out_cont_index: u31) -> Throwable {
		return Runtime.CONT_BIND(stack, instance, in_cont_index, out_cont_index);
	}
	def runtime_process_resume_throw(stack: X86_64Stack, instance: Instance, cont: Continuation, tag: Tag) -> Pointer {
		var ps = tag.sig.params;
		var vals = stack.popN(ps);
		var ex = Exception.new(tag, vals, null);
		var top = X86_64Stack.!(cont.top);
		top.rsp += Pointer.SIZE;
		top.throw(ex);
		top.throw_on_resume = ex;
		top.state_ = StackState.RUNNING;
		return Pointer.atObject(cont);
	}
	// Unwinds the stack chain and sets {curStack} to the stack that can handle
	// the suspension (or throw an error on the top-most stack if no such handler
	// is found). Then, the tag parameters and the continuation is pushed onto
	// the handler stack.
	def runtime_handle_suspend(stack: X86_64Stack, instance: Instance, tag_id: u31) -> Throwable {
		var stack = X86_64Stack.!(stack);
		var tag = instance.tags[tag_id];
		var vals = stack.popN(tag.sig.params);
		var cont = Runtime.unwindStackChain(stack, instance, tag_id, WasmStack.tryHandleSuspension);
		if (cont == null) return stack.trap(TrapReason.INVALID_SUSPEND);
		// set stack params arity
		stack.params_arity = tag.sig.results.length;
		stack.state_ = StackState.SUSPENDED;
		stack.bind([]); // dummy bind with 0 values to update stack state

		// set up new stack configuration
		curStack = X86_64Stack.!(cont.bottom.parent);
		curStack.state_ = StackState.RUNNING;
		curStack.pushN(vals);
		curStack.push(Value.Ref(cont));
		curStack.rsp += Pointer.SIZE; // pop ret addr
		stack.rsp += -Pointer.SIZE; // reserve space for suspend stub addr
		cont.bottom.parent = null;
		return null;
	}
	// Suspends this stack and sets {curStack} to the stack to switch to (or
	// throw an error on the top-most stack if no such handler is found). Then,
	// the tag parameters and the continuation is pushed onto the target stack.
	def runtime_handle_switch(stack: X86_64Stack, instance: Instance, target_cont_idx: int, tag_id: u31) -> Throwable {
		var stack = X86_64Stack.!(stack);
		var tag = instance.tags[tag_id];

		// unraveling all relevant signatures
		var target_cont_decl = ContDecl.!(instance.heaptypes[target_cont_idx]);
		var target_top_val = target_cont_decl.sig.params[target_cont_decl.sig.params.length - 1];
		var this_cont_decl = ContDecl.!(HeapType.Cont.!(ValueType.Ref.!(target_top_val).heap).cont);
		// unload target continuation and values from {curStack}
		var target_cont = Continuation.!(stack.popObject());
		var target_params = target_cont_decl.sig.params;
		var vals = stack.popN(target_params[0 ... target_params.length - 1]);

		if (target_cont == null) return stack.trap(TrapReason.NULL_DEREF);
		if (target_cont.used) return stack.trap(TrapReason.USED_CONTINUATION);
		target_cont.used = true;

		var this_cont = Runtime.unwindStackChain(stack, instance, tag_id, WasmStack.tryHandleSwitch);
		if (this_cont == null) return stack.trap(TrapReason.INVALID_SUSPEND);
		var prev = X86_64Stack.!(this_cont.bottom);
		// set stack params arity
		stack.params_arity = this_cont_decl.sig.params.length;
		stack.state_ = StackState.SUSPENDED;
		// dummy bind with 0 values to update stack state
		stack.bind([]);

		// overwrite {parent_rsp_ptr}
		var bottom = X86_64Stack.!(target_cont.bottom);
		bottom.parent = prev.parent;
		bottom.parent_rsp_ptr.store<Pointer>(prev.parent_rsp_ptr.load<Pointer>());
		// set up new stack configuration
		prev.parent = null;
		prev.parent_rsp_ptr.store<Pointer>(Pointer.NULL);
		curStack = X86_64Stack.!(target_cont.top);
		curStack.state_ = StackState.RUNNING;
		curStack.pushN(vals);
		curStack.push(Value.Ref(this_cont));

		// reserve space for suspend stub addr
		stack.rsp += -Pointer.SIZE;
		return null;
	}

	//=====================================================================
	// GC proposal callbacks
	//=====================================================================
	def runtime_STRUCT_NEW(stack: X86_64Stack, instance: Instance, struct_index: u31) {
		return Runtime.STRUCT_NEW(stack, instance, struct_index);
	}
	def runtime_STRUCT_NEW_DEFAULT(stack: X86_64Stack, instance: Instance, struct_index: u31) {
		return Runtime.STRUCT_NEW_DEFAULT(stack, instance, struct_index);
	}
	def runtime_STRUCT_GET(stack: X86_64Stack, instance: Instance, struct_index: u31, field_index: u31) -> Throwable {
		return Runtime.STRUCT_GET(stack, instance, struct_index, field_index);
	}
	def runtime_STRUCT_GET_S(stack: X86_64Stack, instance: Instance, struct_index: u31, field_index: u31) -> Throwable {
		return Runtime.STRUCT_GET_S(stack, instance, struct_index, field_index);
	}
	def runtime_STRUCT_GET_U(stack: X86_64Stack, instance: Instance, struct_index: u31, field_index: u31) -> Throwable {
		return Runtime.STRUCT_GET_U(stack, instance, struct_index, field_index);
	}
	def runtime_STRUCT_SET(stack: X86_64Stack, instance: Instance, struct_index: u31, field_index: u31) -> Throwable {
		return Runtime.STRUCT_SET(stack, instance, struct_index, field_index);
	}
	def runtime_ARRAY_NEW(stack: X86_64Stack, instance: Instance, array_index: u31) -> Throwable {
		return Runtime.ARRAY_NEW(stack, instance, array_index);
	}
	def runtime_ARRAY_NEW_DEFAULT(stack: X86_64Stack, instance: Instance, array_index: u31) -> Throwable {
		return Runtime.ARRAY_NEW_DEFAULT(stack, instance, array_index);
	}
	def runtime_ARRAY_GET(stack: X86_64Stack, instance: Instance, array_index: u31) -> Throwable {
		return Runtime.ARRAY_GET(stack, instance, array_index);
	}
	def runtime_ARRAY_GET_S(stack: X86_64Stack, instance: Instance, array_index: u31) -> Throwable {
		return Runtime.ARRAY_GET_S(stack, instance, array_index);
	}
	def runtime_ARRAY_GET_U(stack: X86_64Stack, instance: Instance, array_index: u31) -> Throwable {
		return Runtime.ARRAY_GET_U(stack, instance, array_index);
	}
	def runtime_ARRAY_SET(stack: X86_64Stack, instance: Instance, array_index: u31) -> Throwable {
		return Runtime.ARRAY_SET(stack, instance, array_index);
	}
	def runtime_ARRAY_LEN(stack: X86_64Stack, instance: Instance) -> Throwable {
		return Runtime.ARRAY_LEN(stack, instance);
	}
	def runtime_ARRAY_NEW_FIXED(stack: X86_64Stack, instance: Instance, array_index: u31, length: u31) -> Throwable {
		return Runtime.ARRAY_NEW_FIXED(stack, instance, array_index, length);
	}
	def runtime_ARRAY_NEW_DATA(stack: X86_64Stack, instance: Instance, array_index: u31, data_index: u31) -> Throwable {
		return Runtime.ARRAY_NEW_DATA(stack, instance, array_index, data_index);
	}
	def runtime_ARRAY_NEW_ELEM(stack: X86_64Stack, instance: Instance, array_index: u31, elem_index: u31) -> Throwable {
		return Runtime.ARRAY_NEW_ELEM(stack, instance, array_index, elem_index);
	}
	def runtime_ARRAY_FILL(stack: X86_64Stack, instance: Instance, array_index: u31) -> Throwable {
		return Runtime.ARRAY_FILL(stack, instance, array_index);
	}
	def runtime_ARRAY_COPY(stack: X86_64Stack, instance: Instance, array_index1: u31, array_index2: u31) -> Throwable {
		return Runtime.ARRAY_COPY(stack, instance, array_index1, array_index2);
	}
	def runtime_ARRAY_INIT_DATA(stack: X86_64Stack, instance: Instance, array_index: u31, data_index: u31) -> Throwable {
		return Runtime.ARRAY_INIT_DATA(stack, instance, array_index, data_index);
	}
	def runtime_ARRAY_INIT_ELEM(stack: X86_64Stack, instance: Instance, array_index: u31, elem_index: u31) -> Throwable {
		return Runtime.ARRAY_INIT_ELEM(stack, instance, array_index, elem_index);
	}
	def runtime_MEMORY_ATOMIC_NOTIFY(stack: X86_64Stack, instance: Instance, mem_index: u31, offset: u64) -> Throwable {
		return Runtime.MEMORY_ATOMIC_NOTIFY(stack, instance, mem_index, offset);
	}
	def runtime_MEMORY_ATOMIC_WAIT32(stack: X86_64Stack, instance: Instance, mem_index: u31, offset: u64) -> Throwable {
		return Runtime.MEMORY_ATOMIC_WAIT32(stack, instance, mem_index, offset);
	}
	def runtime_MEMORY_ATOMIC_WAIT64(stack: X86_64Stack, instance: Instance, mem_index: u31, offset: u64) -> Throwable {
		return Runtime.MEMORY_ATOMIC_WAIT64(stack, instance, mem_index, offset);
	}
	def runtime_doCast(stack: X86_64Stack, instance: Instance, nullable: byte, ht_val: int) -> bool {
		var val = stack.peekRef();
		return Runtime.cast(instance, (nullable & 2) != 0, ht_val, val);
	}
	private def make_new_x86_stack() -> X86_64Stack {
		return X86_64Stack.new(EngineOptions.STACK_SIZE.get());
	}
	def runtime_checkFuncSigSubtyping(instance: Instance, sig_index: u31, func: Function) -> Function {
//		Trace.OUT.put2("checkFuncSig %d %q", sig_index, func.sig.render).ln();
		var expected = SigDecl.!(instance.heaptypes[sig_index]);	// cast not strictly necessary; for debugging
		return if(ValueTypes.isAssignableHeap(func.sig, expected), func, null);
	}
}
