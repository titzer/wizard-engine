// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Shared runtime routines that are called by both the fast interpreter and JITed code.
component X86_64Runtime {
	def globalFrameDescriptionBuf = StringBuilder.new().grow(256);  // avoid allocations when describing frames
	var curStack: X86_64Stack;

	// Callback for running host functions. Since host functions can trap, throw exceptions, and
	// tail-call other functions, this routine must handle all these cases. Trapping/throwing
	// is handled by returning a non-null {Throwable} and tail-calling a {WasmFunction} is handled
	// by returning that function to the (Wasm) caller, with the stack already containing its arguments.
	def runtime_callHost(hf: HostFunction) -> (Throwable, WasmFunction) {
		var stack = curStack.setRsp(CiRuntime.callerSp()); // XXX: accept as parameter?
		var args: Range<Value> = stack.popN(hf.sig.params);
		while (hf != null) {
			if (Trace.interpreter) Execute.traceCallHostFunction(hf);
			var result = hf.invoke(args);
			match (result) {
				Throw(thrown) => {
					stack.throw(thrown).prependHostFunction(hf);
					return (thrown, null);
				}
				Value0 => {
					break;
				}
				Value1(val) => {
					stack.push(val);
					break;
				}
				ValueN(vals) => {
					for (a in vals) stack.push(a);
					break;
				}
				TailCall(ntarget, nargs) => {
					match (ntarget) {
						x: HostFunction => { // loop above will handle tail-call to host
							hf = x;
							args = nargs;
							continue;
						}
						x: WasmFunction => { // caller Wasm code will handle tail-call
							for (a in nargs) stack.push(a);
							return (null, x);
						}
					}
				}
			}
		}
		return (null, null);
	}
	//=====================================================================
	// Callbacks for complex bytecodes
	//=====================================================================
	// XXX: Call into {Runtime} directly from interpreter and JIT code
	def runtime_MEMORY_GROW(instance: Instance, mem_index: u31) {
		return Runtime.MEMORY_GROW(curStack, instance, mem_index);
	}
	def runtime_MEMORY_INIT(instance: Instance, data_index: u31, mem_index: u31) -> Throwable {
		return Runtime.MEMORY_INIT(curStack.setRsp(CiRuntime.callerSp()), instance, data_index, mem_index);
	}
	def runtime_MEMORY_COPY(instance: Instance, mem_index1: u31, mem_index2: u31) -> Throwable {
		return Runtime.MEMORY_COPY(curStack.setRsp(CiRuntime.callerSp()), instance, mem_index1, mem_index2);
	}
	def runtime_MEMORY_FILL(instance: Instance, mem_index: u31) -> Throwable {
		return Runtime.MEMORY_FILL(curStack.setRsp(CiRuntime.callerSp()), instance, mem_index);
	}
	def runtime_GLOBAL_GET(instance: Instance, global_index: u31) {
		return Runtime.GLOBAL_GET(curStack, instance, global_index);
	}
	def runtime_GLOBAL_SET(instance: Instance, global_index: u31) {
		return Runtime.GLOBAL_SET(curStack, instance, global_index);
	}
	def runtime_TABLE_GET(instance: Instance, table_index: u31) -> Throwable {
		return Runtime.TABLE_GET(curStack.setRsp(CiRuntime.callerSp()), instance, table_index);
	}
	def runtime_TABLE_SET(instance: Instance, table_index: u31) -> Throwable {
		return Runtime.TABLE_SET(curStack.setRsp(CiRuntime.callerSp()), instance, table_index);
	}
	def runtime_TABLE_INIT(instance: Instance, elem_index: u31, table_index: u31) -> Throwable {
		return Runtime.TABLE_INIT(curStack.setRsp(CiRuntime.callerSp()), instance, elem_index, table_index);
	}
	def runtime_TABLE_COPY(instance: Instance, table_index1: u31, table_index2: u31) -> Throwable {
		return Runtime.TABLE_COPY(curStack.setRsp(CiRuntime.callerSp()), instance, table_index1, table_index2);
	}
	def runtime_TABLE_GROW(instance: Instance, table_index: u31) {
		return Runtime.TABLE_GROW(curStack, instance, table_index);
	}
	def runtime_TABLE_FILL(instance: Instance, table_index: u31) -> Throwable { // XXX: inline when Value rep known
		return Runtime.TABLE_FILL(curStack.setRsp(CiRuntime.callerSp()), instance, table_index);
	}

	def runtime_PROBE_loop(func: WasmFunction, pc: int) -> Throwable {
		var rsp = CiRuntime.callerSp();
		var stack = curStack.setRsp(rsp);
		var frame = TargetFrame(rsp);
		var ret = Instrumentation.fireGlobalProbes(DynamicLoc(func, pc, frame));
		if (ret != null) return stack.throw(ret);
		return ret;
	}
	def runtime_PROBE_instr(func: WasmFunction, pc: int) -> Throwable {
		var rsp = CiRuntime.callerSp();
		var stack = curStack.setRsp(rsp);
		var frame = TargetFrame(rsp);
		var ret = Instrumentation.fireLocalProbes(DynamicLoc(func, pc, frame));
		if (ret != null) return stack.throw(ret);
		return ret;
	}
	def runtime_GET_LOCAL_PROBE(func: WasmFunction, pc: int) -> Probe {
		return func.instance.module.probes[func.decl.func_index][pc];
	}
	def runtime_getFrameAccessorMetaRef() -> FrameAccessorRef {
		var rsp = CiRuntime.callerSp();
		var frame = TargetFrame(rsp);
		return frame.getFrameAccessor().getMetaRef();
	}
	def runtime_TRAP(func: WasmFunction, pc: int, reason: TrapReason) -> Throwable {
		var rsp = CiRuntime.callerSp();
		var stack = curStack.setRsp(rsp);
		if (Debug.runtime) Trace.OUT.put3("runtime_TRAP(%q, @+%d, %s)", func.render, pc, reason.name).ln();
		return stack.trap(reason);
	}
	def runtime_TIERUP(func: WasmFunction, pc: int) {
		if (Debug.runtime) Trace.OUT.put3("tierup(wf=0x%x, func=#%d, pc=%d)",
					(Pointer.atObject(func) - Pointer.NULL), func.decl.func_index, pc).ln();
		var osr = Execute.tiering.onTierUp(func, pc);
		for (l = osr.osr_entries; l != null; l = l.tail) {
			if (l.head.0 == pc) {
				var entrypoint = osr.spc_entry + l.head.1;
				if (Debug.runtime) Trace.OUT.put1("  tierup to 0x%x", entrypoint - Pointer.NULL).ln();
				var retaddr_ptr = CiRuntime.callerSp() + -Pointer.SIZE;
				retaddr_ptr.store<Pointer>(entrypoint); // overwrite return address to return to JIT code
				return;
			}
		}
	}
	def runtime_THROW(instance: Instance, tag_index: u31) -> Throwable {
		var rsp = CiRuntime.callerSp();
		var stack = curStack.setRsp(rsp);
		var tag = instance.tags[tag_index];
		var args = stack.popN(tag.sig.params);
		var ex = Exception.new(tag, args, null);
		return stack.throw(ex);
	}
	def runtime_THROW_REF(thrown: Throwable) -> Throwable {
		var rsp = CiRuntime.callerSp();
		var stack = curStack.setRsp(rsp);
		return stack.throw(thrown);
	}
	def runtime_CONT_NEW(instance: Instance, cont_index: u32) -> Throwable {
		return Runtime.CONT_NEW(curStack.setRsp(CiRuntime.callerSp()), instance, cont_index, make_new_x86_stack);
	}
	def runtime_CONT_BIND(instance: Instance, in_cont_index: u32, out_cont_index: u32) -> Throwable {
		return Runtime.CONT_BIND(curStack.setRsp(CiRuntime.callerSp()), instance, in_cont_index, out_cont_index);
	}
	// Handles all the necessary higher-level stack transfer operations.
	def runtime_process_resume(instance: Instance, cont_index: u32) -> Throwable {
		var stack = X86_64Stack.!(curStack.setRsp(CiRuntime.callerSp()));
		var cont_decl = ContDecl.!(instance.heaptypes[cont_index]);
		var cont_ref = stack.popV(ValueType.Ref(true, HeapType.Cont(cont_decl)));
		var cont = Continuation.!(Value.Ref.!(cont_ref).val);
		
		if (cont == null) return stack.trap(TrapReason.NULL_DEREF);
		if (cont.used) return stack.trap(TrapReason.USED_CONTINUATION);
		cont.used = true;

		var top = X86_64Stack.!(cont.top);
		var vals = stack.popN(cont_decl.sig.params);
		top.pushN(vals);

		cont.bottom.parent = stack;
		top.state_ = StackState.RUNNING;
		stack.state_ = StackState.CALL_CHILD;

		// XXX: use a better way to return values back on stack
		stack.push(Value.Ref(cont));
		return null;
	}
	def runtime_process_resume_throw(instance: Instance, cont_index: u32, tag_index: u32) -> Throwable {
		var stack = X86_64Stack.!(curStack.setRsp(CiRuntime.callerSp()));
		var cont_decl = ContDecl.!(instance.heaptypes[cont_index]);
		var cont_ref = stack.popV(ValueType.Ref(true, HeapType.Cont(cont_decl)));
		var cont = Continuation.!(Value.Ref.!(cont_ref).val);
		
		if (cont == null) return stack.trap(TrapReason.NULL_DEREF);
		if (cont.used) return stack.trap(TrapReason.USED_CONTINUATION);
		cont.used = true;

		var top = X86_64Stack.!(cont.top);
		var tag = instance.tags[tag_index];
		var vals = stack.popN(tag.sig.params);
		var ex = Exception.new(tag, vals, null);
		top.rsp += Pointer.SIZE;
		top.throw(ex);
		top.throw_on_resume = ex;

		cont.bottom.parent = stack;
		top.state_ = StackState.RUNNING;
		stack.state_ = StackState.CALL_CHILD;

		// XXX: use a better way to return values back on stack
		stack.push(Value.Ref(cont));
		return null;
	}
	// Unwinds the stack chain and sets {curStack} to the stack that can handle
	// the suspension (or throw an error on the top-most stack if no such handler
	// is found). Then, the tag parameters and the continuation is pushed onto
	// the handler stack.
	def runtime_handle_suspend(instance: Instance, tag_index: int) -> Throwable {
		var stack = X86_64Stack.!(curStack.setRsp(CiRuntime.callerSp()));
		var tag = instance.tags[tag_index];
		var prev = stack;
		var vals = stack.popN(tag.sig.params);
		while (prev.parent != null) {
			var parent = X86_64Stack.!(prev.parent);
			var frame = TargetFrame(parent.rsp + Pointer.SIZE);
			if (!parent.findSuspendHandler(frame, tag)) { // handler found
				var cont = Continuation.new(stack, prev);
				// set stack params arity
				stack.params_arity = tag.sig.results.length;
				stack.state_ = StackState.SUSPENDED;
				// dummy bind with 0 values to update stack state
				stack.bind([]);
				// set up new stack configuration
				prev.parent = null;
				curStack = parent;
				curStack.state_ = StackState.RUNNING;
				curStack.pushN(vals);
				curStack.push(Value.Ref(cont));
				curStack.rsp += Pointer.SIZE; // pop ret addr
				// reserve space for suspend stub addr
				stack.rsp += -Pointer.SIZE;
				return null;
			}
			prev = parent;
		}
		return stack.trap(TrapReason.INVALID_SUSPEND);
	}

	//=====================================================================
	// GC proposal callbacks
	//=====================================================================
	def runtime_STRUCT_NEW(instance: Instance, struct_index: u31) {
		return Runtime.STRUCT_NEW(curStack, instance, struct_index);
	}
	def runtime_STRUCT_NEW_DEFAULT(instance: Instance, struct_index: u31) {
		return Runtime.STRUCT_NEW_DEFAULT(curStack, instance, struct_index);
	}
	def runtime_STRUCT_GET(instance: Instance, struct_index: u31, field_index: u31) -> Throwable {
		return Runtime.STRUCT_GET(curStack.setRsp(CiRuntime.callerSp()), instance, struct_index, field_index);
	}
	def runtime_STRUCT_GET_S(instance: Instance, struct_index: u31, field_index: u31) -> Throwable {
		return Runtime.STRUCT_GET_S(curStack.setRsp(CiRuntime.callerSp()), instance, struct_index, field_index);
	}
	def runtime_STRUCT_GET_U(instance: Instance, struct_index: u31, field_index: u31) -> Throwable {
		return Runtime.STRUCT_GET_U(curStack.setRsp(CiRuntime.callerSp()), instance, struct_index, field_index);
	}
	def runtime_STRUCT_SET(instance: Instance, struct_index: u31, field_index: u31) -> Throwable {
		return Runtime.STRUCT_SET(curStack.setRsp(CiRuntime.callerSp()), instance, struct_index, field_index);
	}
	def runtime_ARRAY_NEW(instance: Instance, array_index: u31) -> Throwable {
		return Runtime.ARRAY_NEW(curStack.setRsp(CiRuntime.callerSp()), instance, array_index);
	}
	def runtime_ARRAY_NEW_DEFAULT(instance: Instance, array_index: u31) -> Throwable {
		return Runtime.ARRAY_NEW_DEFAULT(curStack.setRsp(CiRuntime.callerSp()), instance, array_index);
	}
	def runtime_ARRAY_GET(instance: Instance, array_index: u31) -> Throwable {
		return Runtime.ARRAY_GET(curStack.setRsp(CiRuntime.callerSp()), instance, array_index);
	}
	def runtime_ARRAY_GET_S(instance: Instance, array_index: u31) -> Throwable {
		return Runtime.ARRAY_GET_S(curStack.setRsp(CiRuntime.callerSp()), instance, array_index);
	}
	def runtime_ARRAY_GET_U(instance: Instance, array_index: u31) -> Throwable {
		return Runtime.ARRAY_GET_U(curStack.setRsp(CiRuntime.callerSp()), instance, array_index);
	}
	def runtime_ARRAY_SET(instance: Instance, array_index: u31) -> Throwable {
		return Runtime.ARRAY_SET(curStack.setRsp(CiRuntime.callerSp()), instance, array_index);
	}
	def runtime_ARRAY_NEW_FIXED(instance: Instance, array_index: u31, length: u31) -> Throwable {
		return Runtime.ARRAY_NEW_FIXED(curStack.setRsp(CiRuntime.callerSp()), instance, array_index, length);
	}
	def runtime_ARRAY_NEW_DATA(instance: Instance, array_index: u31, data_index: u31) -> Throwable {
		return Runtime.ARRAY_NEW_DATA(curStack.setRsp(CiRuntime.callerSp()), instance, array_index, data_index);
	}
	def runtime_ARRAY_NEW_ELEM(instance: Instance, array_index: u31, elem_index: u31) -> Throwable {
		return Runtime.ARRAY_NEW_ELEM(curStack.setRsp(CiRuntime.callerSp()), instance, array_index, elem_index);
	}
	def runtime_ARRAY_FILL(instance: Instance, array_index: u31) -> Throwable {
		return Runtime.ARRAY_FILL(curStack.setRsp(CiRuntime.callerSp()), instance, array_index);
	}
	def runtime_ARRAY_COPY(instance: Instance, array_index1: u31, array_index2: u31) -> Throwable {
		return Runtime.ARRAY_COPY(curStack.setRsp(CiRuntime.callerSp()), instance, array_index1, array_index2);
	}
	def runtime_ARRAY_INIT_DATA(instance: Instance, array_index: u31, data_index: u31) -> Throwable {
		return Runtime.ARRAY_INIT_DATA(curStack.setRsp(CiRuntime.callerSp()), instance, array_index, data_index);
	}
	def runtime_ARRAY_INIT_ELEM(instance: Instance, array_index: u31, elem_index: u31) -> Throwable {
		return Runtime.ARRAY_INIT_ELEM(curStack.setRsp(CiRuntime.callerSp()), instance, array_index, elem_index);
	}
	def runtime_MEMORY_ATOMIC_NOTIFY(instance: Instance, mem_index: u31, offset: u64) -> Throwable {
		return Runtime.MEMORY_ATOMIC_NOTIFY(curStack.setRsp(CiRuntime.callerSp()), instance, mem_index, offset);
	}
	def runtime_MEMORY_ATOMIC_WAIT32(instance: Instance, mem_index: u31, offset: u64) -> Throwable {
		return Runtime.MEMORY_ATOMIC_WAIT32(curStack.setRsp(CiRuntime.callerSp()), instance, mem_index, offset);
	}
	def runtime_MEMORY_ATOMIC_WAIT64(instance: Instance, mem_index: u31, offset: u64) -> Throwable {
		return Runtime.MEMORY_ATOMIC_WAIT64(curStack.setRsp(CiRuntime.callerSp()), instance, mem_index, offset);
	}
	def runtime_doCast(instance: Instance, nullable: byte, htcode: int) -> bool {
		var val = curStack.peekRef();
		return Runtime.cast(instance, (nullable & 2) != 0, htcode, val);
	}
	private def make_new_x86_stack() -> X86_64Stack {
		return X86_64Stack.new(EngineOptions.STACK_SIZE.get());
	}
}

