// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def tuning = X86_64InterpreterTuning.new(); // XXX: reduce duplication with target
def RT: X86_64Runtime;
def IVAR_FRAME = X86_64MasmRegs.IVAR_FRAME;

// Implements a Wasm interpreter by running handwritten x86-64 interpreter loop.
component X86_64Interpreter {
	var dispatchTable: Pointer;
	var interpreterCode: X86_64InterpreterCode;

	def onProbeEnable() {
		if (interpreterCode != null) dispatchTable = interpreterCode.start + interpreterCode.probedDispatchTableOffset;
	}
	def onProbeDisable() {
		if (interpreterCode != null) dispatchTable = interpreterCode.start + interpreterCode.fastDispatchTableOffset;
	}
	def reset() {
		if (RT.valueStack != null) RT.valueStack.sp = RT.valueStack.mapping.range.start;
	}
	def inCode(p: Pointer) -> bool {
		return p >= interpreterCode.start && p < interpreterCode.end;
	}
	def computePCFromFrame(sp: Pointer) -> int {
		if (Debug.interpreter) dumpFrame(sp);
		if (tuning.recordCurIpForTraps) return (sp + IVAR_FRAME.CURPC.disp).load<int>();
		var ip   = (sp + IVAR_FRAME.IP.disp).load<Pointer>();
		var code = Pointer.atContents((sp + IVAR_FRAME.CODE.disp).load<Array<byte>>());
		return int.!(ip - code - 1);
	}
}
def dumpFrame(sp: Pointer) {
	Trace.OUT.put1("WASM_FUNC = %x\n", (sp + IVAR_FRAME.WASM_FUNC.disp).load<u64>());
	Trace.OUT.put1("MEM0_BASE = %x\n", (sp + IVAR_FRAME.MEM0_BASE.disp).load<u64>());
	Trace.OUT.put1("VFP       = %x\n", (sp + IVAR_FRAME.VFP.disp).load<u64>());
	Trace.OUT.put1("VSP       = %x\n", (sp + IVAR_FRAME.VSP.disp).load<u64>());
	Trace.OUT.put1("SIDETABLE = %x\n", (sp + IVAR_FRAME.SIDETABLE.disp).load<u64>());
	Trace.OUT.put1("STP       = %x\n", (sp + IVAR_FRAME.STP.disp).load<u64>());
	Trace.OUT.put1("CODE      = %x\n", (sp + IVAR_FRAME.CODE.disp).load<u64>());
	Trace.OUT.put1("IP        = %x\n", (sp + IVAR_FRAME.IP.disp).load<u64>());
	Trace.OUT.put1("EIP       = %x\n", (sp + IVAR_FRAME.EIP.disp).load<u64>());
	Trace.OUT.put1("FUNC_DECL = %x\n", (sp + IVAR_FRAME.FUNC_DECL.disp).load<u64>());
	Trace.OUT.put1("INSTANCE  = %x\n", (sp + IVAR_FRAME.INSTANCE.disp).load<u64>());
	Trace.OUT.put1("CURPC     = %x\n", (sp + IVAR_FRAME.CURPC.disp).load<u64>());
	Trace.OUT.put1("ACCESSOR  = %x\n", (sp + IVAR_FRAME.ACCESSOR.disp).load<u64>());
	Trace.OUT.outln();
}

// FrameAccessor for probing and debugging.
class X86_64InterpreterFrameAccessor extends X86_64BaseFrameAccessor {
	new(sp: Pointer) super(sp) {
		decl = (sp + IVAR_FRAME.FUNC_DECL.disp).load<FuncDecl>();
	}

	// Returns {true} if this frame has been unwound, either due to returning, a trap, or exception.
	def isUnwound() -> bool {
		if (!tuning.cacheFrameAccessor) return false; // TODO: proper unwound check
		def frame = X86_64MasmRegs.IVAR_FRAME;
		return this != (sp + IVAR_FRAME.ACCESSOR.disp).load<X86_64InterpreterFrameAccessor>();
	}
	// Set the value of a local variable. (dynamically typechecked).
	def setLocal(i: int, v: Value);
	// Set operand at depth {i}, with 0 being the top of the stack, -1 being one lower, etc. (dynamically typechecked).
	def setOperand(i: int, v: Value);
}

// Signal-handling for traps
def ucontext_rip_offset = 168;
def ucontext_rsp_offset = 160;
def SIGFPE  = 8;
def SIGBUS  = 10;
def SIGSEGV = 11;

// Implements the RiUserCode interface in order to add generated machine code to the V3 runtime.
// Also stores several important offsets needed in handling signals.
class X86_64InterpreterCode extends RiUserCode {
	def frameSize = IVAR_FRAME.size;
	var fastDispatchTableOffset: int;	// dispatch table when probes disabled
	var probedDispatchTableOffset: int;	// dispatch table when probes enabled
	var codeStart: int;			// start of all executable code
	var intV3EntryOffset: int;		// entry into interpreter from V3 caller
	var intSpcEntryOffset: int;		// entry into interpreter from SPC caller
	var intIntEntryOffset: int;		// entry into interpreter from interpreter caller
	var oobMemoryHandlerOffset: int;	// handler for signals caused by OOB memory access
	var divZeroHandlerOffset: int;		// handler for signals caused by divide by zero
	var stackOverflowHandlerOffset: int;	// handler for signals caused by (value- or call-) stack overflow
	var spcV3EntryOffset: int;		// SPC jit entry from V3 calling code
	var spcLazyCompileOffset: int;		// SPC lazy compile stub offset
	var spcTierupCompileOffset: int;	// SPC tierup compile stub offset
	var spcTrapsStubOffset: int;		// SPC traps stub offset
	var spcTrapsStubEnd: int;		// SPC traps stub end
	var rdtscOffset: int;			// address of rdstc function
	var codeEnd: int;			// end of all executable code
	var intV3Entry: (WasmFunction, Pointer) -> Throwable;
	var buf = StringBuilder.new().grow(128);  // avoid allocations when describing frames

	new(start: Pointer, end: Pointer) super(start, end) { }

	// Called from V3 runtime upon fatal errors to describe a frame for a stacktrace.
	def describeFrame(ip: Pointer, sp: Pointer, out: (Array<byte>, int, int) -> ()) {
		var msg = "\tin [fast-int] ";
		out(msg, 0, msg.length);
		var instance = (sp + IVAR_FRAME.INSTANCE.disp).load<Instance>();
		var func = (sp + IVAR_FRAME.FUNC_DECL.disp).load<FuncDecl>();
		// TODO: lazy parse of names section may allocate; must avoid this in OOM situation
		func.render(instance.module.names, buf);
		buf.ln().out(out);
		buf.reset();
	}

	// Called from V3 runtime for a frame where {ip} is in interpreter code.
	def nextFrame(ip: Pointer, sp: Pointer) -> (Pointer, Pointer) {
		sp += IVAR_FRAME.size;	 // assume frame is allocated
		ip = sp.load<Pointer>(); // return address on stack
		return (ip + -1, sp + Pointer.SIZE); // XXX: V3 quirk with -1 (use RiOs?)
	}

	// Called from V3 runtime when the garbage collector needs to scan an interpreter stack frame.
	def scanFrame(ip: Pointer, sp: Pointer) {
		// Handle code and interior pointers
		var code_loc = (sp + IVAR_FRAME.CODE.disp);
		var code = code_loc.load<Pointer>();
		var ip_delta = (sp + IVAR_FRAME.IP.disp).load<Pointer>() - code;
		var eip_delta = (sp + IVAR_FRAME.EIP.disp).load<Pointer>() - code;
		RiGc.scanRoot(code_loc);
		var new_code = code_loc.load<Pointer>();
		if (new_code != code) {
			(sp + IVAR_FRAME.IP.disp).store<Pointer>(new_code + ip_delta);
			(sp + IVAR_FRAME.EIP.disp).store<Pointer>(new_code + eip_delta);
		}

		// Handle sidetable and interior pointer
		var sidetable_loc = (sp + IVAR_FRAME.SIDETABLE.disp);
		var sidetable = sidetable_loc.load<Pointer>();
		var stp_delta = (sp + IVAR_FRAME.STP.disp).load<Pointer>() - sidetable;
		RiGc.scanRoot(sidetable_loc);
		var new_sidetable = sidetable_loc.load<Pointer>();
		if (new_sidetable != sidetable) {
			(sp + IVAR_FRAME.STP.disp).store<Pointer>(new_sidetable + stp_delta);
		}

		// Handle other roots in the frame
		RiGc.scanRoot(sp + IVAR_FRAME.WASM_FUNC.disp);
		RiGc.scanRoot(sp + IVAR_FRAME.FUNC_DECL.disp);
		RiGc.scanRoot(sp + IVAR_FRAME.INSTANCE.disp);
		RiGc.scanRoot(sp + IVAR_FRAME.ACCESSOR.disp);
	}

	// Called from V3 runtime to handle an OS-level signal that occurred while {ip} was in interpreter code.
	def handleSignal(signum: int, siginfo: Pointer, ucontext: Pointer, ip: Pointer, sp: Pointer) -> bool {
		var pip = ucontext + ucontext_rip_offset;
		var ip = pip.load<Pointer>();
		if (Debug.interpreter) {
			Trace.OUT.put2("  !signal %d in interpreter @ 0x%x", signum, ip - Pointer.NULL).outln();
		}
		match (signum) {
			SIGFPE => {
				// presume divide/modulus by zero
				pip.store<Pointer>(start + divZeroHandlerOffset);
				return true;
			}
			SIGBUS, SIGSEGV => {
				var addr = RiOs.getAccessAddress(siginfo, ucontext);
				if (RedZones.isInRedZone(addr)) {
					pip.store<Pointer>(start + stackOverflowHandlerOffset);
					return true;
				}
				pip.store<Pointer>(start + oobMemoryHandlerOffset);
				return true;
			}
		}
		return true;
	}
	def setV3Entry() {
		var I: X86_64Interpreter;
		intV3Entry = CiRuntime.forgeClosure<
			X86_64Interpreter,				// closure type
			(/*wf: */ WasmFunction, /*sp: */ Pointer), Throwable>( // param and return types
				start + intV3EntryOffset, I);
	}
	// Get a frame accessor for the probe API.
	def getFrameAccessor(sp: Pointer) -> X86_64InterpreterFrameAccessor {
		var retip = (sp + -Pointer.SIZE).load<Pointer>();
		if (!X86_64Interpreter.inCode(retip)) return null;
		if (tuning.cacheFrameAccessor) {
			var prev = (sp + IVAR_FRAME.ACCESSOR.disp).load<X86_64InterpreterFrameAccessor>();
			if (prev != null) return prev;
			var n = X86_64InterpreterFrameAccessor.new(sp);
			(sp + IVAR_FRAME.ACCESSOR.disp).store<X86_64InterpreterFrameAccessor>(n);
			return n;
		}
		return X86_64InterpreterFrameAccessor.new(sp);
	}
}

def fatal(msg: string) {
	System.error("X86_64InterpreterError", msg);
}

//------------------------------------------------------------------------------------------------
//-- Begin Interpreter Generator
//------------------------------------------------------------------------------------------------

// Describes the register and frame information for the fast interpreter.
class IntExecEnv {
	// Frame information.
	var frameSize: int;
	var accessor_slot: MasmAddr;
	var code_slot: MasmAddr;
	var curpc_slot: MasmAddr;
	var eip_slot: MasmAddr;
	var func_decl_slot: MasmAddr;
	var instance_slot: MasmAddr;
	var ip_slot: MasmAddr;
	var mem0_base_slot: MasmAddr;
	var pc_slot: MasmAddr;
	var sidetable_slot: MasmAddr;
	var stp_slot: MasmAddr;
	var vfp_slot: MasmAddr;
	var vsp_slot: MasmAddr;
	var wasm_func_slot: MasmAddr;

	// Register information.
	var sp: Reg;
	var func_arg: Reg;
	var vsp: Reg;
	var vfp: Reg;
	var stp: Reg;
	var ip: Reg;
	var func_decl: Reg;
	var eip: Reg;
	var mem0_base: Reg;
	var instance: Reg;
	var runtime_arg0: Reg;
	var runtime_arg1: Reg;
	var runtime_arg2: Reg;
	var ret_throw: Reg;
	var dispatch: Reg;
	var curpc: Reg;
	var scratch: Reg;
	var xmm0: Reg;
	var xmm1: Reg;
	var xmm2: Reg;
	var xmm3: Reg;
	var tmp0: Reg;
	var tmp1: Reg;
	var tmp2: Reg;
	var tmp3: Reg;
	var tmp4: Reg;
}

// Internal register configuration for variables live in the interpreter execution context.
def R: X86_64Regs, GPRs = X86_64Regs.GPRs, C: X86_64Conds;
// Helper for various slot addresses.
type SlotAddrs(tag: X86_64Addr, value: X86_64Addr, upper: X86_64Addr) #unboxed { }
class VspHelper(vsp: X86_64Gpr, valuerep: Tagging, depth: int) {
	private def slots = Array<SlotAddrs>.new(depth + 1);
	new() {
		for (i < slots.length) {
			var offset = -1 * i * valuerep.slot_size;
			slots[i] = SlotAddrs(
				vsp.plus(offset),
				vsp.plus(offset + valuerep.tag_size),
				vsp.plus(offset + valuerep.tag_size + 4));
		}
	}
	def [i: int] -> SlotAddrs {
		return slots[0 - i]; // so caller can supply -1
	}
}
// Type table used in decoding local declarations.
def TYPE_HAS_IMM: byte = 0x80;
def TYPE_IS_LEB: byte = 0x40;
def TYPE_IS_ABSTRACT: byte = 0x20;
def LEB_UPPER_BIT: byte = 0x80;
def G = X86_64MasmRegs.toGpr;
def X = X86_64MasmRegs.toXmmr;

// Generates {X86_64InterpreterCode} for X86-64.
class X86_64InterpreterGen(ic: X86_64InterpreterCode, w: DataWriter) {
	def masm = X86_64MacroAssembler.new(w, X86_64MasmRegs.CONFIG);
	def asm = masm.asm;
	def xenv: IntExecEnv = X86_64MasmRegs.INT_EXEC_ENV;

	def offsets = V3Offsets.new();
	def valuerep = Target.tagging;
	def initialSize = w.data.length;

	var oolULeb32Sites = Vector<OutOfLineLEB>.new();
	var firstDispatchOffset: int;
	var dispatchJmpOffset: int = -1;
	var callEntryOffset: int;
	var handlerEndOffset: int;
	var callReentryRef: IcCodeRef;
	var tailCallReentryRef: IcCodeRef;
	var abruptRetLabel = X86_64Label.new();
	var controlFallThruLabel = X86_64Label.new();
	var controlTransferLabel = X86_64Label.new();
	var controlSkipSidetableAndDispatchLabel = X86_64Label.new();
	var probedDispatchTableRef: IcCodeRef;
	var typeTagTableOffset: int;

	def r_v3_wasm_func	= Target.V3_PARAM_GPRS[1];
	def r_v3_vsp		= Target.V3_PARAM_GPRS[2];

	def r_sp		= G(xenv.sp);
	def r_func_arg		= G(xenv.func_arg);
	def r_vsp		= G(xenv.vsp);
	def r_vfp		= G(xenv.vfp);
	def r_stp		= G(xenv.stp);
	def r_ip		= G(xenv.ip);
	def r_func_decl		= G(xenv.func_decl);
	def r_eip		= G(xenv.eip);
	def r_mem0_base		= G(xenv.mem0_base);
	def r_instance		= G(xenv.instance);
	def r_runtime_arg0	= G(xenv.runtime_arg0);
	def r_runtime_arg1	= G(xenv.runtime_arg1);
	def r_runtime_arg2	= G(xenv.runtime_arg2);
	def r_dispatch		= G(xenv.dispatch);
	def r_ret_throw		= G(xenv.ret_throw);
	def r_scratch		= G(xenv.scratch);
	def r_curpc		= G(xenv.curpc);

	def r_tmp0		= G(xenv.tmp0);
	def r_tmp1		= G(xenv.tmp1);
	def r_tmp2		= G(xenv.tmp2);
	def r_tmp3		= G(xenv.tmp3);
	def r_tmp4		= G(xenv.tmp4);

	def r_xmm0		= X(xenv.xmm0);
	def r_xmm1		= X(xenv.xmm1);
	def r_xmm2		= X(xenv.xmm2);
	def r_xmm3		= X(xenv.xmm3);

	def ip_ptr		= r_ip.plus(0);

	def m_wasm_func 	= IVAR_FRAME.WASM_FUNC;
	def m_mem0_base 	= IVAR_FRAME.MEM0_BASE;
	def m_vfp 		= IVAR_FRAME.VFP;
	def m_vsp 		= IVAR_FRAME.VSP;
	def m_sidetable 	= IVAR_FRAME.SIDETABLE;
	def m_stp 		= IVAR_FRAME.STP;
	def m_code 		= IVAR_FRAME.CODE;
	def m_ip 		= IVAR_FRAME.IP;
	def m_eip 		= IVAR_FRAME.EIP;
	def m_func_decl 	= IVAR_FRAME.FUNC_DECL;
	def m_instance 		= IVAR_FRAME.INSTANCE;
	def m_curpc 		= IVAR_FRAME.CURPC;
	def m_accessor 		= IVAR_FRAME.ACCESSOR;

	def k_frame_size	= IVAR_FRAME.size;

	def vsph = VspHelper.new(r_vsp, valuerep, 3);

	def dispatchTables = Array<(byte, IcCodeRef, IcCodeRef)>.new(Opcodes.code_pages.length + 1);

	def ivar_MEM0_BASE	= (r_mem0_base, m_mem0_base);
	def ivar_VFP		= (r_vfp, m_vfp);
	def ivar_VSP		= (r_vsp, m_vsp);
	def ivar_STP		= (r_stp, m_stp);
	def ivar_IP		= (r_ip, m_ip);
	def ivar_EIP		= (r_eip, m_eip);
	def ivar_FUNC_DECL	= (r_func_decl, m_func_decl);
	def ivar_INSTANCE	= (r_instance, m_instance);
	def ivar_CURPC		= (r_curpc, m_curpc);

	def mutable_ivars = [
		ivar_VSP,
		ivar_STP,
		ivar_IP
	];
	def all_ivars = [
		ivar_MEM0_BASE,
		ivar_VFP,
		ivar_VSP,
		ivar_STP,
		ivar_IP,
		ivar_EIP,
		ivar_FUNC_DECL,
		ivar_INSTANCE,
		ivar_CURPC
	];

	new() {
		w.refill = reportOom;
		var p = Patcher.new(w);
		asm.patcher = asm.d.patcher = p;
	}

	def gen(range: MemoryRange) {
		if (tuning.dispatchEntrySize == 4 && (range.start - Pointer.NULL) > int.max) {
			fatal(Strings.format1("global buffer start address of 0x%x out of 31-bit range", (range.start - Pointer.NULL)));
		}
		// Record code start
		ic.codeStart = w.atEnd().pos; // XXX: don't make dispatch tables executable

		// Reserve the type tag table.
		genTypeTagTable();
		// Reserve space for the dispatch tables.
		reserveDispatchTables();
		// Begin code generation
		genInterpreterEntry();
		genOpcodeHandlers();
		handlerEndOffset = w.atEnd().pos;
		// Generate out-of-line code
		genOutOfLineLEBs();
		genTraps();
		ic.codeEnd = w.atEnd().pos;

		if (Debug.interpreter) {
			var s = range.start - Pointer.NULL;
			Trace.OUT
				.put3("Finished asm interpreter @ (0x%x ... 0x%x), used %d bytes\n",
					s, (range.end - Pointer.NULL), w.pos)
				.put1("\tcall entry     = 0x%x\n", s + callEntryOffset);
			for (t in dispatchTables) Trace.OUT.put2("\tdispatch %x    = 0x%x\n", byte.view(t.0), s + t.1.offset);
			Trace.OUT
				.put1("\tfirst dispatch = 0x%x\n", s + firstDispatchOffset)
				.put1("\thandlers end   = 0x%x\n", s + handlerEndOffset)
				.put1("break *0x%x\n", s + dispatchJmpOffset)
				.outln();
		}
		if (w.pos > initialSize) fatal(Strings.format2("need %d bytes for interpreter code, only allocated %d", w.pos, initialSize));
	}
	def genTypeTagTable() {
		if (!tuning.useTypeTagTable) return;
		// Reserve space for the type tag table and fill it out
		typeTagTableOffset = w.pos;
		w.skipN(256);
		for (t in BpTypeCode) {
			var offset = typeTagTableOffset + t.code;
			w.at(offset + LEB_UPPER_BIT).putb(TYPE_IS_LEB);
		}
		for (t in [BpTypeCode.REF_NULL, BpTypeCode.REF]) {
			var offset = typeTagTableOffset + t.code;
			w.at(offset).putb(TYPE_HAS_IMM);
			w.at(offset + LEB_UPPER_BIT).putb(TYPE_HAS_IMM | TYPE_IS_LEB);
		}
		for (t in [BpTypeCode.ABS]) {
			var offset = typeTagTableOffset + t.code;
			w.at(offset).putb(TYPE_HAS_IMM | TYPE_IS_ABSTRACT);
			w.at(offset + LEB_UPPER_BIT).putb(TYPE_IS_ABSTRACT | TYPE_HAS_IMM | TYPE_IS_LEB);
		}
		w.atEnd();
	}
	def reserveDispatchTables() {
		{ // table #0
			w.align(tuning.dispatchEntrySize);
			var ref = IcCodeRef.new(-1);
			ref.offset = ic.fastDispatchTableOffset = w.pos;
			w.skipN(256 * tuning.dispatchEntrySize);
			dispatchTables[0] = (0, ref, null);
		}
		if (tuning.dispatchTableReg) {
			w.align(tuning.dispatchEntrySize);
			probedDispatchTableRef = IcCodeRef.new(-1);
			probedDispatchTableRef.offset = ic.probedDispatchTableOffset = w.pos;
			w.skipN(256 * tuning.dispatchEntrySize);
		}
		for (i < Opcodes.code_pages.length) {
			var page = Opcodes.code_pages[i];
			var ref = IcCodeRef.new(-1);
			w.align(tuning.dispatchEntrySize);
			ref.offset = w.pos;
			w.skipN(256 * tuning.dispatchEntrySize);
			var ref2: IcCodeRef;

			if (!page.oneByte) {
				ref2 = IcCodeRef.new(-1);
				ref2.offset = w.pos;
				w.skipN(256 * tuning.dispatchEntrySize);
			}

			dispatchTables[i + 1] = (page.prefix, ref, ref2);
		}
	}
	def genInterpreterEntry() {
		var shared_entry = X86_64Label.new();
		var tmp = r_scratch;
		{ // Entrypoint for calls coming from V3
			ic.intV3EntryOffset = w.pos;

			// Allocate and initialize interpreter stack frame from incoming V3 params.
			asm.q.sub_r_i(r_sp, k_frame_size);
			genInvalidateFrameAccessor();

			// Spill VSP (value stack pointer)
			asm.movq_m_r(m_vsp, r_v3_vsp);
			// load dispatch table into register
			if (tuning.dispatchTableReg) masm.emit_load_dispatch_table_reg(xenv.dispatch);
			// move WasmFunction into tmp
			asm.movq_r_r(tmp, r_v3_wasm_func);
			restoreReg(r_vsp);
			asm.jmp_rel_near(shared_entry);
		}

		{ // Entrypoint for calls coming from SPC code
			ic.intSpcEntryOffset = w.pos;
			asm.q.sub_r_i(r_sp, k_frame_size);
			genInvalidateFrameAccessor();

			// Spill VSP (value stack pointer)
			asm.movq_m_r(m_vsp, r_vsp);
			// load dispatch table into register
			if (tuning.dispatchTableReg) masm.emit_load_dispatch_table_reg(xenv.dispatch);
			// move WasmFunction into tmp
			asm.movq_r_r(tmp, r_func_arg);
			if (r_vsp != r_vsp) restoreReg(r_vsp);
			asm.jmp_rel_near(shared_entry);
		}

		{ // Re-entry for calls within the interpreter itself
			callReentryRef = IcCodeRef.new(w.pos);
			ic.intIntEntryOffset = w.pos;
			// Allocate actual stack frame
			asm.q.sub_r_i(r_sp, k_frame_size);
			genInvalidateFrameAccessor();
			// Spill the (valid) stack pointer
			saveIVar(r_vsp);
			// WasmFunction is in r1 for interpreter reentry
			asm.movq_r_r(tmp, r_func_arg);
		}

		asm.bind(shared_entry);
		// Load wf.instance, wf.decl and spill
		asm.movq_m_r(m_wasm_func, tmp);
		asm.movq_r_m(r_instance, tmp.plus(offsets.WasmFunction_instance));
		saveIVar(r_instance);
		asm.movq_r_m(r_func_decl, tmp.plus(offsets.WasmFunction_decl));
		saveIVar(r_func_decl);

		// Compute VFP = VSP - func.sig.params.length * SLOT_SIZE
		asm.movq_r_m(tmp, r_func_decl.plus(offsets.FuncDecl_sig));
		asm.movq_r_m(tmp, tmp.plus(offsets.SigDecl_params));
		asm.movd_r_m(tmp, tmp.plus(offsets.Array_length));
		asm.q.shl_r_i(tmp, valuerep.slot_size_log);
		asm.movq_r_r(r_vfp, r_vsp);
		asm.q.sub_r_r(r_vfp, tmp);
		saveIVar(r_vfp);

		tailCallReentryRef = IcCodeRef.new(w.pos);
		// Load &func.cur_bytecode[0] into IP
		asm.movq_r_m(tmp, r_func_decl.plus(offsets.FuncDecl_cur_bytecode));
		asm.movq_m_r(m_code, tmp); // save CODE
		asm.lea(r_ip, tmp.plus(offsets.Array_contents));
		saveIVar(r_ip);
		// Load IP + code.length into EIP
		asm.movd_r_m(r_eip, tmp.plus(offsets.Array_length));
		asm.q.add_r_r(r_eip, r_ip);
		saveIVar(r_eip);
		// Load &func.sidetable[0] into STP
		asm.movq_r_m(r_stp, r_func_decl.plus(offsets.FuncDecl_sidetable));
		asm.movq_m_r(m_sidetable, r_stp); // save SIDETABLE
		asm.q.add_r_i(r_stp, offsets.Array_contents);
		saveIVar(r_stp);

		// Load instance.memories[0].start into MEM0_BASE
		var mem0 = r_mem0_base;
		asm.movq_r_m(mem0, r_instance.plus(offsets.Instance_memories));
		var no_mem = X86_64Label.new();
		asm.movd_r_m(r_tmp0, mem0.plus(offsets.Array_length)); // XXX: always have a memories[0].start to avoid a branch?
		asm.d.cmp_r_i(r_tmp0, 0);
		asm.jc_rel_near(C.Z, no_mem);
		asm.movq_r_m(mem0, mem0.plus(offsets.Array_contents));
		asm.movq_r_m(mem0, mem0.plus(offsets.X86_64Memory_start));
		asm.bind(no_mem);
		saveIVar(r_mem0_base);

		callEntryOffset = w.pos;
		// Decode locals and initialize them. (XXX: special-case 0 locals)
		var countGpr = r_tmp0;
		genReadUleb32(countGpr);
		var start = X86_64Label.new(), done = X86_64Label.new();
		// gen: if (count != 0) do
		asm.d.cmp_r_i(countGpr, 0);
		asm.jc_rel_near(C.Z, done);
		asm.bind(start);
		// gen: var num = read_uleb32()
		var numGpr = r_tmp1;
		genReadUleb32(numGpr);
		// gen: var type = read_type();
		var type_done = X86_64Label.new();
		var typeGpr = r_tmp2;
		asm.d.movbzx_r_m(typeGpr, ip_ptr);	// load first byte
		asm.q.inc_r(r_ip);			// increment pointer
		// check for extended LEB, abstract type, or type with immediate
		var typeTableAddr = int.!((ic.start + typeTagTableOffset) - Pointer.NULL);
		asm.test_m_i(typeGpr.plus(typeTableAddr), TYPE_HAS_IMM | TYPE_IS_LEB);
		var complex_type_decode = X86_64Label.new();
		asm.jc_rel_far(C.NZ, complex_type_decode);
		asm.bind(type_done);

		// gen: if(num != 0) do
		var start2 = X86_64Label.new(), done2 = X86_64Label.new();
		asm.d.cmp_r_i(numGpr, 0);
		asm.jc_rel_near(C.Z, done2);
		asm.bind(start2);
		genTagPushR(typeGpr);			// *(sp) = type
		asm.movq_m_i(vsph[0].value, 0);		// *(sp + 8) = 0
		incrementVsp();	// sp += 1 slot
		// gen: while (--num != 0)
		asm.d.dec_r(numGpr);
		asm.jc_rel_near(C.NZ, start2);

		// gen: while (--count != 0)
		asm.d.dec_r(countGpr);
		asm.jc_rel_near(C.NZ, start);
		asm.bind(done);

		// execute first instruction
		genDispatchOrJumpToDispatch();

		// handle extended LEB, types with immediates, and abstract types
		var type_not_leb = X86_64Label.new();
		asm.bind(complex_type_decode);
		asm.d.test_r_i(typeGpr, LEB_UPPER_BIT);		// check for LEB first
		asm.jc_rel_near(C.Z, type_not_leb);
		genSkipLeb0(r_tmp3);
		asm.bind(type_not_leb);
		// check for types that have an immediate
		asm.d.test_m_i(typeGpr.plus(typeTableAddr), TYPE_HAS_IMM);
		asm.jc_rel_near(C.Z, type_done);
		genReadUleb32(r_tmp3);			// decode offset
		asm.d.test_m_i(typeGpr.plus(typeTableAddr), TYPE_IS_ABSTRACT);
		asm.jc_rel_near(C.Z, type_done);
		// typeGpr = instance.abscodes[index]
		asm.movq_r_m(r_tmp4, r_instance.plus(offsets.Instance_abscodes));
		asm.movbzx_r_m(typeGpr, r_tmp4.plusR(r_tmp3, 1, offsets.Array_contents));
		asm.jmp_rel_near(type_done);
	}

	// Generate all the opcode handlers.
	def genOpcodeHandlers() {
		// Generate the default handler and initialize dispatch tables
		var pos = w.atEnd().pos;
		computeCurIpForTrap(-1);
		asm.jmp_rel_far(newTrapLabel(TrapReason.INVALID_OPCODE));
		for (t in dispatchTables) {
			var ref = t.1;
			for (i < 256) writeDispatchEntry(ref, i, pos);
		}

		// Generate the secondary dispatch tables and point main table at them
		var ref0 = dispatchTables[0].1;
		for (t in dispatchTables) {
			if (t.0 == 0) continue; // main dispatch table
			var pos = w.atEnd().pos;
			computeCurIpForTrap(-1);
			genDispatch(ip_ptr, t.1, true);
			writeDispatchEntry(ref0, t.0, pos);
		}

		// Generate extended LEB landing pads for secondary dispatch tables
		for (i = 1; i < dispatchTables.length; i++) {
			var t = dispatchTables[i];
			var pos = w.pos;
			if (t.2 != null) {
				// TODO: some code in this page are in the upper 128; read extended LEB
				genDispatch(null, t.2, false);
			} else {
				// all codes in this page are in the lower 128; just skip extended LEB
				genSkipLeb();
				asm.d.and_r_i(r_tmp0, 0x7F);
				genDispatch(null, t.1, false);
			}
			for (i = 128; i < 256; i++) {
				writeDispatchEntry(t.1, i, pos);
			}
		}

		genConsts();
		genControlFlow();
		genLocals();
		genCallsAndRet();
		genLoadsAndStores();
		genCompares();
		genI32Arith();
		genI64Arith();
		genExtensions();
		genF32Arith();
		genF64Arith();
		genFloatCmps();
		genGcInstrs();
		genFloatMinAndMax();
		genFloatTruncs();
		genFloatConversions();
		genRuntimeCallOps();
		genSimdInstrs();
		genMisc();
	}
	def writeDispatchEntry(ref: IcCodeRef, opcode: int, offset: int) {
		match (tuning.dispatchEntrySize) {
			2 => w.at(ref.offset + 2 * opcode).put_b16(offset - ref.offset);
			4 => w.at(ref.offset + 4 * opcode).put_b32(int.!((ic.start + offset) - Pointer.NULL));
			8 => w.at(ref.offset + 8 * opcode).put_b64((ic.start + offset) - Pointer.NULL);
		}
		w.atEnd();
	}
	def genConsts() {
		bindHandler(Opcode.I32_CONST); {
			genReadSleb32_inline(r_tmp1);
			genTagPush(BpTypeCode.I32.code);
			asm.movq_m_r(vsph[0].value, r_tmp1);
			incrementVsp();
			endHandler();
		}
		bindHandler(Opcode.I64_CONST); {
			genReadSleb64_inline(r_tmp1);
			genTagPush(BpTypeCode.I64.code);
			asm.movq_m_r(vsph[0].value, r_tmp1);
			incrementVsp();
			endHandler();
		}
		bindHandler(Opcode.F32_CONST); {
			asm.movd_r_m(r_tmp0, ip_ptr);
			asm.add_r_i(r_ip, 4);
			genTagPush(BpTypeCode.F32.code);
			asm.movq_m_r(vsph[0].value, r_tmp0);
			incrementVsp();
			endHandler();
		}
		bindHandler(Opcode.F64_CONST); {
			asm.movq_r_m(r_tmp0, ip_ptr);
			asm.add_r_i(r_ip, 8);
			genTagPush(BpTypeCode.F64.code);
			asm.movq_m_r(vsph[0].value, r_tmp0);
			incrementVsp();
			endHandler();
		}
	}
	def genControlFlow() {
		// NOP: just goes directly back to the dispatch loop
		patchDispatchTable(Opcode.NOP, firstDispatchOffset);

		// UNREACHABLE: abrupt return
		bindHandler(Opcode.UNREACHABLE);
		computeCurIpForTrap(-1);
		asm.jmp_rel_far(newTrapLabel(TrapReason.UNREACHABLE));

		// BLOCK, LOOP, and TRY are nops except skipping the LEB
		bindHandler(Opcode.BLOCK);
		bindHandler(Opcode.LOOP);
		bindHandler(Opcode.TRY);
		genSkipBlockType();
		endHandler();

		var ctl_xfer_nostack = X86_64Label.new();

		// IF: check condition and either fall thru to next bytecode or ctl xfer (without stack copying)
		bindHandler(Opcode.IF);
		decrementVsp();
		asm.d.cmp_m_i(vsph[0].value, 0);
		asm.jc_rel_far(C.Z, ctl_xfer_nostack); // XXX: can be near if no complex block types
		asm.bind(controlFallThruLabel);
		genSkipBlockType();
		asm.bind(controlSkipSidetableAndDispatchLabel);
		genSkipSidetableEntry();
		endHandler();

		// BR_IF: check condition and either fall thru to next bytecode or ctl xfer (with stack copying)
		bindHandler(Opcode.BR_IF);
		decrementVsp();
		asm.d.cmp_m_i(vsph[0].value, 0);
		asm.jc_rel_near(C.Z, controlFallThruLabel);
		// fallthru to BR

		// BR: unconditional ctl xfer with stack copying
		bindHandlerNoAlign(Opcode.BR);
		asm.bind(controlTransferLabel);
		var popcount = r_tmp0;
		var valcount = r_tmp1;
		// if popcount > 0
		asm.movd_r_m(popcount, r_stp.plus(offsets.STP_popcount));
		asm.d.cmp_r_i(popcount, 0);
		asm.jc_rel_near(C.Z, ctl_xfer_nostack);
		// load valcount
		asm.movd_r_m(valcount, r_stp.plus(offsets.STP_valcount));
		// popcount = popcount * SLOT_SIZE
		asm.d.shl_r_i(popcount, valuerep.slot_size_log);
		// vsp -= valcount + popcount (XXX: save an instruction here?)
		asm.q.sub_r_r(r_vsp, popcount);
		asm.movd_r_r(r_scratch, valcount);
		asm.d.shl_r_i(r_scratch, valuerep.slot_size_log);
		asm.q.sub_r_r(r_vsp, r_scratch);
		// do { [vsp] = [vsp + popcount]; vsp++; valcount--; } while (valcount != 0)
		var loop = X86_64Label.new();
		asm.bind(loop);
		genCopySlot(r_vsp.plus(0), r_vsp.plusR(popcount, 1, 0));
		incrementVsp();
		asm.d.dec_r(valcount);
		asm.jc_rel_near(C.G, loop);

		// ELSE: unconditional ctl xfer without stack copying
		bindHandlerNoAlign(Opcode.ELSE);
		asm.bind(ctl_xfer_nostack);
		asm.movwsx_r_m(r_tmp0, r_stp.plus(offsets.STP_pc_delta)); // TODO: 4 bytes
		asm.q.lea(r_ip, r_ip.plusR(r_tmp0, 1, -1)); // adjust ip
		asm.movwsx_r_m(r_tmp1, r_stp.plus(offsets.STP_stp_delta)); // TODO: 4 bytes
		asm.q.lea(r_stp, r_stp.plusR(r_tmp1, 4, 0)); // adjust stp XXX: preshift?
		endHandler();

		// BR_TABLE: adjust STP based on input value and then ctl xfer with stack copying
		bindHandler(Opcode.BR_TABLE);
		var max = r_tmp0, key = r_tmp1;
		asm.movd_r_m(max, r_stp.plus(offsets.STP_pc_delta));
		decrementVsp();
		asm.movd_r_m(key, vsph[0].value);
		asm.d.cmp_r_r(key, max);
		var ok = X86_64Label.new();
		asm.jc_rel_near(C.NC, ok);
		asm.d.inc_r(key);
		asm.movd_r_r(max, key);
		asm.bind(ok);
		asm.q.add_r_r(r_ip, max);
		asm.shl_r_i(max, offsets.STP_entry_size_log);
		asm.q.add_r_r(r_stp, max);
		asm.jmp_rel_near(controlTransferLabel);

		// BR_ON_NULL: check condition and either fall thru to next bytecode or ctl xfer (with stack copying)
		bindHandler(Opcode.BR_ON_NULL);
		asm.q.cmp_m_i(vsph[-1].value, 0);
		asm.jc_rel_near(C.NZ, controlFallThruLabel);
		decrementVsp();
		asm.jmp_rel_near(controlTransferLabel);

		// BR_ON_NON_NULL: check condition and either fall thru to next bytecode or ctl xfer (with stack copying)
		bindHandler(Opcode.BR_ON_NON_NULL);
		asm.q.cmp_m_i(vsph[-1].value, 0);
		asm.jc_rel_near(C.NZ, controlTransferLabel);
		decrementVsp();
		asm.jmp_rel_near(controlFallThruLabel);

		bindHandler(Opcode.SELECT); {
			var label = X86_64Label.new();
			asm.d.cmp_m_i(vsph[-1].value, 0);
			asm.jc_rel_near(C.NZ, label);
			// false case; copy false value down
			if (valuerep.value_size == 16) {
				asm.movdqu_s_m(r_xmm0, vsph[-2].value);
				asm.movdqu_m_s(vsph[-3].value, r_xmm0);
			} else {
				asm.movq_r_m(r_tmp0, vsph[-2].value);
				asm.movq_m_r(vsph[-3].value, r_tmp0);
			}
			// true case, nothing to do
			asm.bind(label);
			adjustVsp(-2);
			endHandler();
		}
		bindHandler(Opcode.SELECT_T); {
			genReadUleb32(r_tmp0); // load # values
			var skip = X86_64Label.new();
			asm.movd_r_r(r_tmp1, r_tmp0);
			asm.bind(skip);  // skip value types
			genSkipLeb();
			asm.dec_r(r_tmp1);
			asm.jc_rel_near(C.NZ, skip);

			asm.d.shl_r_i(r_tmp0, valuerep.slot_size_log);
			asm.movd_r_m(r_tmp1, vsph[-1].value);
			asm.sub_r_r(r_vsp, r_tmp0);
			decrementVsp(); // XXX: combine with above using lea
			asm.d.cmp_r_i(r_tmp1, 0);
			var label = X86_64Label.new();
			asm.jc_rel_near(C.NZ, label);
			// false case; copy false values down
			asm.movq_r_r(r_tmp1, r_vsp);
			asm.q.sub_r_r(r_tmp1, r_tmp0);
			var copy = X86_64Label.new();
			asm.bind(copy);
			if (valuerep.value_size == 16) {
				asm.movdqu_s_m(r_xmm0, r_vsp.plusR(r_tmp0, 1, - valuerep.value_size));
				asm.movdqu_m_s(r_tmp1.plusR(r_tmp0, 1, - valuerep.value_size), r_xmm0);
			} else {
				asm.movq_r_m(r_tmp2, r_vsp.plusR(r_tmp0, 1, - Pointer.SIZE));
				asm.movq_m_r(r_tmp1.plusR(r_tmp0, 1, - Pointer.SIZE), r_tmp2);
			}
			asm.d.sub_r_i(r_tmp0, valuerep.slot_size);
			asm.jc_rel_near(C.NZ, copy);
			// true case, nothing to do
			asm.bind(label);
			endHandler();
		}
	}
	def genLocals() {
		bindHandler(Opcode.DROP);
		decrementVsp();
		endHandler();

		bindHandler(Opcode.LOCAL_GET);
		genReadUleb32(r_tmp0);
		asm.d.shl_r_i(r_tmp0, valuerep.slot_size_log);
		genCopySlot(r_vsp.indirect(), r_vfp.plusR(r_tmp0, 1, 0));
		incrementVsp();
		endHandler();

		bindHandler(Opcode.LOCAL_SET);
		genReadUleb32(r_tmp0);
		asm.d.shl_r_i(r_tmp0, valuerep.slot_size_log);
		decrementVsp();
		asm.movq_r_m(r_tmp1, vsph[0].value);
		asm.movq_m_r(r_vfp.plusR(r_tmp0, 1, valuerep.tag_size), r_tmp1);
		endHandler();

		bindHandler(Opcode.LOCAL_TEE);
		genReadUleb32(r_tmp0);
		asm.d.shl_r_i(r_tmp0, valuerep.slot_size_log);
		asm.movq_r_m(r_tmp1, vsph[-1].value);
		asm.movq_m_r(r_vfp.plusR(r_tmp0, 1, valuerep.tag_size), r_tmp1);
		endHandler();
	}
	def genCallsAndRet() {
		bindHandler(Opcode.END);
		asm.q.cmp_r_r(r_ip, r_eip);
		// XXX: END: jump over inlined dispatch?
		asm.jc_rel(C.L, firstDispatchOffset - w.pos); // jump to dispatch (loop)
		// end falls through to return bytecode

		var callFunction = X86_64Label.new();
		var func_arg = r_func_arg;
		bindHandlerNoAlign(Opcode.RETURN); {
			// Copy return values from stack to overwrite locals
			var cnt = r_tmp0;
			asm.movq_r_m(cnt, r_func_decl.plus(offsets.FuncDecl_sig));
			asm.movq_r_m(cnt, cnt.plus(offsets.SigDecl_results));
			asm.movd_r_m(cnt, cnt.plus(offsets.Array_length));
			genCopyStackValsToVfp(cnt, r_tmp1);
			// Deallocate interpreter frame and return to calling code.
			asm.movd_r_i(Target.V3_RET_GPRS[0], 0);
			genPopFrameAndRet();

			bindHandler(Opcode.CALL);
			computeCurIpForTrap(-1);
			genReadUleb32(r_tmp1);

			asm.movq_r_m(r_tmp0, r_instance.plus(offsets.Instance_functions));
			asm.movq_r_m(func_arg, r_tmp0.plusR(r_tmp1, offsets.REF_SIZE, offsets.Array_contents));

			// call_indirect jumps here
			asm.bind(callFunction);
			computePcFromCurIp();
			saveCallerIVars();
			var call_host = X86_64Label.new();
			asm.d.cmp_m_i(func_arg.plus(0), offsets.WasmFunction_typeId);
			asm.jc_rel_near(C.NZ, call_host);

			// WasmFunction: call into interpreter reentry or target code
			if (tuning.multiTierSupport) {
				var tmp = r_tmp2;
				asm.movq_r_m(tmp, func_arg.plus(offsets.WasmFunction_decl));
				asm.icall_m(tmp.plus(offsets.FuncDecl_target_code));
			} else {
				asm.callr_addr(callReentryRef);
			}
			genAbruptRetCheck();
			restoreCallerIVars();
			if (tuning.multiTierSupport) restoreDispatchTableReg();
			genDispatchOrJumpToDispatch();

			// HostFunction: call into interpreter runtimeCall to enter into V3 code
			asm.bind(call_host);
			callRuntime(refRuntimeCall(RT.runtime_callHost), [func_arg], true);
			restoreCallerIVars();
			genDispatchOrJumpToDispatch();
		}

		var trap_func_invalid = newTrapLabel(TrapReason.FUNC_INVALID);
		var check_sig_mismatch = X86_64Label.new();
		bindHandler(Opcode.CALL_INDIRECT); {
			computeCurIpForTrap(-1);
			var sig_index = r_tmp1, table_index = r_tmp2, func_index = r_tmp0;
			genReadUleb32(sig_index);
			genReadUleb32(table_index);

			decrementVsp();
			asm.movd_r_m(func_index, vsph[0].value);

			var tmp = r_tmp3;
			// load instance.sig_ids[sig_index] into sig_index
			asm.movq_r_m(tmp, r_instance.plus(offsets.Instance_sig_ids));
			asm.movd_r_m(sig_index, tmp.plusR(sig_index, offsets.INT_SIZE, offsets.Array_contents));
			// Bounds-check table.ids[func_index]
			asm.movq_r_m(tmp, r_instance.plus(offsets.Instance_tables));
			var table = table_index;
			asm.movq_r_m(table, tmp.plusR(table_index, offsets.REF_SIZE, offsets.Array_contents));
			asm.movq_r_m(tmp, table.plus(offsets.Table_ids));
			asm.d.cmp_r_m(func_index, tmp.plus(offsets.Array_length));
			asm.jc_rel_far(C.NC, trap_func_invalid);
			// Check table.ids[func_index] == sig_index
			asm.d.cmp_r_m(sig_index, tmp.plusR(func_index, offsets.INT_SIZE, offsets.Array_contents));
			asm.jc_rel_near(C.NZ, check_sig_mismatch);
			// Load table.funcs[func_index] into {func_arg} and jump to calling sequence
			asm.movq_r_m(tmp, table.plus(offsets.Table_funcs));
			asm.movq_r_m(func_arg, tmp.plusR(func_index, offsets.REF_SIZE, offsets.Array_contents));
			asm.jmp_rel_near(callFunction);  // XXX: duplicate call sequence here?
			// Signature check failed. Mismatch or invalid function?
			asm.bind(check_sig_mismatch);
			asm.d.cmp_m_i(tmp.plusR(func_index, offsets.INT_SIZE, offsets.Array_contents), 0);
			asm.jc_rel_far(C.S, trap_func_invalid); // < 0 implies invalid function, not function sig mismatch
			asm.jmp_rel_far(newTrapLabel(TrapReason.FUNC_SIG_MISMATCH));
		}

		bindHandler(Opcode.CALL_REF); {
			computeCurIpForTrap(-1);
			genSkipLeb(); // skip signature index
			decrementVsp();
			asm.movq_r_m(func_arg, vsph[0].value);
			asm.q.cmp_r_i(func_arg, 0);
			asm.jc_rel_near(X86_64Conds.NZ, callFunction);
			asm.jmp_rel_far(newTrapLabel(TrapReason.NULL_DEREF));
		}

		var tailCallFunction = X86_64Label.new();
		bindHandler(Opcode.RETURN_CALL); {
			genReadUleb32(r_tmp1);

			asm.movq_r_m(r_tmp0, r_instance.plus(offsets.Instance_functions));
			asm.movq_r_m(func_arg, r_tmp0.plusR(r_tmp1, offsets.REF_SIZE, offsets.Array_contents));

			// return_tail_call jumps here
			asm.bind(tailCallFunction);
			// Overwrite current locals with outgoing arguments
			var cnt = r_tmp0;
			asm.movq_r_m(cnt, func_arg.plus(offsets.Function_sig));
			asm.movq_r_m(cnt, cnt.plus(offsets.SigDecl_params));
			asm.movd_r_m(cnt, cnt.plus(offsets.Array_length));
			genCopyStackValsToVfp(cnt, r_tmp2);

			// Check if the target function is a WasmFunction or HostFunction
			var tail_call_host = X86_64Label.new();
			asm.d.cmp_m_i(func_arg.plus(0), offsets.WasmFunction_typeId);
			asm.jc_rel_near(C.NZ, tail_call_host);

			// WasmFunction: jump into interpreter reentry
			asm.q.lea(r_vsp, r_vfp.plusR(cnt, 1, 0)); // set VSP properly
			asm.movq_r_m(r_instance, func_arg.plus(offsets.WasmFunction_instance));
			saveIVar(r_instance);
			asm.movq_r_m(r_func_decl, func_arg.plus(offsets.WasmFunction_decl));
			saveIVar(r_func_decl);
			asm.jmp_rel_addr(tailCallReentryRef);

			// HostFunction: jump into interpreter runtimeCall to enter into V3 code
			asm.bind(tail_call_host);

			// Custom code to tail-call the runtime
			asm.movq_r_r(r_tmp3, r_vsp); // save VSP from being overwritten
			var abs = refRuntimeCall(RT.runtime_callHost);
			var args = [func_arg];
			// Generate parallel moves from args into param gprs; assume each src register used only once
			var dst = Array<X86_64Gpr>.new(GPRs.length);
			for (i < args.length) {
				var sreg = args[i];
				var dreg = Target.V3_PARAM_GPRS[i + 1];
				if (sreg != dreg) dst[sreg.regnum] = dreg;
			}
			var stk = Array<i8>.new(GPRs.length);
			for (i < dst.length) orderMoves(dst, stk, i);
			// load interpreter into first arg register
			var interp = Target.V3_PARAM_GPRS[0];
			// save a copy of VSP into interpreter.valueStack.sp
			asm.movq_r_m(r_scratch, absPointer(offsets.Interpreter_valueStack));
			asm.movq_m_r(r_scratch.plus(offsets.ValueStack_sp), r_tmp3);
			genInvalidateFrameAccessor();
			asm.q.add_r_i(r_sp, k_frame_size); // deallocate interpreter frame
			asm.jmp_rel(int.!(abs - (ic.start + w.pos))); // tail-call into runtime
		}

		bindHandler(Opcode.RETURN_CALL_INDIRECT); {
			computeCurIpForTrap(-1);
			var sig_index = r_tmp1, table_index = r_tmp2, func_index = r_tmp0;
			genReadUleb32(sig_index);
			genReadUleb32(table_index);

			decrementVsp();
			asm.movd_r_m(func_index, vsph[0].value);

			var tmp = r_tmp3;
			// load instance.sig_ids[sig_index] into sig_index
			asm.movq_r_m(tmp, r_instance.plus(offsets.Instance_sig_ids));
			asm.movd_r_m(sig_index, tmp.plusR(sig_index, offsets.INT_SIZE, offsets.Array_contents));
			// Bounds-check table.ids[func_index]
			asm.movq_r_m(tmp, r_instance.plus(offsets.Instance_tables));
			var table = table_index;
			asm.movq_r_m(table, tmp.plusR(table_index, offsets.REF_SIZE, offsets.Array_contents));
			asm.movq_r_m(tmp, table.plus(offsets.Table_ids));
			asm.d.cmp_r_m(func_index, tmp.plus(offsets.Array_length));
			asm.jc_rel_far(C.NC, trap_func_invalid);
			// Check table.ids[func_index] == sig_index
			asm.d.cmp_r_m(sig_index, tmp.plusR(func_index, offsets.INT_SIZE, offsets.Array_contents));
			asm.jc_rel_near(C.NZ, check_sig_mismatch);
			// Load table.funcs[func_index] into r1 and jump to calling sequence
			asm.movq_r_m(tmp, table.plus(offsets.Table_funcs));
			asm.movq_r_m(func_arg, tmp.plusR(func_index, offsets.REF_SIZE, offsets.Array_contents));
			asm.jmp_rel_near(tailCallFunction); // XXX: duplicate tail call sequence here?
		}

		bindHandler(Opcode.RETURN_CALL_REF); {
			computeCurIpForTrap(-1);
			genSkipLeb(); // skip signature index
			decrementVsp();
			asm.movq_r_m(func_arg, vsph[0].value);
			asm.q.cmp_r_i(func_arg, 0);
			asm.jc_rel_near(X86_64Conds.NZ, tailCallFunction);
			asm.jmp_rel_far(newTrapLabel(TrapReason.NULL_DEREF));
		}
	}
	def genCopyStackValsToVfp(cnt: X86_64Gpr, i: X86_64Gpr) {
		var done = X86_64Label.new();
		// Copy argument(s) from VSP to VFP.
		asm.cmp_r_i(cnt, 0);
		asm.jc_rel_near(C.Z, done);
		asm.movd_r_i(i, 0);
		asm.d.shl_r_i(cnt, valuerep.slot_size_log);
		asm.q.sub_r_r(r_vsp, cnt);
		var loop = X86_64Label.new();
		// while (i < cnt)
		asm.bind(loop);
		genCopySlot(r_vfp.plusR(i, 1, 0), r_vsp.plusR(i, 1, 0));
		asm.q.add_r_i(i, valuerep.slot_size);
		asm.q.cmp_r_r(i, cnt);
		asm.jc_rel_near(C.L, loop);
		asm.bind(done);
		// set VSP properly
		asm.q.lea(r_vsp, r_vfp.plusR(cnt, 1, 0));
	}
	def genLoadsAndStores() {
		genLoad(Opcode.I32_LOAD, BpTypeCode.I32.code, asm.movd_r_m);
		genLoad(Opcode.I64_LOAD, BpTypeCode.I64.code, asm.movq_r_m);
		genLoad(Opcode.F32_LOAD, BpTypeCode.F32.code, asm.movd_r_m);
		genLoad(Opcode.F64_LOAD, BpTypeCode.F64.code, asm.movq_r_m);
		genLoad(Opcode.I32_LOAD8_S, BpTypeCode.I32.code, asm.movbsx_r_m);
		genLoad(Opcode.I32_LOAD8_U, BpTypeCode.I32.code, asm.movbzx_r_m);
		genLoad(Opcode.I32_LOAD16_S, BpTypeCode.I32.code, asm.movwsx_r_m);
		genLoad(Opcode.I32_LOAD16_U, BpTypeCode.I32.code, asm.movwzx_r_m);
		genLoad(Opcode.I64_LOAD8_S, BpTypeCode.I64.code, asm.movbsx_r_m);
		genLoad(Opcode.I64_LOAD8_U, BpTypeCode.I64.code, asm.movbzx_r_m);
		genLoad(Opcode.I64_LOAD16_S, BpTypeCode.I64.code, asm.movwsx_r_m);
		genLoad(Opcode.I64_LOAD16_U, BpTypeCode.I64.code, asm.movwzx_r_m);
		genLoad(Opcode.I64_LOAD16_U, BpTypeCode.I64.code, asm.movwzx_r_m);
		genLoad(Opcode.I64_LOAD32_S, BpTypeCode.I64.code, masm.emit_movq_32s_r_m);
		genLoad(Opcode.I64_LOAD32_U, BpTypeCode.I64.code, asm.movd_r_m);

		bindHandler(Opcode.I32_STORE);
		bindHandler(Opcode.F32_STORE);
		bindHandler(Opcode.I64_STORE32);
		genStore(asm.movd_m_r);

		bindHandler(Opcode.I64_STORE);
		bindHandler(Opcode.F64_STORE);
		genStore(asm.movq_m_r);

		bindHandler(Opcode.I32_STORE8);
		bindHandler(Opcode.I64_STORE8);
		genStore(asm.movb_m_r);

		bindHandler(Opcode.I32_STORE16);
		bindHandler(Opcode.I64_STORE16);
		genStore(asm.movw_m_r);
	}
	def emitI64_Load32s(dst: X86_64Gpr, addr: X86_64Addr) {
		asm.movd_r_m(dst, addr);
		asm.q.shl_r_i(dst, 32);
		asm.q.sar_r_i(dst, 32);
	}
	def genCompares() {
		// 32-bit integer compares
		for (t in [
			(Opcode.I32_EQ, C.Z),
			(Opcode.I32_NE, C.NZ),
			(Opcode.I32_LT_S, C.L),
			(Opcode.I32_LT_U, C.C),
			(Opcode.I32_GT_S, C.G),
			(Opcode.I32_GT_U, C.A),
			(Opcode.I32_LE_S, C.LE),
			(Opcode.I32_LE_U, C.NA),
			(Opcode.I32_GE_S, C.GE),
			(Opcode.I32_GE_U, C.NC)
		]) {
			bindHandler(t.0);
			asm.movd_r_m(r_tmp0, vsph[-1].value);
			asm.d.cmp_m_r(vsph[-2].value, r_tmp0);
			asm.set_r(t.1, r_tmp0);
			asm.movbzx_r_r(r_tmp0, r_tmp0);
			asm.movd_m_r(vsph[-2].value, r_tmp0);
			decrementVsp();
			endHandler();
		}
		// 64-bit integer compares
		bindHandler(Opcode.REF_EQ); // share handler with I64_EQ
		for (t in [
			(Opcode.I64_EQ, C.Z),
			(Opcode.I64_NE, C.NZ),
			(Opcode.I64_LT_S, C.L),
			(Opcode.I64_LT_U, C.C),
			(Opcode.I64_GT_S, C.G),
			(Opcode.I64_GT_U, C.A),
			(Opcode.I64_LE_S, C.LE),
			(Opcode.I64_LE_U, C.NA),
			(Opcode.I64_GE_S, C.GE),
			(Opcode.I64_GE_U, C.NC)
		]) {
			bindHandler(t.0);
			asm.movq_r_m(r_tmp0, vsph[-1].value);
			asm.q.cmp_m_r(vsph[-2].value, r_tmp0);
			asm.set_r(t.1, r_tmp0);
			asm.movbzx_r_r(r_tmp0, r_tmp0);
			asm.movq_m_r(vsph[-2].value, r_tmp0);
			if (valuerep.tagged) asm.movq_m_i(vsph[-2].tag, BpTypeCode.I32.code);
			decrementVsp();
			endHandler();
		}

	}
	def genI32Arith() {
		bindHandler(Opcode.I32_EQZ); {
			asm.d.test_m_i(vsph[-1].value, -1);
			asm.set_r(C.Z, r_tmp0);
			asm.movbzx_r_r(r_tmp0, r_tmp0);
			asm.movd_m_r(vsph[-1].value, r_tmp0);
			endHandler();
		}
		bindHandler(Opcode.I32_CLZ); {
			asm.movd_r_i(r_tmp1, -1);
			asm.d.bsr_r_m(r_tmp0, vsph[-1].value);
			asm.d.cmov_r(C.Z, r_tmp0, r_tmp1);
			asm.movd_r_i(r_tmp1, 31);
			asm.d.sub_r_r(r_tmp1, r_tmp0);
			asm.movd_m_r(vsph[-1].value, r_tmp1);
			endHandler();
		}
		bindHandler(Opcode.I32_CTZ); {
			asm.d.bsf_r_m(r_tmp0, vsph[-1].value);
			asm.movd_r_i(r_tmp1, 32);
			asm.d.cmov_r(C.Z, r_tmp0, r_tmp1);
			asm.movd_m_r(vsph[-1].value, r_tmp0);
			endHandler();
		}
		bindHandler(Opcode.I32_POPCNT); {
			asm.d.popcnt_r_m(r_tmp0, vsph[-1].value);
			asm.movd_m_r(vsph[-1].value, r_tmp0);
			endHandler();
		}
		bindHandler(Opcode.I32_MUL); {
			asm.movd_r_m(r_tmp0, vsph[-1].value);
			asm.d.imul_r_m(r_tmp0, vsph[-2].value);
			asm.movd_m_r(vsph[-2].value, r_tmp0);
			decrementVsp();
			endHandler();
		}
		for (t in [
			(Opcode.I32_DIV_S, masm.emit_i32_div_s, R.RAX),
			(Opcode.I32_DIV_U, masm.emit_i32_div_u, R.RAX),
			(Opcode.I32_REM_S, masm.emit_i32_rem_s, R.RDX),
			(Opcode.I32_REM_U, masm.emit_i32_rem_u, R.RDX)
		]) {
			bindHandler(t.0);
			computeCurIpForTrap(-1);
			asm.movd_r_m(r_tmp0, vsph[-1].value);
			spillReg(R.RAX);
			spillReg(R.RDX);
			asm.movd_r_m(R.RAX, vsph[-2].value);
			t.1(r_tmp0);
			asm.movd_m_r(vsph[-2].value, t.2);
			restoreReg(R.RAX);
			restoreReg(R.RDX);
			decrementVsp();
			endHandler();
		}
		for (t in [
			(Opcode.I32_ADD, asm.d.add_m_r),
			(Opcode.I32_SUB, asm.d.sub_m_r),
			(Opcode.I32_AND, asm.d.and_m_r),
			(Opcode.I32_OR, asm.d.or_m_r),
			(Opcode.I32_XOR, asm.d.xor_m_r)
		]) {
			bindHandler(t.0);
			asm.movd_r_m(r_tmp0, vsph[-1].value);
			t.1(vsph[-2].value, r_tmp0);
			decrementVsp();
			endHandler();
		}
		for (t in [
			(Opcode.I32_SHL, asm.d.shl_m_cl),
			(Opcode.I32_SHR_S, asm.d.sar_m_cl),
			(Opcode.I32_SHR_U, asm.d.shr_m_cl),
			(Opcode.I32_ROTL, asm.d.rol_m_cl),
			(Opcode.I32_ROTR, asm.d.ror_m_cl)
		]) {
			bindHandler(t.0);
			asm.movd_r_m(R.RCX, vsph[-1].value);
			t.1(vsph[-2].value);
			decrementVsp();
			endHandler();
		}
	}
	def genI64Arith() {
		bindHandler(Opcode.I64_EQZ); {
			asm.q.test_m_i(vsph[-1].value, -1);
			asm.set_r(C.Z, r_tmp0);
			asm.movbzx_r_r(r_tmp0, r_tmp0);
			asm.movd_m_r(vsph[-1].value, r_tmp0);
			if (valuerep.tagged) asm.movd_m_i(vsph[-1].tag, BpTypeCode.I32.code);
			endHandler();
		}
		bindHandler(Opcode.I64_CLZ); {
			asm.movq_r_i(r_tmp1, -1);
			asm.q.bsr_r_m(r_tmp0, vsph[-1].value);
			asm.q.cmov_r(C.Z, r_tmp0, r_tmp1);
			asm.movd_r_i(r_tmp1, 63);
			asm.q.sub_r_r(r_tmp1, r_tmp0);
			asm.movq_m_r(vsph[-1].value, r_tmp1);
			endHandler();
		}
		bindHandler(Opcode.I64_CTZ); {
			asm.q.bsf_r_m(r_tmp0, vsph[-1].value);
			asm.movd_r_i(r_tmp1, 64);
			asm.q.cmov_r(C.Z, r_tmp0, r_tmp1);
			asm.movq_m_r(vsph[-1].value, r_tmp0);
			endHandler();
		}
		bindHandler(Opcode.I64_POPCNT); {
			asm.q.popcnt_r_m(r_tmp0, vsph[-1].value);
			asm.movq_m_r(vsph[-1].value, r_tmp0);
			endHandler();
		}
		bindHandler(Opcode.I64_MUL); {
			asm.movq_r_m(r_tmp0, vsph[-1].value);
			asm.q.imul_r_m(r_tmp0, vsph[-2].value);
			asm.movq_m_r(vsph[-2].value, r_tmp0);
			decrementVsp();
			endHandler();
		}
		for (t in [
			(Opcode.I64_DIV_S, masm.emit_i64_div_s, R.RAX),
			(Opcode.I64_DIV_U, masm.emit_i64_div_u, R.RAX),
			(Opcode.I64_REM_S, masm.emit_i64_rem_s, R.RDX),
			(Opcode.I64_REM_U, masm.emit_i64_rem_u, R.RDX)
		]) {
			bindHandler(t.0);
			computeCurIpForTrap(-1);
			asm.movq_r_m(r_tmp0, vsph[-1].value);
			spillReg(R.RAX);
			spillReg(R.RDX);
			asm.movq_r_m(R.RAX, vsph[-2].value);
			t.1(r_tmp0);
			asm.movq_m_r(vsph[-2].value, t.2);
			restoreReg(R.RAX);
			restoreReg(R.RDX);
			decrementVsp();
			endHandler();
		}
		for (t in [
			(Opcode.I64_ADD, asm.q.add_m_r),
			(Opcode.I64_SUB, asm.q.sub_m_r),
			(Opcode.I64_AND, asm.q.and_m_r),
			(Opcode.I64_OR, asm.q.or_m_r),
			(Opcode.I64_XOR, asm.q.xor_m_r)
		]) {
			bindHandler(t.0);
			asm.movq_r_m(r_tmp0, vsph[-1].value);
			t.1(vsph[-2].value, r_tmp0);
			decrementVsp();
			endHandler();
		}
		for (t in [
			(Opcode.I64_SHL, asm.q.shl_m_cl),
			(Opcode.I64_SHR_S, asm.q.sar_m_cl),
			(Opcode.I64_SHR_U, asm.q.shr_m_cl),
			(Opcode.I64_ROTL, asm.q.rol_m_cl),
			(Opcode.I64_ROTR, asm.q.ror_m_cl)
		]) {
			bindHandler(t.0);
			asm.movq_r_m(R.RCX, vsph[-1].value);
			t.1(vsph[-2].value);
			decrementVsp();
			endHandler();
		}
	}
	def genExtensions() {
		bindHandler(Opcode.I32_WRAP_I64); {
			genTagUpdate(BpTypeCode.I32.code);
			endHandler();
		}
		bindHandler(Opcode.I32_REINTERPRET_F32); {
			genTagUpdate(BpTypeCode.I32.code);
			endHandler();
		}
		bindHandler(Opcode.I64_REINTERPRET_F64); {
			genTagUpdate(BpTypeCode.I64.code);
			endHandler();
		}
		bindHandler(Opcode.F32_REINTERPRET_I32); {
			genTagUpdate(BpTypeCode.F32.code);
			endHandler();
		}
		bindHandler(Opcode.F64_REINTERPRET_I64); {
			genTagUpdate(BpTypeCode.F64.code);
			endHandler();
		}
		bindHandler(Opcode.I32_EXTEND8_S); {
			asm.d.movbsx_r_m(r_tmp0, vsph[-1].value);
			asm.movd_m_r(vsph[-1].value, r_tmp0);
			endHandler();
		}
		bindHandler(Opcode.I32_EXTEND16_S); {
			asm.d.movwsx_r_m(r_tmp0, vsph[-1].value);
			asm.movd_m_r(vsph[-1].value, r_tmp0);
			endHandler();
		}
		bindHandler(Opcode.I64_EXTEND8_S); {
			asm.q.movbsx_r_m(r_tmp0, vsph[-1].value);
			asm.movq_m_r(vsph[-1].value, r_tmp0);
			endHandler();
		}
		bindHandler(Opcode.I64_EXTEND16_S); {
			asm.q.movwsx_r_m(r_tmp0, vsph[-1].value);
			asm.movq_m_r(vsph[-1].value, r_tmp0);
			endHandler();
		}
		bindHandler(Opcode.I64_EXTEND_I32_S);
		bindHandler(Opcode.I64_EXTEND32_S); {
			genTagUpdate(BpTypeCode.I64.code);
			asm.movd_r_m(r_tmp0, vsph[-1].value);
			asm.q.shl_r_i(r_tmp0, 32);
			asm.q.sar_r_i(r_tmp0, 32);
			asm.movq_m_r(vsph[-1].value, r_tmp0);
			endHandler();
		}
		bindHandler(Opcode.I64_EXTEND_I32_U); {
			genTagUpdate(BpTypeCode.I64.code);
			asm.movd_m_i(vsph[-1].value.plus(4), 0); // zero upper portion
			endHandler();
		}
	}
	def genF32Arith() {
		bindHandler(Opcode.F32_ABS); {
			asm.d.and_m_i(vsph[-1].value, 0x7FFFFFFF); // explicit update of upper word
			endHandler();
		}
		bindHandler(Opcode.F32_NEG); {
			asm.d.xor_m_i(vsph[-1].value, 0x80000000); // explicit update of upper word
			endHandler();
		}
		bindHandler(Opcode.F32_ADD); {
			asm.movss_s_m(r_xmm0, vsph[-2].value);
			asm.addss_s_m(r_xmm0, vsph[-1].value);
			asm.movss_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		bindHandler(Opcode.F32_SUB); {
			asm.movss_s_m(r_xmm0, vsph[-2].value);
			asm.subss_s_m(r_xmm0, vsph[-1].value);
			asm.movss_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		bindHandler(Opcode.F32_MUL); {
			asm.movss_s_m(r_xmm0, vsph[-2].value);
			asm.mulss_s_m(r_xmm0, vsph[-1].value);
			asm.movss_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		bindHandler(Opcode.F32_DIV); {
			asm.movss_s_m(r_xmm0, vsph[-2].value);
			asm.divss_s_m(r_xmm0, vsph[-1].value);
			asm.movss_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		bindHandler(Opcode.F32_SQRT); {
			asm.sqrtss_s_m(r_xmm0, vsph[-1].value);
			asm.movss_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
		bindHandler(Opcode.F32_COPYSIGN); {
			asm.movd_r_m(r_tmp0, vsph[-2].value); // XXX: tradeoff between memory operands and extra regs?
			asm.d.and_r_i(r_tmp0, 0x7FFFFFFF);
			asm.movd_r_m(r_tmp1, vsph[-1].value);
			asm.d.and_r_i(r_tmp1, 0x80000000);
			asm.d.or_r_r(r_tmp0, r_tmp1);
			asm.movd_m_r(vsph[-2].value, r_tmp0);
			decrementVsp();
			endHandler();
		}
		for (t in [
			(Opcode.F32_CEIL, X86_64Rounding.TO_POS_INF),
			(Opcode.F32_FLOOR, X86_64Rounding.TO_NEG_INF),
			(Opcode.F32_TRUNC, X86_64Rounding.TO_ZERO),
			(Opcode.F32_NEAREST, X86_64Rounding.TO_NEAREST)
		]) {
			bindHandler(t.0);
			asm.roundss_s_m(r_xmm0, vsph[-1].value, t.1);
			asm.movss_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
	}
	def genF64Arith() {
		bindHandler(Opcode.F64_ABS); {
			asm.d.and_m_i(vsph[-1].upper, 0x7FFFFFFF);
			endHandler();
		}
		bindHandler(Opcode.F64_NEG); {
			asm.d.xor_m_i(vsph[-1].upper, 0x80000000);
			endHandler();
		}
		bindHandler(Opcode.F64_ADD); {
			asm.movsd_s_m(r_xmm0, vsph[-2].value);
			asm.addsd_s_m(r_xmm0, vsph[-1].value);
			asm.movsd_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		bindHandler(Opcode.F64_SUB); {
			asm.movsd_s_m(r_xmm0, vsph[-2].value);
			asm.subsd_s_m(r_xmm0, vsph[-1].value);
			asm.movsd_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		bindHandler(Opcode.F64_MUL); {
				asm.movsd_s_m(r_xmm0, vsph[-2].value);
				asm.mulsd_s_m(r_xmm0, vsph[-1].value);
				asm.movsd_m_s(vsph[-2].value, r_xmm0);
				decrementVsp();
			endHandler();
		}
		bindHandler(Opcode.F64_DIV); {
			asm.movsd_s_m(r_xmm0, vsph[-2].value);
			asm.divsd_s_m(r_xmm0, vsph[-1].value);
			asm.movsd_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		bindHandler(Opcode.F64_SQRT); {
			asm.sqrtsd_s_m(r_xmm0, vsph[-1].value);
			asm.movsd_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
		bindHandler(Opcode.F64_COPYSIGN); {
			asm.movd_r_m(r_tmp0, vsph[-2].upper); // XXX: tradeoff between memory operands and extra regs?
			asm.d.and_r_i(r_tmp0, 0x7FFFFFFF);
			asm.movd_r_m(r_tmp1, vsph[-1].upper);
			asm.d.and_r_i(r_tmp1, 0x80000000);
			asm.d.or_r_r(r_tmp0, r_tmp1);
			asm.movd_m_r(vsph[-2].upper, r_tmp0);
			decrementVsp();
			endHandler();
		}
		for (t in [
			(Opcode.F64_CEIL, X86_64Rounding.TO_POS_INF),
			(Opcode.F64_FLOOR, X86_64Rounding.TO_NEG_INF),
			(Opcode.F64_TRUNC, X86_64Rounding.TO_ZERO),
			(Opcode.F64_NEAREST, X86_64Rounding.TO_NEAREST)
		]) {
			bindHandler(t.0);
			asm.roundsd_s_m(r_xmm0, vsph[-1].value, t.1);
			asm.movsd_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
	}
	def genFloatCmps() {
		var ret_zero = X86_64Label.new(), ret_one = X86_64Label.new();
		for (t in [
			(Opcode.F32_EQ, C.NZ),
			(Opcode.F32_NE, C.Z),
			(Opcode.F32_LT, C.NC),
			(Opcode.F32_GT, C.NA),
			(Opcode.F32_LE, C.A),
			(Opcode.F32_GE, C.C)]) {
			bindHandler(t.0);
			asm.movss_s_m(r_xmm0, vsph[-2].value);
			asm.ucomiss_s_m(r_xmm0, vsph[-1].value);
			asm.jc_rel_near(C.P, if(t.0 == Opcode.F32_NE, ret_one, ret_zero));
			asm.jc_rel_near(t.1, ret_zero);
			asm.jmp_rel_near(ret_one);
		}

		asm.bind(ret_zero);
		decrementVsp();
		genTagUpdate(BpTypeCode.I32.code);
		asm.movd_m_i(vsph[-1].value, 0);
		endHandler();

		asm.bind(ret_one);
		decrementVsp();
		genTagUpdate(BpTypeCode.I32.code);
		asm.movd_m_i(vsph[-1].value, 1);
		endHandler();

		// XXX: too far of a near jump to share these between f32 and f64
		ret_zero = X86_64Label.new();
		ret_one = X86_64Label.new();
		for (t in [
			(Opcode.F64_EQ, C.NZ),
			(Opcode.F64_NE, C.Z),
			(Opcode.F64_LT, C.NC),
			(Opcode.F64_GT, C.NA),
			(Opcode.F64_LE, C.A),
			(Opcode.F64_GE, C.C)]) {
			bindHandler(t.0);
			asm.movsd_s_m(r_xmm0, vsph[-2].value);
			asm.ucomisd_s_m(r_xmm0, vsph[-1].value);
			asm.jc_rel_near(C.P, if(t.0 == Opcode.F64_NE, ret_one, ret_zero));
			asm.jc_rel_near(t.1, ret_zero);
			asm.jmp_rel_near(ret_one);
		}

		asm.bind(ret_zero);
		decrementVsp();
		genTagUpdate(BpTypeCode.I32.code);
		asm.movd_m_i(vsph[-1].value, 0);
		genDispatchOrJumpToDispatch();

		asm.bind(ret_one);
		decrementVsp();
		genTagUpdate(BpTypeCode.I32.code);
		asm.movd_m_i(vsph[-1].value, 1);
		genDispatchOrJumpToDispatch();
	}
	def genGcInstrs() {
		bindHandler(Opcode.I31_NEW); {
			asm.movd_r_m(r_tmp0, vsph[-1].value);
			asm.d.shl_r_i(r_tmp0, 1);
			asm.d.or_r_i(r_tmp0, 1);
			asm.movq_m_r(vsph[-1].value, r_tmp0);
			genTagUpdate(BpTypeCode.I31REF.code);
			endHandler();
		}
		bindHandler(Opcode.I31_GET_S); {
			asm.movd_r_m(r_tmp0, vsph[-1].value);
			asm.d.cmp_r_i(r_tmp0, 0);
			asm.jc_rel_far(X86_64Conds.Z, newTrapLabel(TrapReason.NULL_DEREF));
			asm.d.sar_r_i(r_tmp0, 1);
			asm.movq_m_r(vsph[-1].value, r_tmp0);
			genTagUpdate(BpTypeCode.I32.code);
			endHandler();
		}
		bindHandler(Opcode.I31_GET_U); {
			asm.movd_r_m(r_tmp0, vsph[-1].value);
			asm.d.cmp_r_i(r_tmp0, 0);
			asm.jc_rel_far(X86_64Conds.Z, newTrapLabel(TrapReason.NULL_DEREF));
			asm.d.shr_r_i(r_tmp0, 1);
			asm.movd_m_r(vsph[-1].value, r_tmp0);
			genTagUpdate(BpTypeCode.I32.code);
			endHandler();
		}
		bindHandler(Opcode.ARRAY_LEN); {
			asm.movq_r_m(r_tmp0, vsph[-1].value);
			asm.q.cmp_r_i(r_tmp0, 0);
			asm.jc_rel_far(X86_64Conds.Z, newTrapLabel(TrapReason.NULL_DEREF));
			asm.movq_r_m(r_tmp0, r_tmp0.plus(offsets.HeapArray_vals));
			asm.movd_r_m(r_tmp0, r_tmp0.plus(offsets.Array_length));
			asm.movd_m_r(vsph[-1].value, r_tmp0);
			genTagUpdate(BpTypeCode.I32.code);
			endHandler();
		}
		bindHandler(Opcode.REF_TEST); {
			var nullable_reg = r_tmp3;
			var shared = X86_64Label.new();
			asm.movd_r_i(nullable_reg, 0);
			asm.bind(shared); // shared code between ref.test and ref.test_null
			genReadSleb32_inline(r_tmp1);
			saveCallerIVars();
			callRuntime(refRuntimeCall(RT.runtime_doCast), [r_instance, nullable_reg, r_tmp1], false);
			asm.movbzx_r_r(r_tmp0, Target.V3_RET_GPRS[0]); // XXX: restore just VSP and update first?
			restoreCallerIVars();
			asm.movd_m_r(vsph[-1].value, r_tmp0);
			genTagUpdate(BpTypeCode.I32.code);
			endHandler();
			// ref.test_null jumps back to ref.test
			bindHandler(Opcode.REF_TEST_NULL);
			asm.movd_r_i(nullable_reg, 1);
			asm.jmp_rel_near(shared);
		}
		bindHandler(Opcode.REF_CAST); {
			var nullable_reg = r_tmp3;
			var shared = X86_64Label.new();
			asm.movd_r_i(nullable_reg, 0);
			asm.bind(shared); // shared code between ref.cast and ref.cast_null
			genReadSleb32_inline(r_tmp1);
			saveCallerIVars();
			callRuntime(refRuntimeCall(RT.runtime_doCast), [r_instance, nullable_reg, r_tmp1], false);
			asm.cmpb_r_i(Target.V3_RET_GPRS[0], 0);
			asm.jc_rel_far(C.Z, newTrapLabel(TrapReason.FAILED_CAST));
			restoreCallerIVars();
			endHandler();
			// ref.cast_null jumps back to ref.test
			bindHandler(Opcode.REF_CAST_NULL);
			asm.movd_r_i(nullable_reg, 1);
			asm.jmp_rel_near(shared);
		}
		for (t in [
			(true, Opcode.BR_ON_CAST, Opcode.BR_ON_CAST_NULL),
			(false, Opcode.BR_ON_CAST_FAIL, Opcode.BR_ON_CAST_FAIL_NULL)]) {
			bindHandler(t.1);
			var nullable_reg = r_tmp3;
			var shared = X86_64Label.new();
			asm.movd_r_i(nullable_reg, 0);
			asm.bind(shared); 			// shared code between br_on_cast and br_on_cast_null
			genSkipLeb();            		// skip target label to get to heap type
			genReadSleb32_inline(r_tmp1);	// read heaptype
			saveCallerIVars();
			callRuntime(refRuntimeCall(RT.runtime_doCast), [r_instance, nullable_reg, r_tmp1], false);
			asm.cmpb_r_i(Target.V3_RET_GPRS[0], 0);
			restoreCallerIVars();
			var cond = if(t.0, C.Z, C.NZ); // TODO: br_on_cast/fail only differ on condition
			asm.jc_rel_far(cond, controlSkipSidetableAndDispatchLabel); // XXX: relies on no changes to flags
			restoreIpFromCurIp(-1); // TODO: sidetable entries are relative to current IP; we are at nextIP
			asm.jmp_rel_far(controlTransferLabel);
			// br_on_cast_null jumps back to br_on_cast
			bindHandler(t.2);
			asm.movd_r_i(nullable_reg, 1);
			asm.jmp_rel_near(shared);
		}
		bindHandler(Opcode.REF_AS_NON_NULL); {
			computeCurIpForTrap(-1);
			asm.q.cmp_m_i(vsph[-1].value, 0);
			asm.jc_rel_far(C.Z, newTrapLabel(TrapReason.NULL_DEREF));
			endHandler();
		}
		// internalize/externalize are nops.
		patchDispatchTable(Opcode.EXTERN_INTERNALIZE, firstDispatchOffset);
		patchDispatchTable(Opcode.EXTERN_EXTERNALIZE, firstDispatchOffset);
	}
	def genMisc() {
		bindHandler(Opcode.MEMORY_SIZE); {
			genReadUleb32(r_tmp1);
			asm.movq_r_m(r_tmp0, r_instance.plus(offsets.Instance_memories));
			asm.movq_r_m(r_tmp0, r_tmp0.plusR(r_tmp1, offsets.REF_SIZE, offsets.Array_contents));
			asm.movq_r_m(r_tmp1, r_tmp0.plus(offsets.X86_64Memory_limit));
			asm.movq_r_m(r_tmp0, r_tmp0.plus(offsets.X86_64Memory_start));
			asm.q.sub_r_r(r_tmp1, r_tmp0);
			asm.q.shr_r_i(r_tmp1, 16);
			genTagPush(BpTypeCode.I32.code);
			asm.movq_m_r(vsph[0].value, r_tmp1);
			incrementVsp();
			endHandler();
		}
		bindHandler(Opcode.REF_NULL); {
			genSkipLeb();
			genTagPush(BpTypeCode.REF_NULL.code);
			asm.movq_m_i(vsph[0].value, 0);
			incrementVsp();
			endHandler();
		}
		bindHandler(Opcode.REF_IS_NULL); {
			asm.d.test_m_i(vsph[-1].value, -1);
			asm.set_r(C.Z, r_tmp0);
			asm.movbzx_r_r(r_tmp0, r_tmp0);
			if (valuerep.tagged) asm.movd_m_i(vsph[-1].tag, i7.view(BpTypeCode.I32.code));
			asm.movd_m_r(vsph[-1].value, r_tmp0);
			endHandler();
		}
		bindHandler(Opcode.REF_FUNC); {
			genReadUleb32(r_tmp1);
			asm.movq_r_m(r_tmp0, r_instance.plus(offsets.Instance_functions));
			asm.movq_r_m(r_tmp0, r_tmp0.plusR(r_tmp1, offsets.REF_SIZE, offsets.Array_contents));
			genTagPush(BpTypeCode.FUNCREF.code);
			asm.movq_m_r(vsph[0].value, r_tmp0);
			incrementVsp();
			endHandler();
		}
		bindHandler(Opcode.DATA_DROP); {
			genReadUleb32(r_tmp1);
			asm.movq_r_m(r_tmp0, r_instance.plus(offsets.Instance_dropped_data));
			asm.movb_m_i(r_tmp0.plusR(r_tmp1, 1, offsets.Array_contents), 1);
			endHandler();
		}
		bindHandler(Opcode.ELEM_DROP); {
			genReadUleb32(r_tmp1);
			asm.movq_r_m(r_tmp0, r_instance.plus(offsets.Instance_dropped_elems));
			asm.movb_m_i(r_tmp0.plusR(r_tmp1, 1, offsets.Array_contents), 1);
			endHandler();
		}
		bindHandler(Opcode.TABLE_SIZE); {
			genReadUleb32(r_tmp1);
			asm.movq_r_m(r_tmp0, r_instance.plus(offsets.Instance_tables));
			asm.movq_r_m(r_tmp0, r_tmp0.plusR(r_tmp1, offsets.REF_SIZE, offsets.Array_contents));
			asm.movq_r_m(r_tmp0, r_tmp0.plus(offsets.Table_elems));
			asm.movq_r_m(r_tmp0, r_tmp0.plus(offsets.Array_length));
			genTagPush(BpTypeCode.I32.code);
			asm.movq_m_r(vsph[0].value, r_tmp0);
			incrementVsp();
			endHandler();
		}
		writeDispatchEntry(dispatchTables[0].1, InternalOpcode.PROBE.code, w.atEnd().pos); {
			computeCurIpFromIp(-1);
			computePcFromCurIp();
			saveCallerIVars();
			asm.movq_r_m(r_tmp0, m_wasm_func); // XXX: compute func and pc directly in the right regs
			callRuntime(refRuntimeCall(RT.runtime_PROBE_instr), [r_tmp0, r_curpc], true);
			restoreCallerIVars();
			// Compute a pointer to the original code at this pc offset
			var pc = r_tmp1; // = IP - CODE
			asm.movq_r_r(pc, r_ip);
			asm.sub_r_m(pc, m_code);
			var origIp = r_tmp0; // FUNC_DECL.orig_bytecode + pc - 1
			asm.movq_r_m(origIp, r_func_decl.plus(offsets.FuncDecl_orig_bytecode));
			asm.add_r_r(origIp, pc);
			asm.sub_r_i(origIp, 1);
			genDispatch(origIp.indirect(), dispatchTables[0].1, false);
		}
		if (tuning.dispatchTableReg) {
			var offset = w.atEnd().pos;
			for (i < 256) {
				writeDispatchEntry(probedDispatchTableRef, i, offset);
			}
			computeCurIpForTrap(-1);
			computePcFromCurIp();
			saveCallerIVars();
			asm.movq_r_m(r_tmp0, m_wasm_func); // XXX: compute func and pc directly in the right regs
			callRuntime(refRuntimeCall(RT.runtime_PROBE_loop), [r_tmp0, r_curpc], true);
			restoreCallerIVars();
			// TODO: reload code from function, as local probes may have been inserted or removed
			asm.sub_r_i(r_ip, 1);
			genDispatch(r_ip.indirect(), dispatchTables[0].1, true);
		}
	}
	def genFloatMinAndMax() {
		var ret_b = X86_64Label.new(), ret_a = X86_64Label.new(), is_nan32 = X86_64Label.new(), is_nan64 = X86_64Label.new();
		bindHandler(Opcode.F32_MIN);
		asm.movss_s_m(r_xmm0, vsph[-2].value);
		asm.movss_s_m(r_xmm1, vsph[-1].value);
		asm.ucomiss_s_s(r_xmm0, r_xmm1);
		asm.jc_rel_far(C.P, is_nan32);
		asm.jc_rel_near(C.C, ret_a);
		asm.jc_rel_near(C.A, ret_b);
		asm.d.cmp_m_i(vsph[-1].value, 0);
		asm.jc_rel_near(C.S, ret_b); // handle min(-0, 0) == -0
		asm.jmp_rel_near(ret_a);

		bindHandler(Opcode.F32_MAX);
		asm.movss_s_m(r_xmm0, vsph[-2].value);
		asm.movss_s_m(r_xmm1, vsph[-1].value);
		asm.ucomiss_s_s(r_xmm0, r_xmm1);
		asm.jc_rel_far(C.P, is_nan32);
		asm.jc_rel_near(C.C, ret_b);
		asm.jc_rel_near(C.A, ret_a);
		asm.d.cmp_m_i(vsph[-1].value, 0);
		asm.jc_rel_near(C.NS, ret_b); // handle max(-0, 0) == 0
		asm.jmp_rel_near(ret_a);

		bindHandler(Opcode.F64_MIN);
		asm.movsd_s_m(r_xmm0, vsph[-2].value);
		asm.movsd_s_m(r_xmm1, vsph[-1].value);
		asm.ucomisd_s_s(r_xmm0, r_xmm1);
		asm.jc_rel_near(C.P, is_nan64);
		asm.jc_rel_near(C.C, ret_a);
		asm.jc_rel_near(C.A, ret_b);
		asm.d.cmp_m_i(vsph[-1].upper, 0);
		asm.jc_rel_near(C.S, ret_b); // handle min(-0, 0) == -0
		// fall through to ret_a
		asm.bind(ret_a);
		decrementVsp();
		endHandler();

		bindHandler(Opcode.F64_MAX);
		asm.movsd_s_m(r_xmm0, vsph[-2].value);
		asm.movsd_s_m(r_xmm1, vsph[-1].value);
		asm.ucomisd_s_s(r_xmm0, r_xmm1);
		asm.jc_rel_near(C.P, is_nan64);
		asm.jc_rel_near(C.C, ret_b);
		asm.jc_rel_near(C.A, ret_a);
		asm.d.cmp_m_i(vsph[-1].upper, 0);
		asm.jc_rel_near(C.S, ret_a); // handle max(-0, 0) == 0
		// fall through to ret_b
		asm.bind(ret_b);
		asm.movsd_m_s(vsph[-2].value, r_xmm1);
		decrementVsp();
		endHandler();

		asm.bind(is_nan32);
		asm.movd_m_i(vsph[-2].value, int.view(Floats.f_nan));
		asm.jmp_rel_near(ret_a);

		asm.bind(is_nan64);
		asm.movd_m_i(vsph[-2].upper, int.view(Floats.d_nan >> 32));
		asm.movd_m_i(vsph[-2].value, 0);
		asm.jmp_rel_near(ret_a);
	}
	def genFloatTruncs() {
		for (opcode in [
			Opcode.I32_TRUNC_F32_S,
			Opcode.I32_TRUNC_F32_U,
			Opcode.I32_TRUNC_F64_S,
			Opcode.I32_TRUNC_F64_U,
			Opcode.I64_TRUNC_F32_S,
			Opcode.I64_TRUNC_F32_U,
			Opcode.I64_TRUNC_F64_S,
			Opcode.I64_TRUNC_F64_U,
			Opcode.I32_TRUNC_SAT_F32_S,
			Opcode.I32_TRUNC_SAT_F32_U,
			Opcode.I32_TRUNC_SAT_F64_S,
			Opcode.I32_TRUNC_SAT_F64_U,
			Opcode.I64_TRUNC_SAT_F32_S,
			Opcode.I64_TRUNC_SAT_F32_U,
			Opcode.I64_TRUNC_SAT_F64_S,
			Opcode.I64_TRUNC_SAT_F64_U]) {
			bindHandler(opcode);
			// XXX: don't load current IP for saturating conversions
			computeCurIpForTrap(-1);
			// load value from stack
			if (opcode.sig.params[0] == ValueType.F32) asm.movss_s_m(r_xmm0, vsph[-1].value);
			else asm.movsd_s_m(r_xmm0, vsph[-1].value);
			// emit conversion
			masm.emit_i_trunc_f(opcode, r_tmp0, r_xmm0, r_xmm1);
			// store and update tag
			if (opcode.sig.results[0] == ValueType.I32) {
				asm.movd_m_r(vsph[-1].value, r_tmp0);
				genTagUpdate(BpTypeCode.I32.code);
			} else {
				asm.movq_m_r(vsph[-1].value, r_tmp0);
				genTagUpdate(BpTypeCode.I64.code);
			}
			endHandler();
		}
	}
	def genFloatConversions() {
		bindHandler(Opcode.F32_CONVERT_I32_S); {
			genTagUpdate(BpTypeCode.F32.code);
			asm.movd_r_m(r_tmp0, vsph[-1].value);
			asm.q.shl_r_i(r_tmp0, 32);
			asm.q.sar_r_i(r_tmp0, 32); // sign-extend
			asm.cvtsi2ss_s_r(r_xmm0, r_tmp0);
			asm.movss_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
		bindHandler(Opcode.F32_CONVERT_I32_U); {
			genTagUpdate(BpTypeCode.F32.code);
			asm.movd_r_m(r_tmp0, vsph[-1].value);
			asm.cvtsi2ss_s_r(r_xmm0, r_tmp0);
			asm.movss_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
		bindHandler(Opcode.F32_CONVERT_I64_S); {
			genTagUpdate(BpTypeCode.F32.code);
			asm.movq_r_m(r_tmp0, vsph[-1].value);
			asm.cvtsi2ss_s_r(r_xmm0, r_tmp0);
			asm.movss_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
		bindHandler(Opcode.F32_CONVERT_I64_U); {
			genTagUpdate(BpTypeCode.F32.code);
			asm.movq_r_m(r_tmp0, vsph[-1].value);
			masm.emit_f32_convert_i64_u(r_xmm0, r_tmp0, r_xmm1, r_scratch);
			asm.movss_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
		bindHandler(Opcode.F32_DEMOTE_F64); {
			genTagUpdate(BpTypeCode.F32.code);
			asm.cvtsd2ss_s_m(r_xmm0, vsph[-1].value);
			asm.movss_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
		bindHandler(Opcode.F64_CONVERT_I32_S); {
			genTagUpdate(BpTypeCode.F64.code);
			asm.movd_r_m(r_tmp0, vsph[-1].value);
			asm.q.shl_r_i(r_tmp0, 32);
			asm.q.sar_r_i(r_tmp0, 32); // sign-extend
			asm.cvtsi2sd_s_r(r_xmm0, r_tmp0);
			asm.movsd_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
		bindHandler(Opcode.F64_CONVERT_I32_U); {
			genTagUpdate(BpTypeCode.F64.code);
			asm.movd_r_m(r_tmp0, vsph[-1].value);
			asm.cvtsi2sd_s_r(r_xmm0, r_tmp0);
			asm.movsd_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
		bindHandler(Opcode.F64_CONVERT_I64_S); {
			genTagUpdate(BpTypeCode.F64.code);
			asm.movq_r_m(r_tmp0, vsph[-1].value);
			asm.cvtsi2sd_s_r(r_xmm0, r_tmp0);
			asm.movsd_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
		bindHandler(Opcode.F64_CONVERT_I64_U); {
			genTagUpdate(BpTypeCode.F64.code);
			asm.movq_r_m(r_tmp0, vsph[-1].value);
			masm.emit_f64_convert_i64_u(r_xmm0, r_tmp0, r_xmm1, r_scratch);
			asm.movsd_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
		bindHandler(Opcode.F64_PROMOTE_F32); {
			genTagUpdate(BpTypeCode.F64.code);
			asm.cvtss2sd_s_m(r_xmm0, vsph[-1].value);
			asm.movsd_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
	}
	def genRuntimeCallOps() {
		// generate code for runtime calls with 1 LEB that cannot trap.
		var call_irt = asm.newLabel();
		for (t in [
			(Opcode.GLOBAL_GET, refRuntimeCall(RT.runtime_GLOBAL_GET)),
			(Opcode.GLOBAL_SET, refRuntimeCall(RT.runtime_GLOBAL_SET)),
			(Opcode.MEMORY_GROW, refRuntimeCall(RT.runtime_MEMORY_GROW)),
			(Opcode.TABLE_GROW, refRuntimeCall(RT.runtime_TABLE_GROW)),
			(Opcode.STRUCT_NEW_CANON, refRuntimeCall(RT.runtime_STRUCT_NEW_CANON)),
			(Opcode.STRUCT_NEW_CANON_DEFAULT, refRuntimeCall(RT.runtime_STRUCT_NEW_CANON_DEFAULT))
		]) {
			bindHandler(t.0);
			genReadUleb32(r_tmp0);
			saveCallerIVars();
			callRuntime(t.1, [r_instance, r_tmp0], false);
			restoreCallerIVars();
			endHandler();
		}
		asm.bind(call_irt);

		// generate code for runtime calls with 1 LEB that can trap.
		call_irt = asm.newLabel();
		for (t in [
			(Opcode.TABLE_GET, refRuntimeCall(RT.runtime_TABLE_GET)),
			(Opcode.TABLE_SET, refRuntimeCall(RT.runtime_TABLE_SET)),
			(Opcode.MEMORY_FILL, refRuntimeCall(RT.runtime_MEMORY_FILL)),
			(Opcode.TABLE_FILL, refRuntimeCall(RT.runtime_TABLE_FILL)),
			(Opcode.ARRAY_NEW_CANON, refRuntimeCall(RT.runtime_ARRAY_NEW_CANON)),
			(Opcode.ARRAY_NEW_CANON_DEFAULT, refRuntimeCall(RT.runtime_ARRAY_NEW_CANON_DEFAULT)),
			(Opcode.ARRAY_GET, refRuntimeCall(RT.runtime_ARRAY_GET)),
			(Opcode.ARRAY_GET_S, refRuntimeCall(RT.runtime_ARRAY_GET_S)),
			(Opcode.ARRAY_GET_U, refRuntimeCall(RT.runtime_ARRAY_GET_U)),
			(Opcode.ARRAY_SET, refRuntimeCall(RT.runtime_ARRAY_SET))
		]) {
			bindHandler(t.0);
			if (t.0.prefix == 0) computeCurIpFromIp(-1);
			computePcFromCurIp();
			genReadUleb32(r_tmp0);
			saveCallerIVars();
			callRuntime(t.1, [r_instance, r_tmp0], true);
			restoreCallerIVars();
			endHandler();
		}
		asm.bind(call_irt);

		// generate code for runtime calls with 2 LEBS that can trap.
		call_irt = asm.newLabel();
		for (t in [
			(Opcode.TABLE_INIT, refRuntimeCall(RT.runtime_TABLE_INIT)),
			(Opcode.MEMORY_INIT, refRuntimeCall(RT.runtime_MEMORY_INIT)),
			(Opcode.MEMORY_COPY, refRuntimeCall(RT.runtime_MEMORY_COPY)),
			(Opcode.TABLE_COPY, refRuntimeCall(RT.runtime_TABLE_COPY)),
			(Opcode.STRUCT_GET, refRuntimeCall(RT.runtime_STRUCT_GET)),
			(Opcode.STRUCT_GET_S, refRuntimeCall(RT.runtime_STRUCT_GET_S)),
			(Opcode.STRUCT_GET_U, refRuntimeCall(RT.runtime_STRUCT_GET_U)),
			(Opcode.STRUCT_SET, refRuntimeCall(RT.runtime_STRUCT_SET)),
			(Opcode.ARRAY_NEW_CANON_FIXED, refRuntimeCall(RT.runtime_ARRAY_NEW_CANON_FIXED))
		]) {
			bindHandler(t.0);
			computePcFromCurIp();
			genReadUleb32(r_tmp0);
			genReadUleb32(r_tmp1);
			saveCallerIVars();
			callRuntime(t.1, [r_instance, r_tmp0, r_tmp1], true);
			genAbruptRetCheck();
			restoreCallerIVars();
			endHandler();
		}
		asm.bind(call_irt);
	}

	// helper method to move values from vsp to registers
	// vsp[-2] -> xmm0, vsp[-1] -> xmm1
	def load_v128_xmm0_xmm1(xmm0: X86_64Xmmr, xmm1: X86_64Xmmr){
		asm.movdqu_s_m(xmm0, vsph[-2].value);
		asm.movdqu_s_m(xmm1, vsph[-1].value);
	}
	// helper method to move values from vsp to registers
	// vsp[-2] -> xmm1, vsp[-1] -> xmm0
	def load_v128_xmm1_xmm0(xmm0: X86_64Xmmr, xmm1: X86_64Xmmr){
		load_v128_xmm0_xmm1(xmm1, xmm0);
	}
	// move two v128 values from top of stack to xmm0 and xmm1
	def emit_mov_2_v128_from_tos(r1: X86_64Xmmr, r2: X86_64Xmmr) {
		asm.movdqu_s_m(r_xmm0, vsph[-2].value);
		asm.movdqu_s_m(r_xmm1, vsph[-1].value);
	}
	def genSimdInstrs() {
		bindHandler(Opcode.V128_LOAD); {
			computeCurIpForTrap(-1);
			asm.q.inc_r(r_ip);			// skip flags byte
			genReadUleb32(r_tmp0);			// decode offset
			asm.movd_r_m(r_tmp1, vsph[-1].value);	// read index
			asm.q.add_r_r(r_tmp0, r_tmp1);		// add index + offset
			asm.movdqu_s_m(r_xmm0, r_mem0_base.plusR(r_tmp0, 1, 0));
			if (valuerep.tagged) genTagUpdate(BpTypeCode.V128.code); // update tag if necessary
			asm.movdqu_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
		for (t in [
			(Opcode.V128_AND, asm.andps_s_s),
			(Opcode.V128_XOR, asm.xorps_s_s),
			(Opcode.V128_OR, asm.orps_s_s)
		]) {
			bindHandler(t.0);
			asm.movdqu_s_m(r_xmm0, vsph[-1].value);
			asm.movdqu_s_m(r_xmm1, vsph[-2].value);
			t.1(r_xmm0, r_xmm1);
			asm.movdqu_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		bindHandler(Opcode.V128_NOT); {
			asm.pcmpeqq_s_s(r_xmm0, r_xmm0); // all 1s
			asm.movdqu_s_m(r_xmm1, vsph[-1].value);
			asm.xorpd_s_s(r_xmm0, r_xmm1);
			asm.movdqu_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
		bindHandler(Opcode.V128_ANDNOT); {
			// v128.andnot(a: v128, b: v128) -> v128
			// Bitwise AND of bits of a and the logical inverse of bits of b.
			// This operation is equivalent to v128.and(a, v128.not(b)).

			// NOT(b)
			asm.pcmpeqq_s_s(r_xmm0, r_xmm0);
			asm.movdqu_s_m(r_xmm1, vsph[-1].value);
			asm.xorpd_s_s(r_xmm0, r_xmm1);
			asm.movdqu_m_s(vsph[-1].value, r_xmm0);
			// AND
			asm.movdqu_s_m(r_xmm0, vsph[-1].value);
			asm.movdqu_s_m(r_xmm1, vsph[-2].value);
			asm.andpd_s_s(r_xmm0, r_xmm1);
			asm.movdqu_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		bindHandler(Opcode.V128_BITSELECT); {
			// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128
			// Use the bits in the control mask c to select the corresponding bit
			// from v1 when 1 and v2 when 0.
			// This operation is equivalent to v128.or(v128.and(v1, c), v128.and(v2, v128.not(c)))

			asm.movdqu_s_m(r_xmm0, vsph[-3].value); // v1
			asm.movdqu_s_m(r_xmm1, vsph[-2].value); // v2
			asm.movdqu_s_m(r_xmm2, vsph[-1].value); // c

			// AND(v1, c)
			asm.andpd_s_s(r_xmm0, r_xmm2);
			// NOT(c)
			asm.pcmpeqq_s_s(r_xmm3, r_xmm3);
			asm.xorpd_s_s(r_xmm3, r_xmm2);
			// AND(v2, NOT(c))
			asm.andpd_s_s(r_xmm1, r_xmm3);
			// OR
			asm.orps_s_s(r_xmm0, r_xmm1);
			asm.movdqu_m_s(vsph[-3].value, r_xmm0);
			adjustVsp(-2);
			endHandler();
		}
		// v128 extended multiplication
		for (t in [
			(Opcode.I16X8_EXTMUL_LOW_I8X16_S, masm.emit_i16x8_extmul_low, true),
			(Opcode.I16X8_EXTMUL_LOW_I8X16_U, masm.emit_i16x8_extmul_low, false)
		]) {
			bindHandler(t.0);
			emit_mov_2_v128_from_tos(r_xmm0, r_xmm1);
			t.1(r_xmm0, r_xmm1, r_xmm2, t.2);
			asm.movdqu_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		for (t in [
			(Opcode.I16X8_EXTMUL_HIGH_I8X16_S, masm.emit_i16x8_extmul_high_s),
			(Opcode.I16X8_EXTMUL_HIGH_I8X16_U, masm.emit_i16x8_extmul_high_u)
		]) {
			bindHandler(t.0);
			emit_mov_2_v128_from_tos(r_xmm0, r_xmm1);
			t.1(r_xmm0, r_xmm1, r_xmm2);
			asm.movdqu_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		for (t in [
			(Opcode.I32X4_EXTMUL_LOW_I16X8_S, masm.emit_i32x4_extmul, true, true),
			(Opcode.I32X4_EXTMUL_LOW_I16X8_U, masm.emit_i32x4_extmul, true, false),
			(Opcode.I32X4_EXTMUL_HIGH_I16X8_S, masm.emit_i32x4_extmul, false, true),
			(Opcode.I32X4_EXTMUL_HIGH_I16X8_U, masm.emit_i32x4_extmul, false, false),
			(Opcode.I64X2_EXTMUL_LOW_I32X4_S, masm.emit_i64x2_extmul, true, true),
			(Opcode.I64X2_EXTMUL_LOW_I32X4_U, masm.emit_i64x2_extmul, true, false),
			(Opcode.I64X2_EXTMUL_HIGH_I32X4_S, masm.emit_i64x2_extmul, false, true),
			(Opcode.I64X2_EXTMUL_HIGH_I32X4_U, masm.emit_i64x2_extmul, false, false)
		]) {
			bindHandler(t.0);
			emit_mov_2_v128_from_tos(r_xmm0, r_xmm1);
			t.1(r_xmm0, r_xmm1, r_xmm2, t.2, t.3);
			asm.movdqu_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		for (t in [
			// V128 lane-wise arithmetic
			(Opcode.I8X16_ADD, asm.paddb_s_s),
			(Opcode.I16X8_ADD, asm.paddw_s_s),
			(Opcode.I32X4_ADD, asm.paddd_s_s),
			(Opcode.I64X2_ADD, asm.paddq_s_s),
			(Opcode.I8X16_SUB, asm.psubb_s_s),
			(Opcode.I16X8_SUB, asm.psubw_s_s),
			(Opcode.I32X4_SUB, asm.psubd_s_s),
			(Opcode.I64X2_SUB, asm.psubq_s_s),
			(Opcode.I16X8_MUL, asm.pmullw_s_s),
			(Opcode.I32X4_MUL, asm.pmulld_s_s),

			(Opcode.I8X16_MIN_S, asm.pminsb_s_s),
			(Opcode.I16X8_MIN_S, asm.pminsw_s_s),
			(Opcode.I32X4_MIN_S, asm.pminsd_s_s),
			(Opcode.I32X4_MIN_U, asm.pminud_s_s),
			(Opcode.I8X16_MIN_U, asm.pminub_s_s),
			(Opcode.I16X8_MIN_U, asm.pminuw_s_s),
			(Opcode.I8X16_MAX_S, asm.pmaxsb_s_s),
			(Opcode.I16X8_MAX_S, asm.pmaxsw_s_s),
			(Opcode.I32X4_MAX_S, asm.pmaxsd_s_s),
			(Opcode.I8X16_MAX_U, asm.pmaxub_s_s),
			(Opcode.I16X8_MAX_U, asm.pmaxuw_s_s),
			(Opcode.I32X4_MAX_U, asm.pmaxud_s_s),
			(Opcode.I8X16_AVGR_U, asm.pavgb_s_s),
			(Opcode.I16X8_AVGR_U, asm.pavgw_s_s),

			(Opcode.I32X4_EQ, asm.pcmpeqd_s_s),
			(Opcode.I64X2_EQ, asm.pcmpeqq_s_s),
			(Opcode.I8X16_EQ, asm.pcmpeqb_s_s),
			(Opcode.I16X8_EQ, asm.pcmpeqw_s_s)
		]) {
			bindHandler(t.0);
			asm.movdqu_s_m(r_xmm0, vsph[-2].value);
			asm.movdqu_s_m(r_xmm1, vsph[-1].value);
			t.1(r_xmm0, r_xmm1);
			asm.movdqu_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		bindHandler(Opcode.I64X2_MUL); {
			var lhs = r_xmm0;
			var rhs = r_xmm1;
			var tmp1 = r_xmm2;
			var tmp2 = r_xmm3;

			asm.movdqu_s_m(lhs, vsph[-2].value); // lhs, dst
			asm.movdqu_s_m(rhs, vsph[-1].value); // rhs
			asm.movdqu_s_m(tmp1, vsph[-2].value); // tmp1
			asm.movdqu_s_m(tmp2, vsph[-1].value); // tmp2
			// 1. Multiply high dword of each qword of left with right.
			asm.psrlq_i(tmp1, 32);
			asm.pmuludq_s_s(tmp1, rhs);
			// 2. Multiply high dword of each qword of right with left.
			asm.psrlq_i(tmp2, 32);
			asm.pmuludq_s_s(tmp2, lhs);
			// 3. Add 1 and 2, then shift left by 32 (this is the high dword of result).
			asm.paddq_s_s(tmp2, tmp1);
			asm.psllq_i(tmp2, 32);
			// 4. Multiply low dwords (this is the low dword of result).
			asm.pmuludq_s_s(lhs, rhs);
			// 5. Add 3 and 4.
			asm.paddq_s_s(lhs, tmp2);
			// Move value to stack.
			asm.movdqu_m_s(vsph[-2].value, lhs);
			asm.q.sub_r_i(r_vsp, valuerep.slot_size);
			endHandler();
		}
		for (t in [
			(Opcode.I8X16_NE, asm.pcmpeqb_s_s),
			(Opcode.I16X8_NE, asm.pcmpeqw_s_s),
			(Opcode.I32X4_NE, asm.pcmpeqd_s_s),
			(Opcode.I64X2_NE, asm.pcmpeqq_s_s)
		]) {
			bindHandler(t.0);
			asm.movdqu_s_m(r_xmm0, vsph[-2].value);
			asm.movdqu_s_m(r_xmm1, vsph[-1].value);
			t.1(r_xmm0, r_xmm1);
			t.1(r_xmm1, r_xmm1);
			asm.xorps_s_s(r_xmm0, r_xmm1);
			asm.movdqu_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		for (t in [
			(Opcode.I8X16_GT_S, asm.pcmpgtb_s_s, load_v128_xmm0_xmm1),
			(Opcode.I16X8_GT_S, asm.pcmpgtw_s_s, load_v128_xmm0_xmm1),
			(Opcode.I32X4_GT_S, asm.pcmpgtd_s_s, load_v128_xmm0_xmm1),
			(Opcode.I64X2_GT_S, asm.pcmpgtq_s_s, load_v128_xmm0_xmm1),

			(Opcode.I8X16_LT_S, asm.pcmpgtb_s_s, load_v128_xmm1_xmm0),
			(Opcode.I16X8_LT_S, asm.pcmpgtw_s_s, load_v128_xmm1_xmm0),
			(Opcode.I32X4_LT_S, asm.pcmpgtd_s_s, load_v128_xmm1_xmm0),
			(Opcode.I64X2_LT_S, asm.pcmpgtq_s_s, load_v128_xmm1_xmm0)
		]) {
			bindHandler(t.0);
			t.2(r_xmm0, r_xmm1);
			t.1(r_xmm0, r_xmm1);
			asm.movdqu_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		for (t in [
			(Opcode.I8X16_GE_S, asm.pminsb_s_s, asm.pcmpeqb_s_s, load_v128_xmm0_xmm1),
			(Opcode.I16X8_GE_S, asm.pminsw_s_s, asm.pcmpeqw_s_s, load_v128_xmm0_xmm1),
			(Opcode.I32X4_GE_S, asm.pminsd_s_s, asm.pcmpeqd_s_s, load_v128_xmm0_xmm1),
			(Opcode.I8X16_GE_U, asm.pminub_s_s, asm.pcmpeqb_s_s, load_v128_xmm0_xmm1),
			(Opcode.I16X8_GE_U, asm.pminuw_s_s, asm.pcmpeqw_s_s, load_v128_xmm0_xmm1),
			(Opcode.I32X4_GE_U, asm.pminud_s_s, asm.pcmpeqd_s_s, load_v128_xmm0_xmm1),

			(Opcode.I8X16_LE_S, asm.pminsb_s_s, asm.pcmpeqb_s_s, load_v128_xmm1_xmm0),
			(Opcode.I16X8_LE_S, asm.pminsw_s_s, asm.pcmpeqw_s_s, load_v128_xmm1_xmm0),
			(Opcode.I32X4_LE_S, asm.pminsd_s_s, asm.pcmpeqd_s_s, load_v128_xmm1_xmm0),
			(Opcode.I8X16_LE_U, asm.pminub_s_s, asm.pcmpeqb_s_s, load_v128_xmm1_xmm0),
			(Opcode.I16X8_LE_U, asm.pminuw_s_s, asm.pcmpeqw_s_s, load_v128_xmm1_xmm0),
			(Opcode.I32X4_LE_U, asm.pminud_s_s, asm.pcmpeqd_s_s, load_v128_xmm1_xmm0)
		]) {
			bindHandler(t.0);
			t.3(r_xmm0, r_xmm1);
			t.1(r_xmm0, r_xmm1);
			t.2(r_xmm0, r_xmm1);
			asm.movdqu_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		for (t in [
			(Opcode.I64X2_GE_S, load_v128_xmm0_xmm1),
			(Opcode.I64X2_LE_S, load_v128_xmm1_xmm0)
		]) {
			bindHandler(t.0);
			t.1(r_xmm0, r_xmm1);
			masm.emit_i64x2_ge_s(r_xmm0, r_xmm1, r_xmm2);
			asm.movdqu_m_s(vsph[-2].value, r_xmm1); // The result is in r_xmm1
			decrementVsp();
			endHandler();
		}
		for (t in [
			(Opcode.I8X16_GT_U, asm.pmaxub_s_s, asm.pcmpeqb_s_s, load_v128_xmm0_xmm1),
			(Opcode.I16X8_GT_U, asm.pmaxuw_s_s, asm.pcmpeqw_s_s, load_v128_xmm0_xmm1),
			(Opcode.I32X4_GT_U, asm.pmaxud_s_s, asm.pcmpeqd_s_s, load_v128_xmm0_xmm1),

			(Opcode.I8X16_LT_U, asm.pmaxub_s_s, asm.pcmpeqb_s_s, load_v128_xmm1_xmm0),
			(Opcode.I16X8_LT_U, asm.pmaxuw_s_s, asm.pcmpeqw_s_s, load_v128_xmm1_xmm0),
			(Opcode.I32X4_LT_U, asm.pmaxud_s_s, asm.pcmpeqd_s_s, load_v128_xmm1_xmm0)
		]) {
			bindHandler(t.0);
			t.3(r_xmm0, r_xmm1);
			t.1(r_xmm0, r_xmm1);
			t.2(r_xmm0, r_xmm1);
			t.2(r_xmm2, r_xmm2);
			asm.xorps_s_s(r_xmm0, r_xmm2);
			asm.movdqu_m_s(vsph[-2].value, r_xmm0);
			decrementVsp();
			endHandler();
		}
		for (t in [
			(Opcode.I8X16_NEG, asm.psubb_s_s),
			(Opcode.I16X8_NEG, asm.psubw_s_s),
			(Opcode.I32X4_NEG, asm.psubd_s_s),
			(Opcode.I64X2_NEG, asm.psubq_s_s)
		]) {
			bindHandler(t.0);
			asm.movdqu_s_m(r_xmm0, vsph[-1].value);
			masm.emit_v128_zero(r_xmm1);
			t.1(r_xmm1, r_xmm0);
			asm.movdqu_m_s(vsph[-1].value, r_xmm1);
			endHandler();
		}
		// Lane-wise unary operations
		bindHandler(Opcode.I64X2_ABS); {
			asm.movdqu_s_m(r_xmm0, vsph[-1].value);
			asm.movshdup_s_s(r_xmm1, r_xmm0);
			asm.psrad_i(r_xmm1, 31);
			asm.xorps_s_s(r_xmm0, r_xmm1);
			asm.psubq_s_s(r_xmm0, r_xmm1);
			asm.movdqu_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
		for (t in [
			(Opcode.I8X16_ABS, asm.pabsb_s_s),
			(Opcode.I16X8_ABS, asm.pabsw_s_s),
			(Opcode.I32X4_ABS, asm.pabsd_s_s)
		]) {
			bindHandler(t.0);
			asm.movdqu_s_m(r_xmm0, vsph[-1].value);
			t.1(r_xmm0, r_xmm0);
			asm.movdqu_m_s(vsph[-1].value, r_xmm0);
			endHandler();
		}
		bindHandler(Opcode.V128_CONST); {
			asm.movdqu_s_m(r_xmm0, ip_ptr);
			asm.q.add_r_i(r_ip, 16);
			asm.movdqu_m_s(vsph[0].value, r_xmm0);
			genTagPush(BpTypeCode.V128.code);
			incrementVsp();
			endHandler();
		}
	}
	def bindHandler(opcode: Opcode) {
		if (tuning.handlerAlignment > 1) w.align(tuning.handlerAlignment);
		var pos = w.atEnd().pos;
		patchDispatchTable(opcode, pos);
		if (Debug.interpreter) {
			Trace.OUT.put1("\thandle_%s:", opcode.name).pad(' ', 35)
				.put1("break *0x%x", (ic.start + pos) - Pointer.NULL)
				.outln();
		}
	}
	def bindHandlerNoAlign(opcode: Opcode) {
		patchDispatchTable(opcode, w.atEnd().pos);
	}
	def decrementVsp() {
		adjustVsp(-1);
	}
	def incrementVsp() {
		adjustVsp(1);
	}
	def adjustVsp(slots: int) {
		if (slots < 0) asm.q.sub_r_i(r_vsp, (0 - slots) * valuerep.slot_size);
		else asm.q.add_r_i(r_vsp, slots * valuerep.slot_size);
	}
	def genAbruptRetCheck() {
		asm.q.cmp_r_i(Target.V3_RET_GPRS[0], 0);
		asm.jc_rel_far(C.NZ, abruptRetLabel);
	}
	def saveCallerIVars() {
		saveIVar(r_ip);
		saveIVar(r_stp);
		if (tuning.recordCurIpForTraps) saveIVar(r_curpc);
	}
	def restoreCallerIVars() {
		restoreReg(r_ip);
		restoreReg(r_stp);
		restoreReg(r_eip);
		restoreReg(r_instance);
		restoreReg(r_func_decl);
		restoreReg(r_mem0_base);
		restoreReg(r_vfp);
	}
	def restoreDispatchTableReg() {
		if (tuning.dispatchTableReg) {
			// restore dispatch table from Interpreter.dispatchTable
			asm.movq_r_m(r_dispatch, absPointer(offsets.Interpreter_dispatchTable));
		}
	}
	def callRuntime(abs: Pointer, args: Array<X86_64Gpr>, canTrap: bool) {
		saveIVar(r_vsp);
		// save a copy of VSP into valueStack.sp
		asm.movq_r_m(r_scratch, absPointer(offsets.Interpreter_valueStack));
		asm.movq_m_r(r_scratch.plus(offsets.ValueStack_sp), r_vsp);
		// Generate parallel moves from args into param gprs; assume each src register used only once
		var dst = Array<X86_64Gpr>.new(GPRs.length);
		for (i < args.length) {
			var sreg = args[i];
			var dreg = Target.V3_PARAM_GPRS[i + 1];
			if (sreg != dreg) dst[sreg.regnum] = dreg;
		}
		var stk = Array<i8>.new(GPRs.length);
		for (i < dst.length) orderMoves(dst, stk, i);
		// emit actual call
		asm.callr(int.!((abs - (ic.start + w.pos + 5)))); // TODO: handle 64-bit {abs} with movq_r_l
		// check for trap
		if (canTrap) genAbruptRetCheck();
		restoreDispatchTableReg();
		// restore VSP from valueStack.sp
		asm.movq_r_m(r_vsp, absPointer(offsets.Interpreter_valueStack));
		asm.movq_r_m(r_vsp, r_vsp.plus(offsets.ValueStack_sp));
	}
	def absPointer(ptr: Pointer) -> X86_64Addr {
		return X86_64Addr.new(null, null, 1, int.view(u32.!(ptr - Pointer.NULL)));
	}
	def orderMoves(dst: Array<X86_64Gpr>, stk: Array<i8>, i: int) {
		// XXX: use move ordering logic from macro assembler?
		var dreg = dst[i];
		if (dreg == null) return;		// no moves here
		if (stk[i] > 0) return;			// this node already done
		stk[i] = -1;				// mark as on stack
		if (stk[dreg.regnum] < 0) {		// destination on stack => cycle
			asm.movq_r_r(r_scratch, dreg);	// save destination first
			stk[dreg.regnum] = -2;		// mark as cycle
		} else {
			orderMoves(dst, stk, dreg.regnum);	// recurse on destination
		}
		asm.movq_r_r(dreg, if(stk[i] == -2, r_scratch, GPRs[i]));	// emit post-order move
		stk[i] = 1;				// mark as done
	}
	def genTagUpdate(tag: byte) {
		if (valuerep.tagged) asm.movq_m_i(vsph[-1].tag, tag);
	}
	def genTagPush(tag: byte) {
		if (valuerep.tagged) asm.movq_m_i(vsph[0].tag, i7.view(tag));
	}
	def genTagPushR(r: X86_64Gpr) {
		if (valuerep.tagged) asm.movq_m_r(vsph[0].tag, r);
	}
	def genCopySlot(dst: X86_64Addr, src: X86_64Addr) {
		match (valuerep.slot_size) {
			8 => {
				asm.movq_r_m(r_scratch, src);
				asm.movq_m_r(dst, r_scratch);
			}
			16 => {
				asm.movdqu_s_m(r_xmm0, src);
				asm.movdqu_m_s(dst, r_xmm0);
			}
			32 => {
				asm.movdqu_s_m(r_xmm0, src);
				asm.movdqu_m_s(dst, r_xmm0);
				asm.movdqu_s_m(r_xmm0, src.plus(16));
				asm.movdqu_m_s(dst.plus(16), r_xmm0);
			}
			_ => {
				fatal(Strings.format1("unsupported value slot size: %d", valuerep.slot_size));
			}
		}
	}
	def saveIVar(r: X86_64Gpr) {
		for (t in all_ivars) {
			if (t.0 == r) asm.movq_m_r(t.1, r);
		}
	}
	def spillReg(r: X86_64Gpr) {
		for (t in mutable_ivars) {
			if (t.0 == r) asm.movq_m_r(t.1, r);
		}
	}
	def restoreReg(r: X86_64Gpr) {
		for (t in all_ivars) {
			if (t.0 == r) asm.movq_r_m(r, t.1);
		}
	}
	def genLoad(opcode: Opcode, tag: byte, gen: (X86_64Gpr, X86_64Addr) -> X86_64Assembler) {
		bindHandler(opcode);
		computeCurIpForTrap(-1);
		var finish = asm.newLabel(), has_index: X86_64Label;
		if (tuning.multiMemorySupport) { // dynamically check for memory index
			has_index = asm.newLabel();
			asm.q.inc_r(r_ip);				// skip flags byte
			asm.test_m_i(r_ip.plus(-1), BpConstants.MEMARG_INDEX_FLAG); // XXX: test byte
			asm.jc_rel_near(C.NZ, has_index);
		} else {
			asm.q.inc_r(r_ip);				// skip flags byte
		}
		genReadUleb32(r_tmp0);				// decode offset
		asm.movd_r_m(r_tmp1, vsph[-1].value);		// read index off value stack
		asm.q.add_r_r(r_tmp0, r_tmp1);			// add index + offset
		gen(r_tmp1, r_mem0_base.plusR(r_tmp0, 1, 0));
		asm.bind(finish);
		if (valuerep.tagged && tag != BpTypeCode.I32.code) genTagUpdate(tag); // update tag if necessary
		asm.movq_m_r(vsph[-1].value, r_tmp1);
		endHandler();
		if (has_index != null) {
			asm.bind(has_index);
			genReadUleb32(r_tmp0);			// decode memory index
			var memN = r_tmp3;
			asm.movq_r_m(memN, r_instance.plus(offsets.Instance_memories));
			asm.movq_r_m(memN, memN.plusR(r_tmp0, 8, offsets.Array_contents));
			asm.movq_r_m(memN, memN.plus(offsets.X86_64Memory_start));
			genReadUleb32(r_tmp0);			// decode offset
			asm.movd_r_m(r_tmp1, vsph[-1].value);	// read index off value stack
			asm.q.add_r_r(r_tmp0, r_tmp1);		// add index + offset
			gen(r_tmp1, memN.plusR(r_tmp0, 1, 0));
			asm.jmp_rel_near(finish);
		}
	}
	def genStore(gen: (X86_64Addr, X86_64Gpr) -> X86_64Assembler) {
		computeCurIpForTrap(-1);
		var finish = asm.newLabel(), has_index: X86_64Label;
		if (tuning.multiMemorySupport) { // dynamically check for memory index
			has_index = asm.newLabel();
			asm.q.inc_r(r_ip);				// skip flags byte
			asm.test_m_i(r_ip.plus(-1), BpConstants.MEMARG_INDEX_FLAG); // XXX: test byte
			asm.jc_rel_near(C.NZ, has_index);
		} else {
			asm.q.inc_r(r_ip);				// skip flags byte
		}
		genReadUleb32(r_tmp0);			// decode offset
		asm.movd_r_m(r_tmp1, vsph[-2].value);	// read index
		asm.q.add_r_r(r_tmp0, r_tmp1);		// add index + offset
		asm.movq_r_m(r_tmp1, vsph[-1].value);	// read value
		gen(r_mem0_base.plusR(r_tmp0, 1, 0), r_tmp1);
		asm.bind(finish);
		adjustVsp(-2);
		endHandler();
		if (has_index != null) {
			asm.bind(has_index);
			genReadUleb32(r_tmp0);			// decode memory index
			var memN = r_tmp3;
			asm.movq_r_m(memN, r_instance.plus(offsets.Instance_memories));
			asm.movq_r_m(memN, memN.plusR(r_tmp0, 8, offsets.Array_contents));
			asm.movq_r_m(memN, memN.plus(offsets.X86_64Memory_start));
			genReadUleb32(r_tmp0);			// decode offset
			asm.movd_r_m(r_tmp1, vsph[-2].value);	// read index off value stack
			asm.q.add_r_r(r_tmp0, r_tmp1);		// add index + offset
			asm.movq_r_m(r_tmp1, vsph[-1].value);	// read value
			gen(memN.plusR(r_tmp0, 1, 0), r_tmp1);
			asm.jmp_rel_near(finish);
		}
	}
	def genPopFrameAndRet() {
		genInvalidateFrameAccessor();
		asm.q.add_r_i(r_sp, k_frame_size);
		asm.ret();
	}
	def genInvalidateFrameAccessor() {
		if (tuning.cacheFrameAccessor) asm.movq_m_i(m_accessor, 0);
	}

	// Generate a read of a 32-bit unsigned LEB.
	def genReadUleb32(dest: X86_64Gpr) {
		var ool_leb: OutOfLineLEB;
		if (!tuning.inlineAllLEBs) {
			ool_leb = OutOfLineLEB.new(dest);
			oolULeb32Sites.put(ool_leb);
		}
		var asm = this.asm.d;
		asm.movbzx_r_m(dest, ip_ptr);	// load first byte
		asm.q.inc_r(r_ip);			// increment pointer
		asm.test_r_i(dest, LEB_UPPER_BIT);	// test most-significant bit
		if (tuning.inlineAllLEBs) {
			var leb_done = X86_64Label.new();
			asm.jc_rel_near(C.Z, leb_done);
			genReadLEBext(dest);
			asm.bind(leb_done);
		} else {
			asm.jc_rel_addr(C.NZ, ool_leb);
			ool_leb.retOffset = asm.pos();
		}
	}
	// Generate a read of a 32-bit signed LEB.
	def genReadSleb32_inline(dest: X86_64Gpr) {
		var done = X86_64Label.new(), sext = X86_64Label.new(), loop = X86_64Label.new();
		asm.movd_r_i(R.RCX, 0);
		asm.movd_r_i(dest, 0);

		asm.bind(loop);
		asm.movbzx_r_m(r_scratch, ip_ptr);	// load byte
		asm.q.inc_r(r_ip);			// increment pointer
		asm.d.test_r_i(r_scratch, LEB_UPPER_BIT);	// test most-significant bit
		asm.jc_rel_near(C.Z, sext);		// break if not set
		asm.d.and_r_i(r_scratch, 0x7F);		// mask off upper bit
		asm.d.shl_r_cl(r_scratch);		// shift byte into correct bit pos
		asm.d.or_r_r(dest, r_scratch);		// merge byte into val
		asm.d.add_r_i(R.RCX, 7);		// compute next bit pos
		asm.jmp_rel_near(loop);			// loop

		asm.bind(sext);
		asm.d.shl_r_cl(r_scratch);		// shift byte into correct bit pos
		asm.d.or_r_r(dest, r_scratch);		// merge byte into val
		asm.d.sub_r_i(R.RCX, 25);		// compute 25 - shift
		asm.d.neg_r(R.RCX);
		asm.jc_rel_near(C.S, done);		// if shift > 25, done
		asm.d.shl_r_cl(dest);			// sign extension
		asm.d.sar_r_cl(dest);
		asm.bind(done);
	}
	// Generate a read of a 64-bit signed LEB.
	def genReadSleb64_inline(dest: X86_64Gpr) {
		var done = X86_64Label.new(), sext = X86_64Label.new(), loop = X86_64Label.new();
		asm.movd_r_i(R.RCX, 0);
		asm.movd_r_i(dest, 0);

		asm.bind(loop);
		asm.movbzx_r_m(r_scratch, ip_ptr);	// load byte
		asm.q.inc_r(r_ip);			// increment pointer
		asm.d.test_r_i(r_scratch, LEB_UPPER_BIT);	// test most-significant bit
		asm.jc_rel_near(C.Z, sext);		// break if not set
		asm.d.and_r_i(r_scratch, 0x7F);		// mask off upper bit
		asm.q.shl_r_cl(r_scratch);		// shift byte into correct bit pos
		asm.q.or_r_r(dest, r_scratch);		// merge byte into val
		asm.d.add_r_i(R.RCX, 7);		// compute next bit pos
		asm.jmp_rel_near(loop);			// loop

		asm.bind(sext);
		asm.q.shl_r_cl(r_scratch);		// shift byte into correct bit pos
		asm.q.or_r_r(dest, r_scratch);		// merge byte into val
		asm.d.sub_r_i(R.RCX, 57);		// compute 57 - shift
		asm.d.neg_r(R.RCX);
		asm.jc_rel_near(C.S, done);		// if shift > 57, done
		asm.q.shl_r_cl(dest);			// sign extension
		asm.q.sar_r_cl(dest);
		asm.bind(done);
	}
	def genSkipBlockType() {
		if (!tuning.complexBlockTypes) return genSkipLeb();
		var tmp = r_tmp0;
		var done = X86_64Label.new();
		asm.d.movbzx_r_m(tmp, ip_ptr);		// load first byte
		asm.q.inc_r(r_ip);			// increment pointer
		// check for extended LEB, abstract type, or type with immediate
		var typeTableAddr = int.!((ic.start + typeTagTableOffset) - Pointer.NULL);
		asm.test_m_i(tmp.plus(typeTableAddr), TYPE_HAS_IMM | TYPE_IS_LEB);
		asm.jc_rel_near(C.Z, done);
		// handle extended LEB, types with immediates, and abstract types
		var type_not_leb = X86_64Label.new();
		asm.d.test_r_i(tmp, LEB_UPPER_BIT);		// check for LEB first
		asm.jc_rel_near(C.Z, type_not_leb);
		genSkipLeb0(r_tmp3);
		asm.bind(type_not_leb);
		// check for types that have an immediate
		asm.d.test_m_i(tmp.plus(typeTableAddr), TYPE_HAS_IMM);
		asm.jc_rel_near(C.Z, done);
		genSkipLeb();
		asm.bind(done);
	}
	def genSkipSidetableEntry() {
		asm.add_r_i(r_stp, offsets.STP_entry_size);
	}
	// Generate code which skips over an LEB.
	def genSkipLeb() {
		genSkipLeb0(r_scratch);
	}
	def genSkipLeb0(scratch: X86_64Gpr) {
		var more = X86_64Label.new();
		asm.bind(more);
		asm.movbzx_r_m(scratch, ip_ptr);	// load first byte
		asm.q.inc_r(r_ip);			// increment pointer
		asm.test_r_i(scratch, LEB_UPPER_BIT);	// test most-significant bit
		asm.jc_rel_near(C.NZ, more);
	}
	// End the handler for the current bytecode
	def endHandler() {
		genDispatchOrJumpToDispatch();
	}
	// Generate an inline dispatch or a jump to the dispatch loop, depending on config.
	def genDispatchOrJumpToDispatch() {
		var gen = tuning.threadedDispatch;
		if (firstDispatchOffset == 0) {
			firstDispatchOffset = w.pos;
			gen = true;
		}
		if (gen) {
			genDispatch(ip_ptr, if (!tuning.dispatchTableReg, dispatchTables[0].1), true);
		} else {
			asm.jmp_rel(firstDispatchOffset - w.atEnd().pos);
		}
	}
	// Generate a load of the next bytecode and a dispatch through the dispatch table.
	def genDispatch(ptr: X86_64Addr, table: IcCodeRef, increment: bool) {
		var opcode = r_tmp0;
		var base = r_tmp1;
		if (ptr != null) asm.movbzx_r_m(opcode, ptr);
		if (increment) asm.inc_r(r_ip);
		match (tuning.dispatchEntrySize) {
			2 => {
				if (table == null) asm.movq_r_r(base, r_dispatch);
				else asm.lea(base, table); // RIP-relative LEA
				asm.movwsx_r_m(opcode, base.plusR(opcode, 2, 0)); // load 16-bit offset
				asm.add_r_r(base, opcode);
				if (dispatchJmpOffset < 0) dispatchJmpOffset = w.pos;
				asm.ijmp_r(base);
			}
			4 => {
				if (table == null) {
					asm.movd_r_m(base, r_dispatch.plusR(opcode, 4, 0));
				} else {
					var addr = ic.start + table.offset;
					asm.movd_r_m(base, X86_64Addr.new(null, opcode, 4, int.!(addr - Pointer.NULL)));
				}
				if (dispatchJmpOffset < 0) dispatchJmpOffset = w.pos;
				asm.ijmp_r(base);
			}
			8 => {
				if (table == null) {
					if (dispatchJmpOffset < 0) dispatchJmpOffset = w.pos;
					asm.ijmp_m(r_dispatch.plusR(opcode, 8, 0));
				} else {
					var addr = ic.start + table.offset;
					if (dispatchJmpOffset < 0) dispatchJmpOffset = w.pos;
					asm.ijmp_m(X86_64Addr.new(null, opcode, 8, int.!(addr - Pointer.NULL)));
				}
			}
		}
	}
	// Patch the dispatch table for the given opcode to go to the given position.
	def patchDispatchTable(opcode: Opcode, pos: int) {
		for (t in dispatchTables) {
			if (t.0 != opcode.prefix) continue;
			var ref1 = t.1;
			if (opcode.prefix == 0 || opcode.code < 128) writeDispatchEntry(ref1, opcode.code, pos);
			var ref2 = t.2;
			if (ref2 != null) writeDispatchEntry(ref2, opcode.code, pos);
			w.atEnd();
			return;
		}
		fatal("no dispatch table found for prefix");
	}
	// Generate the out-of-line LEB decoding code.
	def genOutOfLineLEBs() { // XXX: use a separate out-of-line assembler on the end of the buffer
		for (i < oolULeb32Sites.length) {
			var o = oolULeb32Sites[i];
			var pos = w.atEnd().pos;
			w.at(o.pos).put_b32(pos - (o.pos + o.delta));
			w.atEnd();
			// XXX: share code between out-of-line LEB cases
			genReadLEBext(o.dest);
			asm.jmp_rel(o.retOffset - w.atEnd().pos);
		}
		oolULeb32Sites = null;
	}
	// Generate code for > 1 byte LEB cases
	def genReadLEBext(dest: X86_64Gpr) {
		var destRcx = dest == R.RCX;
		asm.d.and_r_i(dest, 0x7F);		// mask off upper bit of first byte
		if (destRcx) {
			asm.movd_r_r(r_tmp3, dest);
			dest = r_tmp3;
		} else {
			asm.movd_r_r(r_tmp3, R.RCX);	// save RCX
		}
		asm.movd_r_i(R.RCX, 7);
		var loop = X86_64Label.new(), nomore = X86_64Label.new();
		asm.bind(loop);
		asm.movbzx_r_m(r_scratch, ip_ptr);	// load byte
		asm.q.inc_r(r_ip);			// increment pointer
		asm.d.test_r_i(r_scratch, 0x80);	// test most-significant bit
		asm.jc_rel_near(C.Z, nomore);		// break if not set
		asm.d.and_r_i(r_scratch, 0x7F);		// mask off upper bit
		asm.d.shl_r_cl(r_scratch);		// shift byte into correct bit pos
		asm.d.or_r_r(dest, r_scratch);		// merge byte into val
		asm.d.add_r_i(R.RCX, 7);		// compute next bit pos
		asm.jmp_rel_near(loop);			// loop

		asm.bind(nomore);
		asm.d.shl_r_cl(r_scratch);		// shift byte into correct bit pos
		asm.d.or_r_r(dest, r_scratch);		// merge byte into val
		if (destRcx) asm.movd_r_r(R.RCX, dest);
		else asm.movd_r_r(R.RCX, r_tmp3);	// restore RCX
	}
	// Runtime calls and traps need CURPC register to be valid.
	def computeCurIpForTrap(delta: int) {
		if (tuning.recordCurIpForTraps) computeCurIpFromIp(delta);
	}
	def computeCurIpFromIp(delta: int) {
		asm.q.lea(r_curpc, X86_64Addr.new(r_ip, null, 1, delta - offsets.Array_contents));
	}
	def restoreIpFromCurIp(delta: int) {
		asm.q.lea(r_ip, r_curpc.plus(0 - (delta - offsets.Array_contents)));
	}
	def computePcFromCurIp() {
		if (tuning.recordCurIpForTraps) asm.q.sub_r_m(r_curpc, m_code);
	}
	// All traps are generated out-of-line and call into the runtime.
	def genTraps() {
		w.atEnd();

		var call_runtime_TRAP = X86_64Label.new();
		asm.bind(call_runtime_TRAP);
		computePcFromCurIp();
		saveCallerIVars();
		asm.movq_r_m(r_tmp1, m_wasm_func);
		// XXX: load runtime arg registers directly
		callRuntime(refRuntimeCall(RT.runtime_TRAP), [r_tmp1, r_curpc, r_tmp4], true);
		asm.bind(abruptRetLabel);
		genPopFrameAndRet();

		for (reason in TrapReason) {
			if (reason == TrapReason.STACK_OVERFLOW) continue; // must be special
			if (reason == TrapReason.DIV_BY_ZERO) continue; // must be special
			var label = newTrapLabel(reason);
			if (label == null) continue;
			asm.bind(label);
			asm.movd_r_i(r_tmp4, reason.tag);
			asm.jmp_rel_near(call_runtime_TRAP);
		}
		// divide by zero happens when RAX and RDX are clobbered
		var divzero_label = newTrapLabel(TrapReason.DIV_BY_ZERO);
		asm.bind(divzero_label);
		computePcFromCurIp();
		saveIVar(r_stp);
		if (tuning.recordCurIpForTraps) saveIVar(r_curpc);
		// XXX: load runtime arg registers directly
		asm.movq_r_m(r_tmp1, m_wasm_func);
		asm.movd_r_i(r_tmp4, TrapReason.DIV_BY_ZERO.tag);
		callRuntime(refRuntimeCall(RT.runtime_TRAP), [r_tmp1, r_curpc, r_tmp4], true);
		asm.jmp_rel_near(abruptRetLabel);

		// stack overflow cannot call into runtime, because it might be out of stack (!)
		var stackoverflow_label = newTrapLabel(TrapReason.STACK_OVERFLOW);
		asm.bind(stackoverflow_label);
		var trapObj = Pointer.atObject(Execute.trapObjects[TrapReason.STACK_OVERFLOW.tag]);
		asm.movq_r_l(Target.V3_RET_GPRS[0], trapObj - Pointer.NULL);
		asm.jmp_rel_near(abruptRetLabel);
		ic.stackOverflowHandlerOffset = stackoverflow_label.pos;
		ic.oobMemoryHandlerOffset = newTrapLabel(TrapReason.MEM_OUT_OF_BOUNDS).pos;
		ic.divZeroHandlerOffset = newTrapLabel(TrapReason.DIV_BY_ZERO).pos;

		// Generate the code for the CRASH opcode.
		bindHandler(Opcode.CRASH_EXEC);
		bindHandler(Opcode.CRASH_COMPILER);
		asm.invalid();
		endHandler();
	}
	def newTrapLabel(reason: TrapReason) -> X86_64Label {
		return X86_64MasmLabel.!(masm.newTrapLabel(reason)).label;
	}
	def refRuntimeCall<P, R>(f: P -> R) -> Pointer {
		var ptr = CiRuntime.unpackClosure<X86_64Interpreter, P, R>(f).0;
		var abs = ptr - Pointer.NULL;
		if (abs > u32.max) fatal("runtime call address not in 4GB");
		return ptr;
	}
	def reportOom(w: DataWriter, nlength: int) -> DataWriter {
		fatal("ran out of buffer space");
		return w;
	}
}

// Assembler patching support for out-of-line LEBs and other code refs.
def ABS_MARKER = 0x55443322;
def REL_MARKER = 0x44332211;
class OutOfLineLEB(dest: X86_64Gpr) extends X86_64Addr {
	var retOffset: int; // where OOB code should "return"
	var pos: int = -1;
	var delta: int;

	new() super(null, null, 1, REL_MARKER) { }
}
class IcCodeRef(var offset: int) extends X86_64Addr {
	new() super(null, null, 1, REL_MARKER) { }
}
class Patcher(w: DataWriter) extends X86_64AddrPatcher {
	new() super(ABS_MARKER, REL_MARKER) { }
	def recordRel32(pos: int, delta: int, addr: X86_64Addr) {
		match (addr) {
			x: OutOfLineLEB => {
				x.pos = pos;
				x.delta = delta;
			}
			x: IcCodeRef => {
				if (x.offset < 0) System.error("InterpreterGen", "unbound forward code ref");
				w.at(pos).put_b32(x.offset - (pos + delta));
				w.atEnd();
			}
		}
	}
}
