// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A thin wrapper around the kernel mmap() and mprotect() operations.
// Since this is OS/arch specific, it is in its own file.
component Mmap {
	def PROT_NONE = LinuxConst.PROT_NONE;
	def PROT_READ = LinuxConst.PROT_READ;
	def PROT_WRITE = LinuxConst.PROT_WRITE;
	def PROT_EXEC = LinuxConst.PROT_EXEC;

	def reserve(size: u64, prot: int) -> Mapping {
		var flags = LinuxConst.MAP_PRIVATE | LinuxConst.MAP_ANONYMOUS;
		var r = Linux.syscall(LinuxConst.SYS_mmap, (Pointer.NULL, size, prot, flags, 0, 0));
		if (r.0 == -1) return null;
		var start = Pointer.NULL + r.0, end = start + i64.view(size);
		var range = MemoryRange.new(start, end);
		var mapping = Mapping.new(range);
		RiGc.registerFinalizer(mapping, range.unmap);
		return mapping;
	}
	def protect(start: Pointer, size: u64, prot: int) -> bool {
		var r = Linux.syscall(LinuxConst.SYS_mprotect, (start, size, prot));
		return r.0 == 0;
	}
	def unmap(start: Pointer, size: u64) {
		Linux.syscall(LinuxConst.SYS_munmap, (start, size));
	}

}
