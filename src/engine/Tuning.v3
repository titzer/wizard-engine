// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Contains flags that explicitly disable features to test their impact on performance.
// Generally, all of these settings should be {false} by default.
component FeatureDisable {
	// Wasm language/extension features
	def simd = false;
	def multiMemory = false;
	def complexBlockTypes = false;	// required for GC and function references

	// Engine features.
	def globalProbes = false;	// required for tracing/probing
	def localProbes = false;	// required for tracing/probing
	def entryProbes = false;	// required for tracing/probing
	def frameAccess = false;	// required for debugging
	def frameUpdate = false;	// required for debugging
	def stacktraces = false;	// required for debugging
	def valueTags = false;		// required for proper GC
	def multiTier = false;		// for multi-tier execution
	def tierUpOsr = false;		// tier-up uses on-stack-replacement
	def emptyProbes = false;	// true => all probes are empty
	def emptyStacktraces = false;	// true => all stacktraces are empty
	def legacyExceptions = false;	// for legacy phase 3 lexically-scoped exceptions
	def frameVariables = false;	// allows probes to store variables in caller frame
}

// Tuning settings for the fast interpreter that have no effect on correctness.
component FastIntTuning {
	def threadedDispatch = true;	// inline dispatch at the end of every handler
	def handlerAlignment = 8;	// align handler code in memory
	def skipRepeatedBlocks = true;	// skip repeated BLOCK bytecodes
	def dispatchEntrySize = 4;	// size of each dispatch table entry
	def inlineAllLEBs = false;	// always inline LEB slow cases
	def fourByteSidetable = true;	// sidetable entries are 4-bytes
	def entryTierUpDecrement = 1;	// "cost" of entering a function in the interpreter
	def loopTierUpDecrement = 1;	// "cost" of looping in the interpreter
	def enableWhammProbeTrampoline = true;
}

// Tuning settings for the single-pass compiler that have no effect on correctness.
component SpcTuning {
	def trackFloatZeroConst = true;
	def trackFloat32Const = false;		// XXX: enable
	def directCalls = false;		// XXX: implement
	def lazySlotZeroing = false;		// XXX: implement
	def argsInRegs = false;			// XXX: implement
	def eagerTagLocals = false;
	def fastIntTierUpThreshold = 10;	// threshold at which int -> SPC tiering occurs
	def postOsrTierUpThreshold = 1;		// threshold after completing one OSR tierup
	var intrinsifyCountProbe = true;	// recognize and optimize CountProbes
	var intrinsifyOperandProbe = true; 	// recognize and optimize OperandProbes
	var compileWhammModules = true;		// compile whamm module, if possible
	var intrinsifyWhammProbe = true;	// recognize and optimize WhammProbes
	var inlineSmallFunc = true;         // inline small functions, currently only applicable for whamm probes
	def probeCallFreesRegs = true;		// probe calls frees registers in abstract state
	def runtimeCallFreesRegs = true;	// runtime calls frees registers in abstract state
	def intrinsifyMemoryProbes = true;
}
