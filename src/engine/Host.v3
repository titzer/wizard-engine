// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Host objects must extend this class to be extern refs.
class HostObject extends Object {
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("<hostobj>");
	}
}

// Host functions must extend this class to be func refs.
type HostFunc(sig: SigDecl, invoke: Range<Value> -> HostResult) #unboxed;
class HostFunction extends Function {
	def name: string;
	def invoke: Range<Value> -> HostResult;

	new(name, sig: SigDecl, invoke) super(sig) { }

	def render(buf: StringBuilder) -> StringBuilder {
		return if(name != null, buf.put1("<hostfunc: %s>", name), buf.puts("<hostfunc>"));
	}
}

// The possible return values from calling a host function.
type HostResult {
	case Throw(thrown: Throwable);
	case Value0;
	case Value1(val: Value);
	case ValueN(vals: Array<Value>);
	case TailCall(func: Function, args: Array<Value>);
}

// Host types must extend this class to be importable.
class HostType extends ExportedType {
	def isAssignableTo(t: ValueType) -> bool {
		match (t) {
			Host(host) => return this == host;
			Ref(nullable, heap) => match (heap) {
				EXTERN => return true;
				_ => return false;
			}
			_ => return false;
		}
	}
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("<hosttype>");
	}
}
