// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// An instantiated table.
class Table(elemtype: ValueType, decl: TableDecl) extends Exportable {
	def index_tag: byte = if(decl != null && decl.size.is64, BpTypeCode.I64.code, BpTypeCode.I32.code);
	var oom = false;
	var elems = Array<Value>.new(int.view(decl.size.initial));
	var funcs: Array<Function>;	// if the elemtype is a function, a cache of direct Function refs
	var ids: Array<int>;		// if the elemtype is a function, a cache of the canonical sig id

	new() {
		match (elemtype) {  // handle initial value for function tables
			Ref(nullable, heap) => match (heap) {
				Func => {
					for (i < elems.length) elems[i] = Values.FUNCREF_NULL;
					funcs = Array.new(elems.length);
					ids = Array.new(elems.length);
					for (i < ids.length) ids[i] = -1;
				}
				_ => ;
			}
			_ => ;
		}
	}

	// Set an element in this table, updating {funcs} and {ids} if they exist.
	def [i: int] = val: Value {
		elems[i] = val;
		if (funcs != null) {
			var t = Values.toFuncAndId(val);
			funcs[i] = t.0;
			ids[i] = t.1;
		}
	}
	// Grow this table by {more} elements.
	def grow(more: u64, val: Value) -> int {
		var prev = elems.length;
		var total = u64.view(prev) + more;
		if (total > GlobalLimits.limit_table_size) return -1;
		if (!decl.size.maximum.check(total)) return -1;
		var itotal = int.!(total);
		elems = Arrays.growV(elems, itotal, val);
		if (funcs != null) {
			var t = Values.toFuncAndId(val);
			funcs = Arrays.growV(funcs, itotal, t.0);
			ids = Arrays.growV(ids, itotal, t.1);
		}
		return prev;
	}
	// Fill the given range of this table with {val}.
	def fill(dst_offset: u64, val: Value, size: u64) -> TrapReason {
		var i = boundsCheck(dst_offset, size);
		if (i < 0) return TrapReason.TABLE_OUT_OF_BOUNDS;
		var isize = int.!(size);
		for (k < isize) elems[i + k] = val;
		if (funcs != null) {
			var t = Values.toFuncAndId(val);
			for (k < isize) funcs[i + k] = t.0;
			for (k < isize) ids[i + k] = t.1;
		}
		return TrapReason.NONE;
	}
	// Copy into this table from the given source table.
	def copyT(dst_offset: u64, src: Table, src_offset: u64, size: u64) -> TrapReason {
		var r = ArrayUtil.safeCopy(elems, dst_offset, src.elems, src_offset, size);
		if (!r) return TrapReason.TABLE_OUT_OF_BOUNDS;
		updateFuncs(int.!(dst_offset), int.!(dst_offset + size));
		return TrapReason.NONE;
	}
	// Copy elements into this table.
	def copyE(instance: Instance, dst_offset: u64, elem: ElemDecl, src_offset: u64, size: u64) -> TrapReason {
		var r = Runtime.copyElemsInto(elems, instance, dst_offset, elem, src_offset, size);
		if (!r) return TrapReason.TABLE_OUT_OF_BOUNDS;
		updateFuncs(int.!(dst_offset), int.!(dst_offset + size));
		return TrapReason.NONE;
	}
	// Bounds check a range in this table.
	def boundsCheck(index: u64, size: u64) -> int {
		var length = u64.!(elems.length);
		var x = u64.!(index);
		return if(x + size > length, int.min, int.view(x));
	}
	// Update function references for the given range
	def updateFuncs(start: int, end: int) {
		if (funcs == null) return;
		for (i = start; i < end; i++) {
			var t = Values.toFuncAndId(elems[i]);
			funcs[i] = t.0;
			ids[i] = t.1;
		}
	}
}
