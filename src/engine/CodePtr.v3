// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A {CodePtr} is a wrapper around a bytecode array that has a few additional {read_*} methods
// that return encoding-level quantities (for speed). Thus it does not check indices or types
// of immediates.
class CodePtr extends DataReader {
	new(data: Array<byte>) super(data) { }

	def read_opcode() -> Opcode {
		var b = read1(), op = Opcodes.opcodes_no_prefix[b];
		if (op != Opcode.INVALID) return op;
		return if(Opcodes.isPrefix(b), Opcodes.find(b, read_uleb32()));
	}
	def read_opcode_but_skip_probe(func: FuncDecl) -> Opcode {
		var pc = pos, b = read1();
		if (b == InternalOpcode.PROBE.code || b == InternalOpcode.WHAMM_PROBE.code) b = func.orig_bytecode[pc];
		var op = Opcodes.opcodes_no_prefix[b];
		if (op != Opcode.INVALID) return op;
		return if(Opcodes.isPrefix(b), Opcodes.find(b, read_uleb32()));
	}
	def read_orig_opcode(b: byte) -> Opcode {
		skipN(1);
		var op = Opcodes.opcodes_no_prefix[b];
		if (op != Opcode.INVALID) return op;
		return if(Opcodes.isPrefix(b), Opcodes.find(b, read_uleb32()));
	}
	def read_ValueTypeCodes() -> Array<ValueTypeCode> {
		var count = int.!(read_uleb32()); // value count
		var result = Array<ValueTypeCode>.new(count);
		for (i < count) result[i] = read_ValueTypeCode();
		return result;
	}
	def read_ValueTypeCode() -> ValueTypeCode {
		var code = i8.!(read_sleb32());
		var index = 0;
		if (BpConstants.typeCodeHasIndex(code)) index = read_sleb32();
		return ValueTypeCode(code, index);
	}
	def read_BlockTypeCode() -> BlockTypeCode {
		var code = read_sleb32();
		var index = 0;
		if (BpConstants.typeCodeHasIndex(code)) index = read_sleb32();
		return BlockTypeCode(code, index);
	}
	def read_labels() -> Array<u31> {
		var count = read_uleb32();
		var length = int.!(count + 1);
		var result = Array<u31>.new(length);
		for (i < length) result[i] = read_uleb31();
		return result;
	}
	def read_handlers() -> Array<(u31, u31)> {
		var length = read_uleb31();
		var result = Array<(u31, u31)>.new(length);
		for (i < length) result[i] = (read_uleb31(), read_uleb31());
		return result;
	}
	def read_catches() -> Array<BpCatchCode> {
		var length = read_uleb31();
		var result = Array<BpCatchCode>.new(length);
		for (i < length) result[i] = read_catch();
		return result;
	}
	def read_catch() -> BpCatchCode { // TODO: factor out to WasmReader
		var b = read1();
		match (b) {
			BpCatchKind.CATCH.code => return BpCatchCode.Catch(read_uleb31(), read_uleb31());
			BpCatchKind.CATCH_REF.code => return BpCatchCode.CatchRef(read_uleb31(), read_uleb31());
			BpCatchKind.CATCH_ALL.code => return BpCatchCode.CatchAll(read_uleb31());
			BpCatchKind.CATCH_ALL_REF.code => return BpCatchCode.CatchAllRef(read_uleb31());
		}
		var d: BpCatchCode;
		return d; // TODO: error
	}
	def iterate_local_codes<T>(f: (u32, ValueTypeCode) -> T) -> int {
		var bcount = int.!(read_uleb32()); // pairs count
		for (i < bcount) {
			var count = read_uleb32();
			var code = i8.!(read_sleb32());
			var index = 0;
			if (BpConstants.typeCodeHasIndex(code)) index = read_sleb32();
			f(count, ValueTypeCode(code, index));
		}
		return bcount;
	}
	def read_MemArg() -> MemArg {
		var flags = read_uleb32();
		var mem_index = u31.!(0u);
		if ((flags & BpConstants.MEMARG_INDEX_FLAG) != 0) {
			mem_index = read_uleb31();
		}
		var offset = read_uleb64();
		return MemArg(byte.view(flags), mem_index, offset);
	}
	def read_BrOnCastImm() -> BrOnCastImm {
		var flags = read1();
		var label = read_uleb31();
		var ht1 = read_sleb32();
		var ht2 = read_sleb32();
		return BrOnCastImm(flags, label, ht1, ht2);
	}
	def skip_label() {
		skip_leb();
	}
	def skip_value_types() -> int {
		var count = read_uleb32(); // value count
		for (i < count) skip_value_type();
		return int.!(count);
	}
	def skip_local_decls() {
		var count = read_uleb32();
		for (i < count) {
			skip_leb();
			skip_value_type();
		}
	}
	def skip_value_type() {
		skip_block_type();
	}
	def skip_block_type() {
		var code = read_sleb32();
		if (BpConstants.typeCodeHasIndex(code)) skip_leb();
	}
	def skip_catch() {
		var b = read1();
		skip_leb(); // skip label or tag
		match (b) {
			BpCatchKind.CATCH.code => skip_leb(); // skip tag
			BpCatchKind.CATCH_REF.code => skip_leb(); // skip tag
			_ => ;
		}
	}
	def skip_handler() {
		skip_leb(); // tag
		skip_leb(); // depth/label
	}
	def read_uleb31() -> u31 {
		return u31.!(read_uleb32());
	}
	def peek_MemAccessKind(module: Module) -> MemAccessKind {
		var pos = this.pos;
		var memarg = read_MemArg();
		var immsize = this.pos - pos;
		this.at(pos);
		var decl = module.memories[memarg.memory_index];
		var custom_page_size = decl.log2_pageSize != BpConstants.log2_WASM_PAGE_SIZE;
		var is64 = decl.size.is64;
		if (custom_page_size && !is64) return MemAccessKind.BOUNDS_CHECK_32;
		if ((memarg.flags & BpConstants.MEMARG_INDEX_FLAG) == 0) {
			// no memory index present
			if (immsize == 1 && memarg.offset == 0) {
				// offset = 0
				return if(is64, MemAccessKind.SIMPLE_64, MemAccessKind.SIMPLE_32);
			}
			return if(is64, MemAccessKind.OFFSET_64, MemAccessKind.OFFSET_32);
		}
		return if(is64, MemAccessKind.MEM_INDEX_64, MemAccessKind.MEM_INDEX_32);
	}
	def skip_immediates(imms: Array<ImmKind>) {
		for (imm in imms) {
			match (imm) {
				ARRAY_TYPE_INDEX,
				BLOCK_TYPE,
				DATA_INDEX,
				ELEM_INDEX,
				TAG_INDEX,
				FIELD_INDEX,
				FUNC_INDEX,
				GLOBAL_INDEX,
				LABEL,
				LOCAL_INDEX,
				MEMORY_INDEX,
				SIG_INDEX,
				STRUCT_TYPE_INDEX,
				TABLE_INDEX,
				HEAP_TYPE,
				U32,
				I32,
				I64,
				CONT_INDEX => skip_leb();
				VALUE_TYPES => skip_value_types();
				LABELS => {
					var count = read_uleb32();
					for (i < count + 1) skip_leb();
				}
				EX_HANDLERS => {
					var count = read_uleb32();
					for (i < count) {
						skip_leb();
						skip_leb();
					}
				}
				SUS_HANDLERS => {
					var count = read_uleb32();
					for (i < count) {
						var kind = read_uleb32();
						skip_leb();
						if (kind == 0) skip_leb();
					}
				}
				CATCHES => {
					var count = read_uleb32();
					for (i < count) skip_catch();
				}
				MEMARG => {
					skip_leb();
					skip_leb();
				}
				ZERO_BYTE,
				LANE_INDEX => skipN(1);
				F32 => skipN(4);
				F64 => skipN(8);
				V128 => skipN(16);
				BR_CAST => {
					skipN(1);
					skip_leb(); // label
					skip_leb(); // ht1
					skip_leb(); // ht2
				}
			}
		}
	}
	def read_opcode_and_skip(func: FuncDecl) -> Opcode {
		var opcode = read_opcode_but_skip_probe(func);
		skip_immediates(opcode.imms);
		return opcode;
	}
	def dup() -> CodePtr {
		return CodePtr.new(null).reset(data, pos, limit);
	}
}
