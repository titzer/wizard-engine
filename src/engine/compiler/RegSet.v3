// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Architecture-independent representation of a register for use in {MacroAssembler} and portable
// parts of compilers. Kept small to keep data structures small. The name is stored in a {RegSet}.
type Reg(index: byte) #unboxed { }

// Describes the set of (maximum 256) registers for a target.
// By convention, register #0 is reserved for indicating an unallocated register or no register.
class RegSet(regs: Array<Reg>, names: Array<string>) {
	def length = regs.length;

	def getName(r: Reg) -> string {
		var n = names[r.index];
		if (n == null) {
			if (r.index == 0) return "unalloc";
			return "unknown";
		}
		return n;
	}
}

// Describes the register configuration for a target in terms of architecture-independent registers.
class RegConfig(regSet: RegSet) {
	var scratch: Reg;
	var sp: Reg;
	var vfp: Reg;

	var poolMap: PoolMap;
	var regPools: Array<RegPool32>;
}

// Describes how registers in a set are assigned to pools and how {ValueKind}s are assigned to pools.
class PoolMap(regSet: RegSet, numRegPools: int) {
	def numRegs = regSet.regs.length;
	def regToPool = Array<i8>.new(numRegs);
	def kindToPool = Array<byte>.new(ValueKind.count);
}

// A register pool is an ordered list of (maximum 32) registers and is used in register allocation.
// This object maintains the public {map} which maps each register in {regs} to its index in the list.
class RegPool32(regs: Array<Reg>) {
	def var map: Array<u5>; // maps a {reg.index} to an index into {regs}.

	new() {
		if (regs.length > 32) System.error("RegPoolError", "maximum of 32 registers exceeded");
		var max = int.min;
		for (r in regs) if (r.index > max) max = r.index;
		map = Array<u5>.new(max + 1);
		for (i < regs.length) map[regs[i].index] = u5.!(i);
	}
}