// Copyright 2025 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses command-line options that configure an engine.
component CompilerOptions {
	def JIT_FILTER = Option.new<DeclFilter>("jit-filter", null, DeclFilters.parseString);
	var group: OptionGroup;

	new() {
		if (SpcTuning.disable) return; // compiler disabled by build configuration

		group = OptionsRegistry.newGroup("COMPILER", printHelp);

		group.add(group.o.add(JIT_FILTER), "=<function patterns>", "Only compile functions matching the filter.");

		group.newIntOption("tierup-threshold", SpcTuning.fastIntTierUpThreshold, "Threshold at which \"dyn\" mode triggers JIT compilation.")
			.onSet(fun v => void(SpcTuning.fastIntTierUpThreshold = v));
		group.newBoolOption("inline-global-access", true, "Inline primitive global accesses.")
			.onSet(fun v => void(SpcTuning.inlineGlobalAccess = v));
		group.newBoolOption("intrinsify-count-probes", true, "Generate custom code for count probes.")
			.onSet(fun v => void(SpcTuning.intrinsifyCountProbe = v));
		group.newBoolOption("intrinsify-whamm-probes", true, "Generate custom code for whamm probes.")
			.onSet(fun v => void(SpcTuning.intrinsifyWhammProbe = v));
		group.newBoolOption("intrinsify-memory-probes", true, "Generate custom code for memory probes.")
			.onSet(fun v => void(SpcTuning.intrinsifyMemoryProbes = v));
		group.newBoolOption("compile-whamm-modules", true, "Compile whamm monitor modules before execution.")
			.onSet(fun v => void(SpcTuning.compileWhammModules = v));
		group.newBoolOption("inline-whamm-probes", true, "Inline small whamm probes.")
			.onSet(fun v => void(SpcTuning.inlineSmallFunc = v));
	}

	def printHelp(out: TraceBuilder) {
		var H = out.putsln, L = out.ln;
		H("Wizard's JIT compiler can be configured with tuning flags as described below.");
		L();

		group.print(out, false);
	}
}
