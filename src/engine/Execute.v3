// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The {Execute} component provides an all-purpose facade to the rest of the engine and runtime
// that deals with execution, modes, and stack traces. It separates the runtime from specifics
// of the target, which may have one or more execution tiers.
component Execute {
	var limits = Limits.new();		// limits on execution/memory
	var tiering: ExecutionStrategy;
	def trapObjects = Array<Trap>.new(TrapReason.count);

	new() {
		for (r in TrapReason) trapObjects[r.tag] = Trap.new(r, null, null);
	}

	// Call a given function with the given arguments.
	def call(func: Function, args: Range<Value>) -> Result {
		return tiering.call(func, args);
	}

	// Traces calls to host functions.
	def traceCallHostFunction(hf: HostFunction) {
		Trace.OUT.put2("callHost(\"%q\": %q)", hf.render, hf.sig.render).ln();
	}
}

type Result {
	case Value(vals: Array<Value>);
	case Throw(thrown: Throwable);
	// should only be used in V3Interpreter
	// TODO: maybe include original stack for error reporting?
	case Switch(stack: WasmStack);

	def equals(that: Result) -> bool {
		if (this == that) return true;
		if (Result.Value.?(this) && Result.Value.?(that)) {
			var a = Result.Value.!(this).vals;
			var b = Result.Value.!(that).vals;
			return Arrays.equal(a, b);
		}
		if (Result.Throw.?(this) && Result.Throw.?(that)) {
			var a = Result.Throw.!(this).thrown;
			var b = Result.Throw.!(that).thrown;
			if (a == b) return true;
			if (Trap.?(a) && Trap.?(b)) {
				return Trap.!(a).reason == Trap.!(b).reason;
			}
			if (Exception.?(a) && Exception.?(b)) {
				var xa = Exception.!(a);
				var xb = Exception.!(b);
				if (xa.tag.decl != xb.tag.decl) return false;
				return Arrays.equal(xa.vals, xb.vals);
			}
		}
		if (Result.Switch.?(this) && Result.Switch.?(that)) {
			var a = Result.Switch.!(this);
			var b = Result.Switch.!(that);
			return a.stack == b.stack;
		}
		return false;
	}
	def render(buf: StringBuilder) -> StringBuilder {
		match (this) {
			Value(vals) => {
				if (vals == null) {
					buf.puts("<null>");
				} else if (vals.length == 1) {
					Values.render(vals[0], buf);
				} else {
					Values.renderVals(buf, vals);
				}
			}
			Throw(thrown) => thrown.render(buf);
			Switch(stack) => buf.puts("<switch to stack>");
		}
		return buf;
	}
}

// The various ways user code can resume from a break, trap, or timeout
type Resumption {
	case Continue;
	case Trap(reason: TrapReason, trace: bool);
}

// The execution strategy controls how the engine executes Wasm bytecode, e.g. whether
// an interpreter or compiler(s) are used, and at what points. It interposes at a number
// of important events in the lifecycle of Wasm modules and instances and may or may not
// perform synchronous or asynchronous work.
class ExecutionStrategy {
	// Called upon selection of this strategy (e.g. by command-line flag).
	def onActivate() { }

	// Called during execution startup and exit.
	def onEngineStart() { }
	def onEngineExit(code: int) { }

	// Called if monitors are activated for the program.
	def onMonitorsStart() { }
	def onFuncProbeInsert1(module: Module, func: FuncDecl, offset: int, p: Probe) { }
	def onFuncProbeInsert2(module: Module, func: FuncDecl, offset: int, p: Probe) { }
	def onFuncProbeInsertN(module: Module, func: FuncDecl, offset: int, p: Probe) { }
	def onFuncProbeRemove(module: Module, func: FuncDecl, offset: int) { }
	def onMonitorsFinish(module: Module, err: ErrorGen) { }

	// Called during binary decoding of a module and relevant sections.
	// Note that code validation has not yet been performed.
	// Example usage: pre-allocate code space and start compiler threads.
	def onModuleStart(module: Module, size: u32) { }			// note: size == 0 if estimate only
	def onCodeSectionStart(module: Module, num_funcs: u32, size: u32) { }
	def onFuncBody(module: Module, func_index: u32, body: Range<byte>, err: ErrorGen) { }
	def onCodeSectionFinish(module: Module, num_funcs: u32, size: u32, err: ErrorGen) { }
	def onModuleFinish(module: Module, size: u32, err: ErrorGen) { }		// note: size is exact

	// Called when a function has its code validated.
	// Example usage: do synchronous (AOT) one-off compile.
	def onFuncValidationStart(module: Module, func: FuncDecl) { }
	def onFuncValidationFinish(module: Module, func: FuncDecl, err: ErrorGen) { }

	// Called when a module is instantiated.
	// Example usage: generate code specialized to import bindings.
	def onInstantiateStart(instantiator: Instantiator) { }
	def onInstantiateFinish(instantiator: Instantiator, err: ErrorGen) { }

	// Called before a test run of a function. (For testing only).
	def onTestModule(m: Module) { }
	def onTestRun(wf: WasmFunction, err: ErrorGen) { }

	// Called if a new function is created in a module.
	def onNewFunction(wf: WasmFunction, err: ErrorGen) { }

	// Called if a function is detected as "hot" at a particular location (e.g. loop header)
	// that probably merits on-stack-replacement.
	def onTierUp(wf: WasmFunction, pc: int) -> TargetOsrInfo {
		var d: TargetOsrInfo;
		return d; // default: no OSR occurred
	}

	// Call a function with arguments and return a result.
	// Example implementation: call into the interpreter.
	def call(func: Function, args: Range<Value>) -> Result;
}

// Deals with command-line options for selecting the mode, printing help, etc.
component ExecuteOptions {
	private var modes: List<(string, ExecutionStrategy, string)>;
	def var default: ExecutionStrategy;

	// Used internally to register different execution strategies.
	def registerMode(name: string, tiering: ExecutionStrategy, help: string) -> ExecutionStrategy {
		modes = List.new((name, tiering, help), modes);
		return tiering;
	}
	// Used internally to register different execution strategies.
	def registerDefaultMode(name: string, tiering: ExecutionStrategy, help: string) -> ExecutionStrategy {
		registerMode(name, tiering, help);
		Execute.tiering = default = tiering;
		return tiering;
	}
	// Set the mode from a command-line option.
	def setMode(name: Range<byte>) -> bool {
		for (l = modes; l != null; l = l.tail) {
			var t = l.head;
			if (ArrayUtil.equal(t.0, name)) {
				t.1.onActivate();
				Execute.tiering = t.1;
				return true;
			}
		}
		return false;
	}
	// Returns the execution strategy for a given flag, or default if not found.
	def getModeOrDefault(name: string) -> ExecutionStrategy {
		for (l = modes; l != null; l = l.tail) {
			var t = l.head;
			if (Strings.equal(t.0,name)) return t.1;
		}
		return default;
	}

	// Print help for the supported modes.
	def printHelp(out: TraceBuilder) {
		var H = out.putsln, L = out.ln;
		H("This build of the Wizard Engine supports the following execution modes:");
		L();
		for (l = modes; l != null; l = l.tail) {
			var t = l.head;
			out.puts("    -mode=");
			out.puts(t.0);
			out.pad(' ', 32);
			if (t.1 == default) out.puts("(default) ");
			out.puts(t.2);
			out.ln();
		}
	}
}
