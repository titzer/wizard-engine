// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// {Target} is the static configuration of target-specific subsystems such as the implementation of
// memories and the execution strategy. The {V3} target (this file) provides a pure-Virgil
// interpreter-only mode suitable (but slow) for any compilation target.
component Target {
	def limit_memory_pages = 30000u;
	def newMemory = V3Memory.new;
	def newWasmStack = V3Interpreter.new;
	var unused_ = ExecuteOptions.registerDefaultMode("v3-int", V3InterpreterOnlyStrategy.new(), "slow interpreter only");

	def forceGC() { } // nop
	def ticksNs() -> u64 { return u32.view(System.ticksNs()); }
	def rdtsc() -> u64 { return u32.view(System.ticksNs()); }
	def getRdtsc() -> (void -> u64) { return rdtsc; }
	def pregenIntoFile(filename: string) -> ErrorBuilder {
		return ErrorBuilder.new().puts("interpreter generator: nothing to generate for this target");
	}

	def getTestTiers() -> List<(string, ExecutionStrategy)> {
		var int_mode = ("int:", V3InterpreterOnlyStrategy.new());
		return List.new(int_mode, null);
	}
	def fastFwCopy(dst: Range<byte>, src: Range<byte>) {
		var i = 0u, max = dst.length & ~7;
		// XXX: for targets without efficient ByteArrayGetField access, a byte-by-byte copy is faster.
		while (i < max) {
			var dref = Ref<Layout_u64>.of(dst[i ...]); // XXX: use at with Range?
			var sref = Ref<Layout_u64>.of(src[i ...]); // XXX: use at with Range?
			dref.val = sref.val;
			i += 8;
		}
		while (i < dst.length) {
			dst[i] = src[i];
			i++;
		}
	}
}

// A one-element cache for recycling storage of Wasm stacks (interpreters).
var cached_stack: V3Interpreter;

// A simple tiering strategy consisting of only the V3 interpreter.
class V3InterpreterOnlyStrategy extends ExecutionStrategy {
	def call(func: Function, args: Range<Value>) -> Result {
		var stack = cached_stack;
		cached_stack = null;
		if (stack == null) stack = V3Interpreter.new();
		stack.reset(func).bind(args);
		while (stack != null) {
			// This execution loop handles the following things:
			// - Creates a linked list of parent/children when a continuation
			//   is resumed, and clear the link once the children suspends or
			//   terminates.
			// - Switches the current stack based on the stack switch request
			//   in the execution `Result`.

			// Runs the stack until a result is produced.
			var r: Result;
			var state = stack.state();
			if (Trace.stack) Trace.OUT.put1("resume[state=%s]", state.name).ln();
			match (state) {
				RESUMABLE => r = stack.resume();
				THROWING => r = stack.clearAndThrow();
				_ => {
					var msg = Strings.format1("unexpected state %s", state.name);
					return Result.Throw(Trap.new(TrapReason.INVALID_RESUME, msg, null));
				}
			}

			match (r) {
				// The stack terminated. If there is no parent stack in the
				// execution stack chain, return the values as the result.
				// Otherwise add the values to the stack.
				Value(vals) => {
					if (Trace.stack) Trace.OUT.put1("return %q", Values.renderVals(_, vals)).ln();
					if (stack.parent == null) {
						if (cached_stack == null) cached_stack = stack;
						return Result.Value(Ranges.dup(vals));
					}
					stack = popStackInChain(stack);
					stack.onChildTerminate(vals);
				}
				Throw(thrown) => {
					if (Trace.stack) Trace.OUT.put1("throw %q", thrown.render).ln();
					if (stack.parent == null) {
						if (cached_stack == null) cached_stack = stack;
						return Result.Throw(thrown);
					}
					stack = popStackInChain(stack);
					stack.onChildThrow(thrown);
				}
				StackSwitch(info) => {
					match (info) {
						Suspend(top, tag, vals) => {
							if (Trace.stack) Trace.OUT.put2("suspend %q %q", tag.render, Values.renderVals(_, vals)).ln();

							// Unwind up the stack chain until the suspension gets handled.
							while (true) {
								if (stack.parent == null) return Result.StackSwitch(info);

								var prev = stack;
								var cont = Continuation.new(top, prev);
								stack = V3Interpreter.!(stack.parent);
								if (stack.tryHandleSuspend(cont, tag, vals)) break;
							}
						}
						Switch(new_cont, top, tag, vals) => {
							if (Trace.stack) Trace.OUT.put2("switch %q %q", tag.render, Values.renderVals(_, vals)).ln();

							// Unwind up the stack chain until the suspension gets handled.
							while (true) {
								if (stack.parent == null) return Result.StackSwitch(info);

								var prev = stack;
								stack = V3Interpreter.!(stack.parent);
								if (stack.canHandleSwitch(tag)) {
									prev.parent = null;
									new_cont.bottom.parent = stack;

									stack = V3Interpreter.!(new_cont.top);
									new_cont.top.bind(vals);
									new_cont.top.bind([Value.Ref(Continuation.new(top, prev))]);
									break;
								}
							}
						}
						RunChildStack(cont) => {
							if (Trace.stack) Trace.OUT.put1("resuming to child %q", cont.render).ln();
							cont.bottom.parent = stack;
							stack = V3Interpreter.!(cont.top);
						}
					}
				}
			}
		}
		return Result.Throw(Trap.new(TrapReason.UNREACHABLE, null, null));
	}

	private def popStackInChain(stack: V3Interpreter) -> V3Interpreter {
		var parent = V3Interpreter.!(stack.parent);
		stack.parent = null;
		return parent;
	}
}

type TargetOsrInfo #unboxed { }
type TargetCode #unboxed { }
type TargetModule #unboxed { }
type TargetFrame(frame: V3Frame) #unboxed {
	def getFrameAccessor() -> FrameAccessor {
		if (frame.accessor == null) frame.accessor = V3FrameAccessor.new(frame);
		return frame.accessor;
	}
}
