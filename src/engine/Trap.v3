// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Reasons a WebAssembly execution has trapped.
enum TrapReason {
	NONE,
	UNREACHABLE,
	MEM_OUT_OF_BOUNDS,
	DIV_BY_ZERO,
	DIV_UNREPRESENTABLE,
	FLOAT_UNREPRESENTABLE,
	FUNC_INVALID,
	FUNC_SIG_MISMATCH,
	DATA_SEGMENT_DROPPED,
	ELEM_SEGMENT_DROPPED,
	TABLE_OUT_OF_BOUNDS,
	STACK_OVERFLOW,
	NULL_DEREF,
	UNIMPLEMENTED,
	ARRAY_INDEX_OOB,
	OOM,
	FAILED_CAST,
	INVALID_OPCODE,
	TIMEOUT,
	NO_EXPORTED_MEM,
	USED_CONTINUATION,
	INVALID_RESUME,
	INVALID_SUSPEND, // also used for `suspend` when no handler is found
	HOST,
	BREAK,
	ERROR
}

// An unboxed result type representing a <T> or a trap. XXX: use an unboxed ADT.
type MaybeTrap<T>(result: T, reason: TrapReason) #unboxed {
	// Check if this represents a trap.
	def ok() -> bool { return reason == TrapReason.NONE; }
	// Check if this represents a trap.
	def trapped() -> bool { return reason != TrapReason.NONE; }
	// If this result doesn't represent a trap, call {f} and wrap that also in a {MaybeTrap<R>}.
	def then<R>(f: T -> R) -> MaybeTrap<R> {
		return MaybeTrap<R>(if(reason == TrapReason.NONE, f(result)), reason);
	}
	// If this result doesn't represent a trap, call {f} and wrap that also in a {MaybeTrap<R>}.
	def thenP<P, R>(f: (T, P) -> R, p: P) -> MaybeTrap<R> {
		return MaybeTrap<R>(if(reason == TrapReason.NONE, f(result, p)), reason);
	}
	// If this result represents a trap, call {f} and return {true}. Otherwise return {false}.
	def trap<R>(f: TrapReason -> R) -> bool {
		if (reason == TrapReason.NONE) return false;
		f(reason);
		return true;
	}
	def toHostResultThrow() -> HostResult.Throw {
		return HostResult.Throw(Trap.new(reason, null, null));
	}
	def toHostResult(box: T -> Value) -> HostResult {
		return if(reason == TrapReason.NONE, HostResult.Value1(box(result)), HostResult.Throw(Trap.new(reason, null, null)));
	}
}

component Traps {
	def result(reason: TrapReason) -> Result.Throw {
		return Result.Throw(Trap.new(reason, null, null));
	}
}

// The superclass of all objects that can be thrown and have optional stacktraces.
class Throwable(var stacktrace: StackSegment) extends Object {
	// Prepend more frames to the beginning of the stacktrace.
	def prependFrames(frames: Array<(WasmFunction, int)>) -> this {
		stacktrace = StackSegment.new(stacktrace, null, frames);
	}
	def prependHostFunction(hf: HostFunction) -> this {
		if (hf == null) return;
		else if (stacktrace == null) stacktrace = StackSegment.new(null, hf, NO_FRAMES);
		else if (stacktrace.host != null) stacktrace = StackSegment.new(stacktrace, hf, NO_FRAMES);
		else stacktrace = StackSegment.new(null, hf, stacktrace.frames);
	}
	def render(buf: StringBuilder) -> StringBuilder;
}

// Represents Wasm traps that can be thrown (but not currently caught).
class Trap extends Throwable {
	def reason: TrapReason;
	def msg: string;

	new(reason, msg, stacktrace: StackSegment) super(stacktrace) { }

	def render(buf: StringBuilder) -> StringBuilder {
		buf.put1("trap[%s", reason.name);
		if (msg != null) buf.puts(", ").puts(msg);
		return buf.puts("]");
	}
}

// Represents Wasm exceptions that can be thrown and caught.
class Exception extends Throwable {
	def tag: Tag;
	def vals: Array<Value>;

	new(tag, vals, stacktrace: StackSegment) super(stacktrace) { }

	def render(buf: StringBuilder) -> StringBuilder {
		buf.put1("exception[tag=%d]", tag.decl.sig_index);
		Values.renderVals(buf, vals);
		return buf;
	}
}

// Represents an exit with an exit code.
class Exit(code: u32) extends Throwable(null) {
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.put1("exit=%d", code);
	}
}

// Represents an internal error, separate from a trap, that cannot be caught.
class InternalError extends Throwable {
	def msg: string;

	new(msg, stacktrace: StackSegment) super(stacktrace) { }

	def render(buf: StringBuilder) -> StringBuilder {
		return buf.put1("internal error: %s", msg);
	}
}

// A stack segment consists of an array of frames (caller to callee order), an optional host function outcall,
// and a next segment.
class StackSegment(prev: StackSegment, var host: HostFunction, frames: Array<(WasmFunction, int)>) {
}

def NO_FRAMES = Array<(WasmFunction, int)>.new(0);
