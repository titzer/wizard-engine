// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Extensions that enable various features of the engine.
enum Extension(short_name: string, help: string) {
	TAIL_CALL("tail-call", "Tail calls"),
	MULTI_MEMORY("multi-memory", "Multiple memories"),
	FUNCTION_REFERENCES("function-references", "Typed function references"),
	ATOMICS("threads", "Atomic operations"),
	GC("gc", "Garbage collection"),
	EXCEPTION_HANDLING("exception-handling", "Exception handling"),
	MEMORY64("memory64", "64-bit memories"),
	REPEAT_SECTIONS("repeat-sections", "Repeated sections and relaxed order"),
	STACK_SWITCHING("stack-switching", "Stack switching"),
	CUSTOM_PAGE_SIZES("custom-page-sizes", "Custom page sizes"),
	EXTENDED_CONST("extended-const", "Extended Constant Expressions"),
	WIZENG("wizeng", "Wizard-specific engine capabilities"),
}
component Extensions {
	def setImplications(set: Extension.set) -> Extension.set {
		if (set.STACK_SWITCHING) {
			set |= Extension.GC;
			set |= Extension.EXCEPTION_HANDLING;
		}
		if (set.MEMORY64) {
			set |= Extension.MULTI_MEMORY;
			set |= Extension.EXTENDED_CONST;
			set |= Extension.GC;
			set |= Extension.EXCEPTION_HANDLING;
		}
		if (set.CUSTOM_PAGE_SIZES) {
			set |= Extension.MULTI_MEMORY;
			set |= Extension.MEMORY64;
			set |= Extension.EXCEPTION_HANDLING;
			set |= Extension.EXTENDED_CONST;
		}
		if (set.GC) set |= Extension.FUNCTION_REFERENCES;
		if (set.FUNCTION_REFERENCES) set |= Extension.TAIL_CALL;
		if (set.EXCEPTION_HANDLING) set |= Extension.TAIL_CALL;
		return set;
	}
}
