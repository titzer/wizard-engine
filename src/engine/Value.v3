// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// WebAssembly program values.
type Value {
	case Ref(val: Object);
	case I31(val: u31);
	case I32(val: u32);
	case I64(val: u64);
	case F32(bits: u32);
	case F64(bits: u64);
	case V128(low: u64, high: u64);
}

// Categorization of values into storage kinds.
enum ValueKind(code: byte) {
	I32(BpTypeCode.I32.code),
	I64(BpTypeCode.I64.code),
	F32(BpTypeCode.F32.code),
	F64(BpTypeCode.F64.code),
	V128(BpTypeCode.V128.code),
	REF(BpTypeCode.REF.code),
}

// Superclass of all objects referred to by Value.Ref, including external refs.
class Object extends Exportable { }

// Objects allocated on the "wasm" GC heap, i.e. from the GC proposal.
class HeapObject(decl: HeapTypeDecl, vals: Array<Value>) extends Object {}
class HeapStruct extends HeapObject {
	new(decl: StructDecl, vals: Array<Value>) super(decl, vals) { }
}
class HeapArray extends HeapObject {
	new(decl: ArrayDecl, vals: Array<Value>) super(decl, vals) { } // XXX: unboxed prim arrays
}

// Utilities associated with values.
component Values {
	def I32_1 = Value.I32(1);
	def I32_0 = Value.I32(0);
	def I64_0 = Value.I64(0);
	def F32_0 = Value.F32(0);
	def F64_0 = Value.F64(0);
	def V128_0 = Value.V128(0, 0);
	def F32_minus_0		= Value.F32(0x8000_0000);
	def F64_minus_0		= Value.F64(0x8000_0000_0000_0000);
	def F32_nan		= Value.F32(0x7fc0_0000);
	def F64_nan		= Value.F64(0x7ff8_0000_0000_0000);
	def F32_infinity	= Value.F32(0x7f80_0000);
	def F64_infinity	= Value.F64(0x7ff0_0000_0000_0000);
	def F32_minus_infinity	= Value.F32(0xff80_0000);
	def F64_minus_infinity	= Value.F64(0xfff0_0000_0000_0000);
	def FUNCREF_NULL = Value.Ref(null);
	def REF_NULL = FUNCREF_NULL;
	def NONE = Array<Value>.new(0);
	def NO_SUPERS = Array<HeapTypeDecl>.new(0);

	def render(v: Value, buf: StringBuilder) -> StringBuilder {
		match (v) {
			Ref(val) => match (val) {
				x: HostObject => buf.put1("<externref %q>", x.render);
				x: WasmFunction => buf.put1("<funcref: #%d>", x.decl.func_index);
				x: HeapStruct => {
					var id = if(x.decl == null, -1, x.decl.heaptype_index);
					buf.put1("<ref struct #%d>", id);
				}
				x: HeapArray => {
					var id = if(x.decl == null, -1, x.decl.heaptype_index);
					buf.put1("<ref array #%d>", id);
				}
				x: Continuation => buf.put1("<continuation %q>", x.render);
				x: Object => x.render(buf);
				null => buf.puts("<ref null>");
			}
			I31(val) => buf.put1("i31:%d", u32.view(val));
			I32(val) => buf.put1("%d", val);
			I64(val) => buf.put1("%duL", val);
			F32(val) => buf.put1("f32:%x", val);
			F64(val) => buf.put1("f64:%x", val);
			V128(low, high) => buf.puts("v128:").putx_64(high).putc('_').putx_64(low);
		}
		return buf;
	}
	def renderVals(buf: StringBuilder, av: Range<Value>) -> StringBuilder {
		buf.putc('(');
		Trace.renderCspRange(buf, av, Values.render);
		buf.putc(')');
		return buf;
	}
	def isNull(v: Value) -> bool {
		return v == REF_NULL;
	}
	def isFunc(v: Value) -> bool {
		return Value.Ref.?(v) && Function.?(Value.Ref.!(v).val);
	}
	def isData(v: Value) -> bool {
		match (v) {
			Ref(o) => return HeapObject.?(o) || HeapArray.?(o);
			_ => return false;
		}
	}
	def isArray(v: Value) -> bool {
		match (v) {
			Ref(o) => return HeapArray.?(o);
			_ => return false;
		}
	}
	def isI31(v: Value) -> bool {
		return Value.I31.?(v);
	}
	def default(t: ValueType) -> Value {
		var v: Value;
		match (t) {
			BOTTOM => v = REF_NULL; // TODO: no default for bottom
			I32 => v = I32_0;
			I64 => v = I64_0;
			F32 => v = F32_0;
			F64 => v = F64_0;
			V128 => v = V128_0;
			Host,
			Ref => v = REF_NULL;
		}
		return v;
	}
	// Unboxing utilities.
	def unbox_i(v: Value) -> i32	{ return i32.view(Value.I32.!(v).val); }
	def unbox_u(v: Value) -> u32	{ return Value.I32.!(v).val; }
	def unbox_u8(v: Value) -> u8	{ return u8.view(Value.I32.!(v).val); }
	def unbox_u16(v: Value) -> u16	{ return u16.view(Value.I32.!(v).val); }
	def unbox_fu32(v: Value) -> u32	{ return Value.F32.!(v).bits; }
	def unbox_du64(v: Value) -> u64	{ return Value.F64.!(v).bits; }
	def unbox_f(v: Value) -> float	{ return float.view(Value.F32.!(v).bits); }
	def unbox_d(v: Value) -> double	{ return double.view(Value.F64.!(v).bits); }
	def unbox_l(v: Value) -> i64	{ return i64.view(Value.I64.!(v).val); }
	def unbox_w(v: Value) -> u64	{ return Value.I64.!(v).val; }
	def unbox_w8(v: Value) -> u8	{ return u8.view(Value.I64.!(v).val); }
	def unbox_w16(v: Value) -> u16	{ return u16.view(Value.I64.!(v).val); }
	def unbox_w32(v: Value) -> u32	{ return u32.view(Value.I64.!(v).val); }
	def unbox_s(v: Value) -> (u64, u64) {
		var b = Value.V128.!(v);
		return (b.low, b.high);
	}

	// Boxing utilities.
	def box_i(v: i32) -> Value { return Value.I32(u32.view(v)); }
	def box_u(v: u32) -> Value { return Value.I32(v); }
	def box_l(v: i64) -> Value { return Value.I64(u64.view(v)); }
	def box_f(v: float) -> Value { return Value.F32(u32.view(v)); }
	def box_d(v: double) -> Value { return Value.F64(u64.view(v)); }
	def box_fu32(v: u32) -> Value { return Value.F32(v); }
	def box_du64(v: u64) -> Value { return Value.F64(v); }
	def box_w(v: u64) -> Value { return Value.I64(v); }
	def box_s(x: u64, y: u64) -> Value { return Value.V128(x, y); }

	def toFuncAndId(val: Value) -> (Function, int) {
		match (val) {
			Ref(val) => match (val) {
				x: Function => return (x, Canon.sigId(x.sig));
			}
			_ => ;
		}
		return (null, -1);
	}
	def kind(val: Value) -> ValueKind {
		match (val) {
			I32 => return ValueKind.I32;
			I64 => return ValueKind.I64;
			F32 => return ValueKind.F32;
			F64 => return ValueKind.F64;
			V128 => return ValueKind.V128;
			_ => return ValueKind.REF;
		}
	}
}
