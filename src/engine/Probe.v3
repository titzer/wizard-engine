// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A probe can be inserted at a particular instruction (or all instructions) and fires when the
// instruction is executed.
class Probe {
	// Called when reaching a probe (e.g. before executing an instruction).
	def fire(dynamicLoc: DynamicLoc) -> ProbeAction { return ProbeAction.Continue; }
}

// Represents a host frame in a stacktrace.
class HostFrame {
	def caller() -> FrameLoc;
}

// Internal utility to manage a mutable list of probes. Probe lists are designed to support
// reentrant modifications by deferring changes and then applying them after iteration.
class ProbeList extends Probe {
	var elem: ProbeElem;
	private var last: ProbeElem;
	var onEnable: void -> void;	// callback when probe list becomes non-empty
	var onDisable: void -> void;	// callback when probe list becomes empty

	private var deferred: Vector<(bool, Probe)>;
	private var defer: bool;

	// Add a new probe to this list. Deferred if the list is currently executing {fire()}.
	def add(p: Probe) {
		if (defer) {
			if (deferred == null) deferred = Vector.new();
			deferred.put(false, p);
			return;
		}
		var n = ProbeElem.new(p);
		if (last != null) {
			last = last.next = n;
			return;
		}
		last = elem = n;
		if (onEnable != null) onEnable();
	}
	// Remove a probe from this list. Deferred if the list is currently executing {fire()}.
	def remove(p: Probe) {
		if (defer) {
			if (deferred == null) deferred = Vector.new();
			deferred.put(true, p);
			return;
		}
		var prev: ProbeElem;
		for (e = elem; e != null; (prev = e, e = e.next)) {
			if (e.probe == p) {
				if (prev != null) prev.next = e.next;
				else elem = e.next;
				if (e == last) last = prev;
				break;
			}
		}
		if (elem == null && onDisable != null) onDisable();
	}
	// Fire all probes in this list. Defers reentrant changes until after the last probe
	// has fired. If any probe traps, rather than continuing, the last trap is returned.
	def fire(dynamicLoc: DynamicLoc) -> ProbeAction {
		Metrics.probe_fires.val--;
		var prev = defer; // handle reentrant fire()
		defer = true;
		var action: ProbeAction = ProbeAction.Continue;
		for (e = elem; e != null; e = e.next) {
			Metrics.probe_fires.val++;
			var a = e.probe.fire(dynamicLoc);
			if (a != ProbeAction.Continue) action = a;
		}
		defer = prev;
		if (deferred != null && !defer) {
			for (i < deferred.length) {
				var t = deferred[i];
				if (t.0) remove(t.1);
				else add(t.1);
			}
		}
		if (deferred != null) deferred.resize(0);
		return action;
	}
	// Remove all probes.
	def clear() {
		last = elem = null; // TODO: defer clearing too?
		if (onDisable != null) onDisable();
	}
}
// Used internally for singly-linked list management.
private class ProbeElem(probe: Probe) {
	var next: ProbeElem;
}
