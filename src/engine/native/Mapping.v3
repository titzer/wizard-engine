// Copyright 2025 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The (root) handle for a memory region. Don't lose it!
// When the mapping is garbage collected, the memory range will be unmapped automatically,
// if the underlying range has not been manually unmapped.
class Mapping(range: MemoryRange) { }

// A revokable handle over a memory range.
class MemoryRange {
	def var start: Pointer;
	def var end: Pointer;

	new(start, end) { }

	def unmap() {
		if (start == Pointer.NULL) return; // already deallocated
		Mmap.unmap(start, u64.!(end - start));
		start = end = Pointer.NULL;
	}
	def size() -> u64 {
		return u64.view(end - start);
	}
	def contains(p: Pointer) -> bool {
		return p >= start && p < end;
	}
	def range(offset: int, length: int) -> Range<byte> {
		return CiRuntime.forgeRange(this.start + offset, length);
	}
}
