// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A monitor provides visibility into the execution of Wasm program by instrumenting code
// and/or events that occur while it is running, such as by tracing or collecting statistics
// that are reported upon program finish.
class Monitor {
	var out = Trace.OUT;
	// Configure the monitor based on additional arguments supplied on the command line.
	// If any syntax errors are detected in the arguments, this method should return a
	// non-null message to be reported to the user.
	def configure(args: string) -> string {
		return null;
	}
	// Called by the engine after a module is successfully parsed. A monitor may insert
	// instrumentation into the module that will be apply to all instances of the module.
	def onParse(m: Module, err: ErrorGen) {
	}
	// Called by the engine during instantiation when a binding is supplied for an import
	// to a module. A monitor may interpose on the binding (e.g. by wrapping an imported
	// call).
	def onBind(m: Module, d: Decl, e: Exportable) -> Exportable {
		return e;
	}
	// Called by the engine after a module is successfully instantiated. A monitor may
	// insert instrumentation specific to the instance, e.g. on the exports.
	def onInstantiate(i: Instance) {
	}
	// Called by the engine when the execution state is reset.
	def onReset() {
	}
	// Called by the engine before an instance is started.
	def onStart(f: Function) {
	}
	// Called by the engine before the main method, if any, is called.
	def onMain(f: Function, args: Array<Value>) {
	}
	// Called by the engine before a spectest invokes a function.
	def onTest(f: Function, args: Array<Value>) {
	}
	// Called by the engine after the instance has finished executing, e.g. to print
	// a report.
	def onFinish(i: Instance, r: Result) {
	}
}

