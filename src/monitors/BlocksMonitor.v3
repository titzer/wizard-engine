// Copyright 2024 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def blocks_ = MonitorRegistry.add(
	"blocks", "Tallies basic block counts per function.",
	BlocksMonitor.new());

// Instruments functions to count the dynamic frequency of every basic block.
class BlocksMonitor extends Monitor {
	def entries = Vector<(FuncDecl, Array<BasicBlockCount>)>.new();

	def onParse(module: Module, err: ErrorGen) {
		var bb = BasicBlockIterator.new();
		var bi = BytecodeIterator.new();
		var vec = Vector<BasicBlockCount>.new();
		for (i < module.functions.length) {
			var func = module.functions[i];
			if (func.imp != null) continue;
			bb.reset(func);
			bi.reset(func);
			while (bb.more()) {
				var r = bb.current(), counter = CountProbe.new();
				Instrumentation.insertLocalProbe(module, func.func_index, r.0, counter);
				// count instructions manually
				var instrs = 0;
				bi.at(r.0);
				while (bi.more() && bi.pc <= r.1) {
					instrs++;
					bi.next();
				}
				vec.put(BasicBlockCount(r.0, r.1, instrs, counter));
				bb.next();
			}
			entries.put(func, vec.extract());
		}
	}
	def onFinish(instance: Instance, r: Result) {
		for (i < entries.length) {
			var e = entries[i];
			var func = e.0, counts = e.1;
			for (c in counts) {
				if (c.counter.count > 0) {
					output(instance.module, func, counts);
					break;
				}
			}
		}
	}
	def output(module: Module, func: FuncDecl, x: Array<BasicBlockCount>) {
		out.beginColor(Color.FUNC)
			.put1("func %q:", func.render(module.names, _))
			.endColors()
			.ln();

		for (e in x) {
			out.beginColor(Color.LINE);
			out.mark()
				.put1("+%d", e.start)
				.rjustify_mark(5)
				.sp();
			out.mark()
				.put1("... %d", e.end);
			var pad = out.get_ljustify(9);
			out.endColors();
			out.puts(": ");
			for (i < pad) out.putc(' ');

			out.mark()
				.putd(e.instrs)
				.rjustify_mark(5);
			out.beginColor(if(e.counter.count > 0, Color.COUNT, Color.UNREACHABLE));
			out.mark()
				.put1(" x %d", e.counter.count)
				.rjustify_mark(11);
			out.endColors();
			out.ln();
		}
	}
}

def compareEntries(a: BasicBlockCount, b: BasicBlockCount) -> bool {
	var ca = a.counter.count, cb = b.counter.count;
	if (ca > cb) return true;
	if (ca == cb && a.start < b.start) return true;
	return false;
}

type BasicBlockCount(start: int, end: int, instrs: int, counter: CountProbe) #unboxed;
