// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def monitor_ = MonitorRegistry.add(
	"test:sidetable", "Dynamically checks invariants of the sidetable management.",
	SidetableChecker.new());

def verbose = monitor_.options.addAlias(
	monitor_.options.newBoolOption("verbose", false, "enable verbose output"),
	"v");

var inserted: bool;
class SidetableChecker extends Monitor {
	def onParse(m: Module, err: ErrorGen) {
		if (inserted) return;
		inserted = true;
		Instrumentation.insertGlobalProbe(Checker.new());
	}
}

private class Checker extends Probe {
	var last: SidetableMap;
	def fire(dynamicLoc: DynamicLoc) -> ProbeAction {
		var accessor = dynamicLoc.frame.getFrameAccessor();
		var func = dynamicLoc.func.decl;
		if (last == null || last.func != func) { 
			last = SidetableMap.new(dynamicLoc.func.decl);
		}
		var expect = last[dynamicLoc.pc];
		var got = accessor.stp();
		if (verbose.val) {
			Trace.OUT.put2("stp-check: %q @ %d", dynamicLoc.func.render, dynamicLoc.pc);
			Trace.OUT.put2(", expect stp=%d, got=%d", expect, got);
			Trace.OUT.ln();
		}
		if (expect != got) {
			if (Trace.fatal) System.error("SidetableCheckerError", Strings.format2("%q @ %d, stp mismatch", dynamicLoc.func.render, dynamicLoc.pc));
			return ProbeAction.Trap(TrapReason.ERROR, true);
		}
		return ProbeAction.Continue;
	}
}
