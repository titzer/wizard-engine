// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def unused_ = MonitorRegistry.add("test:sidetable", "a dynamic verifier for sidetable entries", SidetableChecker.new());

var verbose = false;
var inserted = false;
class SidetableChecker extends Monitor {
	def configure(args: string) -> string {
		def argMap = MonitorUtil.argMapFrom(args);
		if (argMap.has("verbose") || argMap.has("v")) {
			verbose = true;
			return null;
		}
		def buf = StringBuilder.new();
		buf.put1("invalid argument(s) \"%s\"", args);
		return buf.toString();
	}
	def onParse(m: Module, err: ErrorGen) {
		if (inserted) return;
		inserted = true;
		Instrumentation.insertGlobalProbe(Checker.new());
	}
}

private class Checker extends Probe {
	var last: SidetableMap;
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		var accessor = dynamicLoc.frame.getFrameAccessor();
		var func = dynamicLoc.func.decl;
		if (last == null || last.func != func) { 
			last = SidetableMap.new(dynamicLoc.func.decl);
		}
		var expect = last[dynamicLoc.pc];
		var got = accessor.stp();
		if (verbose) {
			Trace.OUT.put2("stp-check: %q @ %d", dynamicLoc.func.render, dynamicLoc.pc);
			Trace.OUT.put2(", expect stp=%d, got=%d", expect, got);
			Trace.OUT.ln();
		}
		if (expect != got) {
			if (Trace.fatal) System.error("SidetableCheckerError", Strings.format2("%q @ %d, stp mismatch", dynamicLoc.func.render, dynamicLoc.pc));
			return Resumption.Trap(TrapReason.ERROR, true);
		}
		return Resumption.Continue;
	}
}
