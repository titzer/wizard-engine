// Copyright 2024 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def E_ = MonitorRegistry.add(
	"r3-replay", "Replays a module from an R3 trace file.",
	R3BackEndMonitor.new());

def TRACE_FILE_OPTION = E_.options.newPathOption("trace_file", null, "The path to the R3 trace file to replay.");

private class R3BackEndMonitor extends Monitor {
	var parser: R3TraceParser;
	var replay: HashMap<int, ReplayFunction>;
	var is_replay_valid = true;
	var mod: Module;
	var ins: Instance;
	var next_replay_context: Array<int>;

	def configure(args: string) -> string {
		if (TRACE_FILE_OPTION.val == null) {
			return "Missing trace_file";
		}
		var trace_file = TRACE_FILE_OPTION.val;
		var input = System.fileLoad(trace_file);
		if (input == null) {
			return "Trace file not found";
		}
		parser = R3TraceParser.new(input);
		var err_line = parser.parse();
		if (err_line > -1) {
			var sb = StringBuilder.new();
			sb.put1("Trace file cannot be parsed, error at line %d", err_line);
			return sb.toString();
		}
		replay = parser.replay_map;
		return null;
	}

	def onParse(module: Module, err: ErrorGen) {
		mod = module;
		// validate and update replay IR with correct values before instantiation
		replay.apply(R3Utils.validateReplayFunction(_, _, mod, validationPrecheck, validationFail));
		if (is_replay_valid && parser.updateImportedGlobals(mod)) {
			mod.start_function = -1;
			var imported_module_builders = Strings.newMap<HostModuleBuilder>();
			var func_import_count: int;
			if (mod.imports.length == 0) {
				// adds a placeholder import in order for the engine to find a processor entry
				var mock_decl = Decl.new();
				mod.addImport("r3-replay", "entry", mock_decl);
			}
			for (j < mod.imports.length) {
				var module_name = mod.imports[j].imp.module_name;
				var field_name = mod.imports[j].imp.field_name;
				if (!imported_module_builders.has(module_name)) {
					imported_module_builders[module_name] = HostModuleBuilder.new(module_name);
				}
				var module_builder = imported_module_builders[module_name];
				match (mod.imports[j]) {
					func_decl: FuncDecl => {
						// create custom host modules for all imported functions, overwriting 
						// existing host modules if possible.
						var sig = func_decl.sig;
						var hostFuncImpl = if (replay[func_decl.func_index] == null,
											   defaultHostFunc(_, sig.results),
											   emulatedHostFunc(_, sig.results, func_decl.func_index));
						module_builder.func(field_name, sig, hostFuncImpl);
						func_import_count++;
					}
					global_decl: GlobalDecl => {
						var global = Global.new(global_decl.valtype, global_decl);
						global.set(parser.imported_global_vals[j]);
						module_builder.global(field_name, global);
					}
					memory_decl: MemoryDecl => {
						var memory = Target.newMemory(memory_decl);
						module_builder.memory(field_name, memory);
					}
					_ => ;
				}
				module_builder.getMain(newMainFunc);
			}
			for (l = Maps.keyList(imported_module_builders); l != null; l = l.tail) {
				imported_module_builders[l.head].register(true);
			}
			next_replay_context = Array<int>.new(func_import_count);
		}
	}

	def onInstantiate(instance: Instance) {
		ins = instance;
	}

	// Wrapper for the emulated host module's main function. This replaces the original main function
	// in the wasm module with the replay entry function.
	private def newMainFunc(ins: Instance) -> (Function, Array<Value>) {
		var func = HostFunction.new("main", SigCache.v_v, emulatedHostFunc(_, Array<ValueType>.new(0), -1));
		return (func, Array<Value>.new(0));
	}

	// Implementation of the imported function that execute the observed state changes.
	private def emulatedHostFunc(params: Range<Value>, result_types: Array<ValueType>, func_index: int) -> HostResult {
		var replay_context_id: int;
		if (func_index != -1) {
			replay_context_id = next_replay_context[func_index];
			next_replay_context[func_index] = replay_context_id + 1;
		}
		var replay_context = replay[func_index].all_ctx[replay_context_id];
		applyActions(replay_context.actions);
		var result_values = replay_context.results;
		match (result_types.length) {
			0 => return HostResult.Value0;
			1 => return HostResult.Value1(result_values[0]);
			_ => return HostResult.ValueN(result_values);
		}
	}

	// Placeholder host function for imported, but not used functions in the reocrded trace.
	private def defaultHostFunc(params: Range<Value>, result_types: Array<ValueType>) -> HostResult {
		var result_values = Array<Value>.new(result_types.length);
		for (i < result_types.length) {
			var t = result_types[i];
			match (t) {
				I32 => result_values[i] = Values.I32_0;
				I64 => result_values[i] = Values.I64_0;
				F32 => result_values[i] = Values.F32_0;
				F64 => result_values[i] = Values.F64_0;
				V128 => result_values[i] = Values.V128_0;
				_ => result_values[i] = Values.FUNCREF_NULL;
			}
		}
		match (result_types.length) {
			0 => return HostResult.Value0;
			1 => return HostResult.Value1(result_values[0]);
			_ => return HostResult.ValueN(result_values);
		}
	}

	// replay the actions in a single context, called by the emulated host function.
	private def applyActions(actions: Vector<WasmEvent>) {
		for (i < actions.length) {
			var action = actions[i];
			match (action) {
				GlobalGet(id, value) => ins.globals[id].set(value);
				FuncEntry, FuncEntryTable => {
					var id: int, params: Array<Value>;
					if (WasmEvent.FuncEntry.?(action)) {
						id = WasmEvent.FuncEntry.!(action).idx;
						params = WasmEvent.FuncEntry.!(action).params;
					} else {
						id = WasmEvent.FuncEntryTable.!(action).idx;
						params = WasmEvent.FuncEntryTable.!(action).params;
					}
					Execute.call(ins.functions[id], params);
				}
				Load(id, offset, data) => ins.memories[id].copyIn(u32.view(offset), data, 0, u32.view(data.length));
				MemGrow(id, amt_pages) => ins.memories[id].grow(u32.view(amt_pages));
				TableGet(table_id, _, entry_id, func_id, _) => ins.tables[table_id][entry_id] = Value.Ref(ins.functions[func_id]);
				TableGrow(table_id, _, amt) => ins.tables[table_id].grow(u32.view(amt), Values.FUNCREF_NULL);
				_ => ;
			}
		}
	}

	private def validationPrecheck() -> bool {
		return is_replay_valid;
	}
	private def validationFail() {
		is_replay_valid = false;
	}
}
