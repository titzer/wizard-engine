// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def monitor_ = MonitorRegistry.add(
	"branches", "Tallies direct and indirect branches.",
	BranchMonitor.new());
def inCodeMode = monitor_.options.addAlias(
	monitor_.options.newFlag("code", null, "emit report with code"),
	"c");

def showZeroCounts = monitor_.options.addAlias(
	monitor_.options.newFlag("zero", null,"show zero counts"),
	"z");

def TRACER = InstrTracer.new();
class BranchMonitor extends Monitor {
	def onParse(module: Module, err: ErrorGen) {
		var i = ControlInstrumenter.new();
		i.entry = false;
		i.brs = false;
		i.br_ifs = true;
		i.loops = false;
		i.ends = false;

		if (MonitorOptions.CSV.val) out.puts("branch,func,pc,instruction,taken_paths\n");

		ModuleInstrumenter.new(module).forEachFunc(instrument(_, _, i));
	}
	def instrument(mm: ModuleInstrumenter, func: FuncDecl, i: ControlInstrumenter) {
		var ins = i.instrument(mm.module, func);
		if (ins != null){
			if (MonitorOptions.CSV.val){
				MonitorRegistry.addReport(printCSV(out, mm.module, ins, _));
			} else {
				MonitorRegistry.addReport(print(out, mm.module, ins, _));
			}
		} 
	}
}

// Output report summary for a func to STDOUT

def print(out: TraceBuilder, module: Module, ins: ControlInstrumentation, unused: void) {
	var bi = BytecodeIterator.new();
	if (!showZeroCounts.val && !ins.isNonZero()) return;
	out.beginColor(Color.FUNC)
		.put1("func %q:", ins.func.render(module.names, _))
		.endColors()
		.ln();
	bi.reset(ins.func);

	if (inCodeMode.val) return printCode(out, module, bi, ins);
		
	for (e in ins.entries) {
		out.beginColor(Color.LINE)
			.mark()
			.put1("+%d", e.0)
			.rjustify_mark(5)
			.endColors()
			.putc(' ');
		bi.at(e.0, -1);
		out.puts(bi.current().mnemonic);
		var taken = ins.getBrCounts(e.0);
		out.puts(":\t [");
		for (j < taken.length) {
			if (j > 0) out.csp();
			if (taken[j] > 0) out.beginColor(Color.COUNT);
			else out.endColors().beginColor(Color.INACTIVE);
			out.putd(taken[j]);
			out.endColors();
		}
		out.putc(']').ln();
	}
}

// Output code report for a func to STDOUT
def printCode(out: TraceBuilder, module: Module, bi: BytecodeIterator, ins: ControlInstrumentation) {
	// Use sidetable to generate a control flow graph.
	// Later used to visually depict control flow edges.
	var func = ins.func;
	def st = func.sidetable;
	def stMap = SidetableMap.new(func);
	def cfg = HashMap<int, Vector<(int, u64)>>.new(int.!<int>, int.==);
	for (bi = bi.reset(func); bi.more(); bi.next()) {
		def op = bi.current();
		match(op) {
			IF, BR_IF, BR_ON_NULL, BR_ON_NON_NULL => {
				var taken = ins.getBrCounts(bi.pc);
				def stp = stMap[bi.pc];
				def stEntry = st.getBrEntry(stp);
				def padding = if(stEntry.dpc > 0, -1, 0);
				def target = bi.pc + stEntry.dpc + padding;
				// add outward edges
				if (!cfg.has(bi.pc)) cfg[bi.pc] = Vector<(int, u64)>.new();
				cfg[bi.pc].put(target, taken[1]);
				cfg[bi.pc].put(bi.nextPc(), taken[0]);

				// add inward edges
				if (!cfg.has(target)) cfg[target] = Vector<(int, u64)>.new();
				cfg[target].put(bi.pc, taken[1]);
				if (!cfg.has(bi.nextPc())) cfg[bi.nextPc()] = Vector<(int, u64)>.new();
				cfg[bi.nextPc()].put(bi.pc, taken[0]);
			}
			BR_TABLE => {
				var taken = ins.getBrCounts(bi.pc);
				var stp = stMap[bi.pc];
				var stEntry = st.getBrEntry(stp);
				def noOfTargets = stEntry.dpc;
				for (i = 1; i <= noOfTargets; i++) {
					stp = stp + 4;
					stEntry = st.getBrEntry(stp);
					def target = bi.pc + stEntry.dpc + i - 1;
					// add outward edge
					if (!cfg.has(bi.pc)) cfg[bi.pc] = Vector<(int, u64)>.new();
					cfg[bi.pc].put(target, taken[i - 1]);

					// add inward edge
					if (!cfg.has(target)) cfg[target] = Vector<(int, u64)>.new();
					cfg[target].put(bi.pc, taken[i - 1]);
				}
			}
			_ => ;
		}
	}

	for (bi = bi.reset(func); bi.more(); bi.next()) {
		def op = bi.current();
		// search the edges
		match (op) {
			IF, BR_IF, BR_TABLE => {
				if (cfg.has(bi.pc)) {
					outputInstr(module, true, false, bi, out);
					out.beginColor(Color.TARGET)
						.puts("  --> ");
					def edges = cfg[bi.pc];
					for (i < edges.length) {
						if (i > 0) out.csp();
						out.beginColor(Color.TARGET)
							.put1("+%d", edges[i].0)
							.puts(": ")
							.endColors();
						if (edges[i].1 == 0) out.beginColor(Color.UNREACHABLE);
						else out.beginColor(Color.COUNT);
						out.putd(edges[i].1).endColors();
					}
				} else {
					outputInstr(module, false, false, bi, out);
				}
			}
			_ => {
				if (cfg.has(bi.pc)) {
					outputInstr(module, false, true, bi, out);
					out.beginColor(Color.SOURCE)
						.puts("  <-- ");
					def edges = cfg[bi.pc];
					for (i < edges.length) {
						if (i > 0) out.csp();
						out.beginColor(Color.SOURCE)
							.put1("+%d", edges[i].0)
							.puts(": ")
							.endColors();
						if (edges[i].1 == 0) out.beginColor(Color.UNREACHABLE);
						else out.beginColor(Color.COUNT);
						out.putd(edges[i].1).endColors();
					}
				} else {
					outputInstr(module, false, false, bi, out);
				}
			}
		}
		out.ln();
	}
}

// output instr helper
def outputInstr(module: Module, source: bool, target: bool, bi: BytecodeIterator, out: TraceBuilder) {
	if (source) out.beginColor(Color.SOURCE);
	else if (target) out.beginColor(Color.TARGET);
	else out.beginColor(Color.LINE);

	out.mark()
		.put1("+%d", bi.pc)
		.rjustify_mark(5)
		.sp();
	if (source || target) out.beginColor(Color.UNDERLINE);
	else out.endColors();
	out.puts("    ").mark();
	bi.traceOrig(out, module, TRACER);
	var width = 22;
	if (Palettes.get().on) width += 11; // TODO: compute length without color
	out.ljustify_mark(width).endColors();
}

def printCSV(out: TraceBuilder, module: Module, ins: ControlInstrumentation, unused: void){
	var bi = BytecodeIterator.new();
	if (!showZeroCounts.val && !ins.isNonZero()) return;
	bi.reset(ins.func);
	//For each entry, add the calling function, its pc, the type of instruction, and the taken paths to the CSV
	for (e in ins.entries) {
		out.puts("branch,")
			.put1("%q", ins.func.render(module.names, _))
			.putc(',')
			.put1("%d", e.0);
		bi.at(e.0, -1);
		out.putc(',')
			.puts(bi.current().mnemonic);
		var taken = ins.getBrCounts(e.0);
		out.puts(",[");
		for (j < taken.length) {
			out.putd(taken[j]);
			if(j != taken.length - 1){
				out.putc(' ');
			}
		}
		out.putc(']');
		if(e != ins.entries[ins.entries.length - 1]){
			out.putc('\n');
		}
	}
	out.ln();
}

