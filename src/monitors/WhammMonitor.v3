// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// This class implements a monitor that is implemented in WebAssembly, i.e. as a Whamm
// module. Such modules have exported functions whose names describe how to attach
// behavior to events.

// Event names supported:
//   wasm:exit
//   wasm:opcode:<mnemonic>			Before matching opcodes execute

// TODO:
//  - define frame accessor methods
//  - externref in Virgil
//  - allow bind-time callbacks to return void (or multivalue?)
class WhammMonitor(named_modules: Array<NamedModule>) extends Monitor {
	def whamm = named_modules[0].module; // whamm monitor module is first in group
	var opcodePatterns: Array<List<(Opcode, WhammRule)>>;
	var funcEntries: List<WhammRule>;
	var funcExits: List<WhammRule>;
	var blockStarts: List<WhammRule>;
	var blockEnds: List<WhammRule>;
	var whammInstances: List<WhammInstance>; // XXX: leaky
	var err: ErrorGen;

	new() {
		if (Trace.whamm) Trace.OUT.put1("parsing whamm monitor: %s", whamm.filename).ln();
		for (i < whamm.exports.length) {
			var e = whamm.exports[i], name = e.0, decl = e.1;
			if (!FuncDecl.?(decl)) continue;
			if (Trace.whamm) Trace.OUT.put2("  export %d: \"%s\" = ", i, name);
			var func = FuncDecl.!(decl);
			var r = TextReader.new(whamm.filename, name);
			var t = Whamm.parseProbePattern(r), params = t.1, pred = t.2;
			if (!r.ok) {
				// parse error
				Trace.OUT.put1("whamm warning: export[%d] function name is invalid event pattern", i).ln();
				r.renderCurrentLineWithCaret(Trace.OUT, r.error_column);
				Trace.OUT.sp().puts(r.error_msg);
				Trace.OUT.ln();
				if (Trace.fatal) System.error("MonitorError", "failed parsing whamm monitor");
				continue;
			}
			if (Trace.whamm) {
				Trace.OUT.put1("matched: %q", t.0.render);
				if (params.length > 0) Trace.OUT.putTuple(params, WhammParam.render);
				Trace.OUT.ln();
			}
			match (t.0) {
				Null => ; // do nothing
				AllOpcodes => {
					for (op in Opcode) {
						if (op != Opcode.INVALID) addOpcodePattern(op, params, func, pred);
					}
				}
				FuncEntry => {
					funcEntries = List.new(WhammRule(params, func, pred), funcEntries);
				}
				FuncExit => {
					funcExits = List.new(WhammRule(params, func, pred), funcExits);
					addOpcodePattern(Opcode.RETURN, params, func, pred);
				}
				BlockStart => {
					blockStarts = List.new(WhammRule(params, func, pred), blockStarts);
				}
				BlockEnd => {
					blockEnds = List.new(WhammRule(params, func, pred), blockEnds);
				}
				Opcode(op) => {
					addOpcodePattern(op, params, func, pred);
				}
			}
		}
		if (opcodePatterns != null) {
			for (i < opcodePatterns.length) {
				opcodePatterns[i] = Lists.reverse(opcodePatterns[i]);
			}
		}
		funcEntries = Lists.reverse(funcEntries);
		funcExits = Lists.reverse(funcExits);
		blockStarts = Lists.reverse(blockStarts);
		blockEnds = Lists.reverse(blockEnds);
	}
	private def addOpcodePattern(op: Opcode, params: Array<WhammParam>, func: FuncDecl, pred: WhammPredicate) {
		if (opcodePatterns == null) opcodePatterns = Array.new(Opcode.count);
		opcodePatterns[op.tag] = List.new((op, WhammRule(params, func, pred)), opcodePatterns[op.tag]); // XXX: probes added in reverse order
	}
	// monitors called on parsed modules
	def onParse(module: Module, err: ErrorGen) {
		if (opcodePatterns == null && funcEntries == null && funcExits == null) return; // nothing to do

		var before_us = Metrics.whamm_bind_time_us.ticks();
		this.err = err;
		var wi = getWhammInstance(module);
		if (wi == null) return; // an error occurred

		var instr = WhammInstrumenter.new(this, wi, err);
		// Iterate over the (non-imported) functions in the module.
		for (i < module.functions.length) {
			var func = module.functions[i];
			if (func.imp == null) instr.instrument(func);
		}
		Metrics.whamm_bind_time_us.updateDiff(before_us);
	}
	private def getWhammInstance(module: Module) -> WhammInstance {
		for (l = whammInstances; l != null; l = l.tail) {
			if (l.head.app == module) return l.head;
		}

		if (Trace.whamm) Trace.OUT.put2("Instantiating whamm module %s for %s", whamm.filename, module.filename).ln();
		var err = ErrorGen.new(whamm.filename);
		var instrumentor = if(module.outline != null, DynInstrModule.new("whamm:dyninstr", module));
		var reflector = if(module.outline != null, ReflectorModule.new("whamm:reflect", module));

		// Perform the linking for Whamm monitor support libraries.
		var engine = Engine.new();
		engine.extensions = Extension.set.all;

		var linker = ModuleLinker.new(engine, [], err);
		linker.binder = if(BasicTracing.moduleFilter != null, ImportTracer.new(BasicTracing.moduleFilter).wrap);
		linker.named_modules.putr(named_modules[1 ...]);
		linker.named_modules.put(named_modules[0]);  		// whamm module goes at the end of the linking list
		linker.lookup.put(ModuleRegistry.get);					// Expose entire module registry
		linker.addImportProcessor(ModuleRegistry.getUnexposed("wizeng"));	// Expose wizeng explicitly
		linker.addImportProcessor(reflector);					// Expose the reflector module
		linker.addImportProcessor(instrumentor);				// Expose the instrumentor module
		var all_instantiators = linker.link();
		if (!err.ok()) {
			var index = Ints.max(err.index, named_modules.length - 1);
			ErrorBuilder.new()
				.render(err.error_code,
						named_modules[index].module.filename,
						err.section,
						err.error_index,
						err.error_pos,
						err.error_msg)
				.exit(6);
			return null;
		}

		// Get the whamm instantiator (the last one)
		var i = all_instantiators[all_instantiators.length - 1];
		var instance = i.run();
		if (!err.ok()) return ErrorBuilder.new()
			.render(err.error_code, whamm.filename, err.section, err.error_index, err.error_pos, err.error_msg)
			.exit(null);
		var wi = WhammInstance.new(module, instance);
		whammInstances = List.new(wi, whammInstances);
		return wi;
	}

	def onFinish(i: Instance, r: Result) {
		def wi = getWhammInstance(i.module);
		if (wi == null) return;
		def exports = wi.instance.exports;
		// TODO make wasm:exit part of parsing whamm module
		for (i < exports.length) {
			var export_name = wi.instance.module.exports[i].0;
			if (Strings.equal("wasm:exit", export_name)) {
				var lookupR = wi.instance.exports[i];
				if (Function.?(lookupR)) return invokeWasmExit(wi, Function.!(lookupR));
			}
		}
	}
	def invokeWasmExit(wi: WhammInstance, func: Function) {
		// Record the time taken executing the reporting logic.
		if (Trace.whamm) Trace.OUT.puts("wasm:exit call!").ln();
		var before_us = Metrics.whamm_report_time_us.ticks();
		def result = Execute.call(func, Values.NONE); // XXX: runs on a new stack
		match (result) {
			Throw(thrown) => {
				if (Trace.whamm) Trace.OUT.puts("wasm:exit threw an error").ln();
				TraceUtil.renderThrowable(Trace.OUT, thrown);
			}
			_ => {} // ignore
		}
		Metrics.whamm_report_time_us.updateDiff(before_us);
	}
}

private class WhammInstrumenter(wm: WhammMonitor, wi: WhammInstance, err: ErrorGen) {
	def cv = CodeValidator.new(Extension.set.all, Limits.new().set(Extension.set.all), wi.app, err);
	def binder = WhammVarBinder.new(wi, err);
	def next_bi = BytecodeIterator.new(); // an auxilliary bytecode iterator used to find the next bytecode.
	def matchBlocks = wm.blockStarts != null || wm.blockEnds != null;
	var func: FuncDecl;
	var isBlockStart: bool;
	var instrCount: int;

	new() {
		cv.probe = validatorCallback;
	}

	def instrument(func: FuncDecl) {
		this.func = func;
		next_bi.reset(func);
		cv.validateFunc(func); // XXX: can we avoid running full code validation just for func entry?
	}
	def validatorCallback(cv: CodeValidator, pc: int, opcode: Opcode) {
		if (Trace.whamm) Trace.OUT.put3("  match func %q+%d: %s", func.render(cv.module.names, _), pc, opcode.mnemonic);
		binder.instr_count = -1;
		binder.probe_id = -1;
		// Apply function entry rules if necessary.
		if (pc == 0) {
			for (l = wm.funcEntries; l != null; l = l.tail) matchRule(pc, Opcode.INVALID, l.head);
			isBlockStart = true; // consider pc == 0 to be a block start.
		}
		// Handle ending a previous block and/or starting a new block.
		if (matchBlocks) matchBlockStartAndEnd(pc, opcode);
		// Apply opcode patterns for this opcode.
		for (l = wm.opcodePatterns[opcode.tag]; l != null; l = l.tail) matchRule(pc, opcode, l.head.1);
		// Apply function exit rules if necessary.
		if (pc == func.orig_bytecode.length - 1) {
			for (l = wm.funcExits; l != null; l = l.tail) matchRule(pc, Opcode.INVALID, l.head);
		}
	}
	def matchRule(pc: int, opcode: Opcode, rule: WhammRule) {
		var wf = binder.wi.instance.functions[rule.func.func_index];
		// Check static predicate.
		if (rule.pred != null) {
			match (binder.evalCall(rule.pred.call.target, rule.pred.call.params, cv, opcode)) {
				OK(t, v) => {
					match (v) {
						I32(i) => if (i == 0) {
							if (Trace.whamm) Trace.OUT.puts(" => probe not inserted (predicate)").ln();
							return;
						}
						_ => {
							err.at(cv.parser.decoder).WhammProbeError("whamm probe",
								Strings.format1("expected i32, but predicate returned value of type %q", t.render));
							return;
						}
					}
				}
				Fail => return;
			}
		}
		// Bind arguments to the probe.
		var args = Whamm.NO_ARGS;
		if (rule.params.length > 0) {
			args = binder.bindParams(cv, wf.sig.params, rule.params, opcode, false);
			if (args == null) {
				// An error occurred in binding the arguments.
				if (Trace.whamm) Trace.OUT.puts("    => probe not inserted (no match error)").ln();
				return;
			}
		}
		// Arguments bound successfully. Create and insert a probe.
		var probe = WhammProbe.new(wf, args);
		Instrumentation.insertLocalProbe(cv.module, func.func_index, pc, probe);
		if (binder.probe_id >= 0) binder.wi.app.dyn_probes.set(binder.probe_id, (func.func_index, pc, probe));
		if (Trace.whamm) Trace.OUT.ln();
	}
	def matchBlockStartAndEnd(pc: int, op: Opcode) {
		match (op) {
			LOOP => {
				// Loop always starts a new basic block.
				matchBlockStart(pc);
			}
			SUSPEND,
			IF,
			ELSE,
			CATCH,
			CATCH_ALL,
			BR_IF,
			BR_ON_NULL,
			BR_ON_NON_NULL,
			BR_ON_CAST,
			BR_ON_CAST_FAIL => {
				// These always end the current block; the next instruction will start a basic block.
				matchBlockEnd(pc);
				isBlockStart = true;
			}
			UNREACHABLE,
			THROW,
			RETHROW,
			THROW_REF,
			RETURN,
			RETURN_CALL,
			RETURN_CALL_INDIRECT,
			BR,
			BR_TABLE => {
				// These always end the current block; the next instruction is unreachable.
				matchBlockEnd(pc);
			}
			END => {
				// An end starts a new block if it is a label that has been explicitly branched to.
				if (cv.topEndLabelIsReferenced()) matchBlockStart(pc);
			}
			// Other instructions don't do control flow, but could be the start of a new block
			// (e.g. because the previous instruction has conditional control flow like br_if).
			// After dealing with a possible block start, look ahead to the next instruction
			// to determine if it is a block start, and end this block here if so.
			_ => {
				if (isBlockStart) matchBlockStart(pc);
				if (nextIsBlockStart(pc)) {
					matchBlockEnd(pc);
				} else {
					isBlockStart = false;
					instrCount++;
				}
			}
		}
		
	}
	def matchBlockStart(pc: int) {
		for (l = wm.blockStarts; l != null; l = l.tail) matchRule(pc, Opcode.INVALID, l.head);
		isBlockStart = false;
		instrCount = 0;
	}
	def matchBlockEnd(pc: int) {
		binder.instr_count = ++instrCount;
		for (l = wm.blockStarts; l != null; l = l.tail) matchRule(pc, Opcode.INVALID, l.head);
		binder.instr_count = -1;
	}
	def nextIsBlockStart(pc: int) -> bool {
		var next = next_bi.at(pc, -1).next().current(); // use an auxilliary bytecode iterator to look at the next bytecode.
		match (next) {
			LOOP => return true;
			END => return cv.topEndLabelIsReferenced();
			_ => return false;
		}
	}
}
