// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// This class implements a monitor that is implemented in WebAssembly, i.e. as a Whamm
// module. Such modules have exported functions whose names describe how to attach
// behavior to events.

// Event names supported:
//   wasm:opcode:<mnemonic>			Before matching opcodes execute

// TODO:
//  - report callbacks
//  - binding callbacks
//  - define frame accessor methods
//  - externref in Virgil
class WhammMonitor(whamm: (string, Module), toLink: Vector<(string, Module)>) extends Monitor {
	var opcodePatterns: Array<List<(Opcode, Array<WhammParam>, FuncDecl, WhammPredicate)>>;
	var whammInstances: List<(Module, Instance, InstanceRef)>; // XXX: leaky
	var err: ErrorGen;

	new() {
		if (Trace.whamm) Trace.OUT.put1("parsing whamm monitor: %s", whamm.1.filename).ln();
		for (i < whamm.1.exports.length) {
			var e = whamm.1.exports[i], name = e.0, decl = e.1;
			if (!FuncDecl.?(decl)) continue;
			if (Trace.whamm) Trace.OUT.put2("  export %d: \"%s\" = ", i, name);
			var func = FuncDecl.!(decl);
			var r = TextReader.new(whamm.1.filename, name);
			var t = Whamm.parseOpcodePattern(r), op = t.0, params = t.1, pred = t.2;
			if (!r.ok) {
				// parse error
				Trace.OUT.put1("whamm warning: export[%d] function name is invalid opcode pattern", i).ln();
				r.renderCurrentLineWithCaret(Trace.OUT, r.error_column);
				Trace.OUT.sp().puts(r.error_msg);
				Trace.OUT.ln();
				if (Trace.fatal) System.error("MonitorError", "failed parsing whamm monitor");
			} else if (t.0 == Opcode.INVALID) {
				// no events matched
				if (Trace.whamm) Trace.OUT.puts("no events matched").ln();
			} else {
				// ok, add opcode pattern to table
				if (Trace.whamm) {
					Trace.OUT.ln().put1("    matched event: opcode %s", op.mnemonic);
					if (params.length > 0) Trace.OUT.putTuple(params, WhammParam.render).ln();
				}
				if (opcodePatterns == null) opcodePatterns = Array.new(Opcodes.count);
				opcodePatterns[op.tag] = List.new((op, params, func, pred), opcodePatterns[op.tag]); // XXX: probes added in reverse order
			}
		}
		if (opcodePatterns != null) {
			for (i < opcodePatterns.length) {
				opcodePatterns[i] = Lists.reverse(opcodePatterns[i]);
			}
		}
	}
	// monitors called on parsed modules
	def onParse(module: Module, err: ErrorGen) {
		this.err = err;
		// What extensions?
		var wi = getWhammInstance(module).0;
		if (wi == null) return;
		if (opcodePatterns == null) return;
		// iterate over the functions in the module
		for (i < module.functions.length) {
			var func = module.functions[i];
			if (func.imp != null) continue; // imported

			var extensions = Extension.set.all;
			var cv = CodeValidator.new(extensions, Limits.new().set(extensions), module, err);
			cv.probe = bytecodeProbe(module, wi, func, _, _, _);
			cv.validateFunc(func);
		}
	}

	def bytecodeProbe(module: Module, wi: Instance, func: FuncDecl, cv: CodeValidator, opcode_pos: int, opcode: Opcode) {
		var bp = opcodePatterns[opcode.tag];

		for (l = bp; l != null; l = l.tail) { // for every probe
			if (Trace.whamm) Trace.OUT.put3("  match func %q+%d: %s", func.render(module.names, _), opcode_pos, opcode.mnemonic);
			def wf = wi.functions[l.head.2.func_index];
			// check static predicate
			if (l.head.3 != null) {
				match (evalCall(cv, wi, opcode, l.head.3.call.target, l.head.3.call.params)) {
					OK(t, v) => {
						match (v) {
							I32(i) => if (i == 0) {
								if (Trace.whamm) Trace.OUT.puts(" => probe not inserted (predicate)").ln();
								continue;
							}
							_ => {
								err.at(cv.parser.decoder).WhammProbeError("whamm probe", "type error in predicate return value");
								continue;
							}
						}
					}
					Fail => continue;
				}
			}
			def args = bindParams(cv, wf, wi, l.head.1, opcode, false);
			if (args != null) {
				Instrumentation.insertLocalProbe(module, func.func_index, opcode_pos, WhammProbe.new(wf, args));
				if (Trace.whamm) Trace.OUT.ln();
			} else {
				if (Trace.whamm) Trace.OUT.puts("    => probe not inserted (no match error)").ln();
			}
		}
	}

	def evalCall(cv: CodeValidator, wi: Instance, op: Opcode, target: Token, params: Array<WhammParam>) -> CallResult {
		def exports = wi.module.exports;
		def lookupR = FuncDecl.!(lookup(exports, target.image, Strings.equal, null));
		if (lookupR == null) {
			err.at(cv.parser.decoder).WhammProbeError("whamm probe", Strings.format1("static function %s not found", target.image));
			return CallResult.Fail;
		}

		def index = lookupR.func_index;
		def func = wi.functions[index];

		def whammArgs = bindParams(cv, WasmFunction.!(func), wi, params, op, true);
		if (whammArgs == null) return CallResult.Fail;	// propagating error, not a good idea
		def args = if(whammArgs.length == 0, Values.NONE, Array<Value>.new(whammArgs.length));

		for (i < whammArgs.length) {
			// this cast should always succeed, as a dynamic parameter will
			// cause  `bindParams` to fail
			args[i] = WhammArg.Val.!(whammArgs[i]).v;
		}
		// typecheck before execute
		def result = Execute.call(func, args); // XXX: runs on a new stack
		match (result) {
			Value(vals) => {
				if (vals.length != 1) {
					err.at(cv.parser.decoder).WhammProbeError("whamm probe", "incorrect function return arity");
					return CallResult.Fail;
				}
				return CallResult.OK(func.sig.results[0], vals[0]);
			}
			Throw(throw) => {
				err.at(cv.parser.decoder).WhammProbeError("whamm probe", "static function threw exception");
				return CallResult.Fail;
			}
			StackSwitch(info) => {
				err.at(cv.parser.decoder).WhammProbeError("whamm probe", "attempted stack switch");
				return CallResult.Fail;
			}
		}
	}

	def bindParams(cv: CodeValidator, func: Function, wi: Instance,
			params: Array<WhammParam>, op: Opcode, nested: bool) -> Array<WhammArg> {
		var args = Array<WhammArg>.new(params.length);
	  	def expParams = func.sig.params;  // expected params of WasmFunction

	  	if (expParams.length != args.length) {
			err.at(cv.parser.decoder).WhammProbeError("whamm probe", "arity mismatch between wasm function params and whamm exported name");
			return null;
	 	}

		for (i < args.length) {
			var arg: WhammArg;
			match (params[i]) {
				DynamicLoc     => ; // TODO
				FrameAccessor  => {
					if (nested) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "cannot use dynamic data in static context (FrameAccessor)");
						return null;
					}
					arg = WhammArg.FrameAccessor; // type externref
					if (expParams[i] != ValueTypes.EXTERNREF) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "type mismatch on frame accessor argument");
						return null;
				  	}
			  	}
				Pc             => {
					arg = WhammArg.Val(Values.box_i(cv.opcode_pos));
					if (expParams[i] != ValueType.I32) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "type mismatch on pc argument");
						return null;
				  	}
				}
				Func           => {
					arg = WhammArg.Val(Values.box_i(cv.func.func_index));
					if (expParams[i] != ValueType.I32) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "type mismatch on function index argument");
						return null;
					}
				}
				Imm(orig, j)   => {
					def imms = op.imms;
					def parser = dupParser(cv);
					def vals = Vector<Value>.new();

					for (i < imms.length) {
						match (imms[i]) {
							ARRAY_TYPE_INDEX  => vals.put(Values.box_u(parser.readU32("array type index", u32.max)));
							BLOCK_TYPE        => vals.put(Values.box_i(parser.readTypeCode()));
							DATA_INDEX        => vals.put(Values.box_u(parser.readU32("data index", u32.max)));
							ELEM_INDEX        => vals.put(Values.box_u(parser.readU32("elem index", u32.max)));
							TAG_INDEX         => vals.put(Values.box_u(parser.readU32("tag index", u32.max)));
							FIELD_INDEX       => vals.put(Values.box_u(parser.readU32("field index", u32.max)));
							FUNC_INDEX        => vals.put(Values.box_u(parser.readU32("func index", u32.max)));
							GLOBAL_INDEX      => vals.put(Values.box_u(parser.readU32("global index", u32.max)));
							LABEL             => vals.put(Values.box_u(parser.readLabel()));
							LABELS            => {
								def labels = parser.readLabels();
								// NOTE hardcoded, because BR_TABLE is the only one that uses imm.LABELS
								vals.put(Values.box_i(labels.length - 1));
								vals.puta(Arrays.map(labels, Values.box_u));
							}
							LOCAL_INDEX       => vals.put(Values.box_u(parser.readU32("local index", u32.max)));
							MEMARG            => {
								// TODO discuss memarg format
								def memarg = parser.readMemoryArg();
								vals.put(Values.box_u(memarg.flags));
								vals.put(Values.box_u(memarg.memory_index));
								vals.put(Values.box_u(u32.!(memarg.offset)));
							}
							MEMORY_INDEX      => vals.put(Values.box_u(parser.readU32("memory index", u32.max)));
							HEAP_TYPE         => vals.put(Values.box_i(parser.readTypeCode()));
							SIG_INDEX         => vals.put(Values.box_u(parser.readU32("sig index", u32.max)));
							STRUCT_TYPE_INDEX => vals.put(Values.box_u(parser.readU32("struct type index", u32.max)));
							TABLE_INDEX	  => vals.put(Values.box_u(parser.readU32("table index", u32.max)));
							VALUE_TYPES	  => ;		// TODO
							ZERO_BYTE	  => vals.put(Values.box_u(parser.decoder.read1()));
							U32		  => vals.put(Values.box_u(parser.readU32("imm U32", u32.max)));
							I32		  => vals.put(Values.box_i(parser.readI32()));
							I64		  => vals.put(Values.box_l(parser.readI64()));
							F32		  => vals.put(Values.box_fu32(parser.readF32()));
							F64		  => vals.put(Values.box_du64(parser.readF64()));
							V128		  => vals.put(Values.box_s(parser.decoder.read_u64(), parser.decoder.read_u64()));
							LANE_INDEX	  => vals.put(Values.box_u(parser.decoder.read1()));
							BR_CAST		  => ;		// TODO
							CATCHES		  => ;		// TODO
							CONT_INDEX	  => ;		// TODO
							EX_HANDLERS	  => ;		// TODO
							SUS_HANDLERS	  => ;		// TODO
						}
					}

					if (j >= vals.length) {
						match (op) {
							BR_TABLE, TRY_TABLE => {
								if (Trace.whamm) Trace.OUT.ln().puts("    no match: immediate argument out of bounds").ln();
								return null;
							} // no match error
							_ => {
								err.at(cv.parser.decoder).WhammProbeError("whamm probe", "immediate argument out of bounds");
								return null;
							}
						}
					}

					arg = WhammArg.Val(vals[j]);
					var t: ValueType;
					match (vals[j]) {
						Ref  => t = ValueTypes.ANYREF;
						I31  => t = ValueTypes.I31REF;
						I32  => t = ValueType.I32;
						I64  => t = ValueType.I64;
						F32  => t = ValueType.F32;
						F64  => t = ValueType.F64;
						V128 => t = ValueType.V128;
					}
					if (expParams[i] != t) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "instruction immediate type mismatch");
						return null;
					}
				}
				Arg(orig, j)   => {  // arg0 = first arg to bytecode
					if (nested) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "cannot use dynamic data in static context (arg)");
						return null;
					}
					def io = Opcodes.stackDelta(cv.sig, op, dupParser(cv));
					def args = io.0;
					if (j >= args) {
						match (op) {
							CALL, CALL_INDIRECT => {
								if (Trace.whamm) Trace.OUT.ln().puts("    no match: instruction argument type mismatch").ln();
								return null;
							} // no match
							_ => {
								err.at(cv.parser.decoder).WhammProbeError("whamm probe", "instruction argument out of bounds");
								return null;
							}
						}
					}
					def stk = cv.val_stack.peekn(args);
					def t   = stk[j];
					if (expParams[i] != t) {
						match (op) {
							CALL, CALL_INDIRECT => {
								if (Trace.whamm) Trace.OUT.ln().puts("    no match: instruction argument type mismatch").ln();
								return null;
							} // no match
							_ => {
								err.at(cv.parser.decoder).WhammProbeError("whamm probe", "instruction argument type mismatch");
								return null;
							}
						}
					}
					arg = WhammArg.Operand(t, j - args + 1);
				}
				Local(orig, j) => {
					if (nested) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "cannot use dynamic data in static context (local)");
						return null;
					}
					if (j >= cv.locals.length) {
						if (Trace.whamm) Trace.OUT.ln().puts("    no match: probe requested an OOB local variable").ln();
						return null;
					} // no match error
					def t = cv.locals[j];
					arg = WhammArg.Local(t, j);
					if (expParams[i] != t) {
						if (Trace.whamm) Trace.OUT.ln().puts("    no match: local variable type mismatch").ln();
						return null;
					} // no match error
				}
				Call(target, params) => {
					if (nested) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "nested function calls");
						return null;
					}

					match (evalCall(cv, wi, op, target, params)) {
						Fail => {
							if (Trace.whamm) Trace.OUT.ln().puts("    no match: failure during static call invocation").ln();
							return null;
						}
						OK(t, v) => {
							arg = WhammArg.Val(v);
							if (expParams[i] != t) {
								err.at(cv.parser.decoder).WhammProbeError("whamm probe",
									Strings.format2("expected static call return type %q, got %q", expParams[i].render, t.render));
								return null;
							}
						}
					}
				}
			}
			args[i] = arg;
		}
		return args;
	}
	private def getWhammInstance(module: Module) -> (Instance, InstanceRef) {
		for (l = whammInstances; l != null; l = l.tail) {
			if (l.head.0 == module) return (l.head.1, l.head.2);
		}
		if (Trace.whamm) Trace.OUT.put2("Instantiating whamm module %s for %s", whamm.1.filename, module.filename).ln();
		var imports = Array<Exportable>.new(whamm.1.imports.length), err = ErrorGen.new(whamm.1.filename);

		// Perform the linking for Whamm monitor support libraries.
		var engine = Engine.new();
		engine.extensions = Extension.set.all;

		toLink.put((whamm.0, whamm.1)); // Add the whamm module to the linking context
		var toLink = toLink.extract();
		var toLinkNames = Array<(string, Module)>.new(toLink.length);
		for (i < toLink.length) {
			var path = toLink[i].0;
			var module = toLink[i].1;

			toLinkNames[i] = (PathUtil.extractName(path, false), module);
		}

		var binder: (Decl, Exportable) -> Exportable;
		if (BasicTracing.moduleFilter != null) binder = ImportTracer.new(BasicTracing.moduleFilter).wrap;
		var linker = ModuleLinker.new(engine, [], toLinkNames, binder, err);
		var all_instantiators = linker.link();
		if (!err.ok()) {
			ErrorBuilder.new()
				.render(err.error_code,
						if(u32.view(err.index) < toLink.length, toLink[err.index].0, toLink[toLink.length - 1].0),
						err.section,
						err.error_index,
						err.error_pos,
						err.error_msg)
				.exit(6);
			return (null, null);
		}

		// Get the whamm instantiator (the last one)
		var i = all_instantiators[all_instantiators.length - 1];
		var instance = i.run();
		if (!err.ok()) return ErrorBuilder.new()
			.render(err.error_code, whamm.1.filename, err.section, err.error_index, err.error_pos, err.error_msg)
			.exit((null, null));
		var instRef = InstanceRef.new(instance);
		whammInstances = List.new((module, instance, instRef), whammInstances);
		return (instance, instRef);
	}

	def onFinish(i: Instance, r: Result) {
		def wi = getWhammInstance(i.module).0;
		if (wi == null) return;
		def exports = wi.module.exports;
		// TODO make wasm:exit part of parsing whamm module
		def lookupR = FuncDecl.!(lookup(exports, "wasm:exit", Strings.equal, null));
		if (lookupR == null) return;
		def index = lookupR.func_index;
		def func = wi.functions[index];

		Execute.call(func, Values.NONE);
	}
}

type CallResult {
	case Fail; // should be set in errorgen, so no extra context needed
	case OK(t: ValueType, v: Value);
}

def lookup<K, V>(v: Vector<(K, V)>, key: K, eq: (K, K) -> bool, default: V) -> V {
	for (i < v.length) {
		if (eq(key, v[i].0)) return v[i].1;
	}
	return default;
}

def dupParser(cv: CodeValidator) -> WasmParser {
	def decoder = cv.parser.decoder;
	def newDecoder = CodePtr.new(null);
	newDecoder.reset(decoder.data, decoder.pos, decoder.limit);
	return WasmParser.new(cv.parser.extensions, cv.parser.limits, cv.parser.module, cv.parser.err, newDecoder);
}

// Co-module reflection support.
enum WhammCoModuleExports(sig: SigDecl, invoke: (WhammCoModule, Range<Value>) -> HostResult) {
	get_module_size		(SigCache.v_i, WhammCoModule.get_module_size),
	get_num_sections	(SigCache.i_i, WhammCoModule.get_num_sections),
	get_num_types		(SigCache.v_i, WhammCoModule.get_num_types),
	get_num_functions	(SigCache.v_i, WhammCoModule.get_num_functions),
	get_num_tables		(SigCache.v_i, WhammCoModule.get_num_tables),
	get_num_memories	(SigCache.v_i, WhammCoModule.get_num_memories),
	get_num_globals		(SigCache.v_i, WhammCoModule.get_num_globals),
	get_num_tags		(SigCache.v_i, WhammCoModule.get_num_tags),
	get_num_exports		(SigCache.v_i, WhammCoModule.get_num_exports),
	get_num_elems		(SigCache.v_i, WhammCoModule.get_num_elems),
	get_num_data		(SigCache.v_i, WhammCoModule.get_num_data),
	get_num_custom_sections	(SigCache.v_i, WhammCoModule.get_num_custom_sections),

	read_module_def		(SigCache.ii_i, WhammCoModule.read_module_def),
	read_section		(SigCache.iiii_i, WhammCoModule.read_section),
	read_type_def		(SigCache.iii_i, WhammCoModule.read_type_def),
	read_function_def	(SigCache.iii_i, WhammCoModule.read_function_def),
	read_function_body	(SigCache.iii_i, WhammCoModule.read_function_body),
	read_table_def		(SigCache.iii_i, WhammCoModule.read_table_def),
	read_memory_def		(SigCache.iii_i, WhammCoModule.read_memory_def),
	read_tag_def		(SigCache.iii_i, WhammCoModule.read_tag_def),
	read_export_def		(SigCache.iii_i, WhammCoModule.read_export_def),
	read_elem_def		(SigCache.iii_i, WhammCoModule.read_elem_def),
	read_data_def		(SigCache.iii_i, WhammCoModule.read_data_def),
	read_custom_section	(SigCache.iii_i, WhammCoModule.read_custom_section),
}

class WhammCoModule(module: Module, outline: ModuleOutline, bytes: Range<byte>) extends HostModule("whamm") {
	def get_module_size(args: Range<Value>) -> HostResult;
	def get_num_sections(args: Range<Value>) -> HostResult;

	def get_num_types(args: Range<Value>) -> HostResult 		{ return i(outline.heaptypes.offsets.length); }
	def get_num_functions(args: Range<Value>) -> HostResult		{ return i(outline.functions.offsets.length); }
	def get_num_tables(args: Range<Value>) -> HostResult		{ return i(outline.tables.offsets.length); }
	def get_num_memories(args: Range<Value>) -> HostResult		{ return i(outline.memories.offsets.length); }
	def get_num_globals(args: Range<Value>) -> HostResult		{ return i(outline.globals.offsets.length); }
	def get_num_tags(args: Range<Value>) -> HostResult		{ return i(outline.tags.offsets.length); }
	def get_num_exports(args: Range<Value>) -> HostResult		{ return i(outline.exports.offsets.length); }
	def get_num_elems(args: Range<Value>) -> HostResult		{ return i(outline.elems.offsets.length); }
	def get_num_data(args: Range<Value>) -> HostResult		{ return i(outline.data.offsets.length); }
	def get_num_custom_sections(args: Range<Value>) -> HostResult	{ return i(outline.custom_sections.length); }

	def read_module_def(args: Range<Value>) -> HostResult;
	def read_section(args: Range<Value>) -> HostResult;
	def read_type_def(args: Range<Value>) -> HostResult;
	def read_function_def(args: Range<Value>) -> HostResult;
	def read_function_body(args: Range<Value>) -> HostResult;
	def read_table_def(args: Range<Value>) -> HostResult;
	def read_memory_def(args: Range<Value>) -> HostResult;
	def read_tag_def(args: Range<Value>) -> HostResult;
	def read_export_def(args: Range<Value>) -> HostResult;
	def read_elem_def(args: Range<Value>) -> HostResult;
	def read_data_def(args: Range<Value>) -> HostResult;
	def read_custom_section(args: Range<Value>) -> HostResult;

	def insert_probe(args: Range<Value>) -> HostResult;
}

def i(i: int) -> HostResult { return HostResult.Value1(Values.box_i(i)); }
