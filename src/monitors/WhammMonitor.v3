// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// This class implements a monitor that is implemented in WebAssembly, i.e. as a Whamm
// module. Such modules have exported functions whose names describe how to attach
// behavior to events.

// Event names supported:
//   wasm:opcode:<mnemonic>			Before matching opcodes execute

// TODO:
//  - report callbacks
//  - binding callbacks
//  - define frame accessor methods
//  - externref in Virgil
class WhammMonitor(named_modules: Array<NamedModule>) extends Monitor {
	def whamm = named_modules[0].module; // whamm monitor module is first in group
	var opcodePatterns: Array<List<(Opcode, Array<WhammParam>, FuncDecl, WhammPredicate)>>;
	var whammInstances: List<(Module, Instance)>; // XXX: leaky
	var err: ErrorGen;

	new() {
		if (Trace.whamm) Trace.OUT.put1("parsing whamm monitor: %s", whamm.filename).ln();
		for (i < whamm.exports.length) {
			var e = whamm.exports[i], name = e.0, decl = e.1;
			if (!FuncDecl.?(decl)) continue;
			if (Trace.whamm) Trace.OUT.put2("  export %d: \"%s\" = ", i, name);
			var func = FuncDecl.!(decl);
			var r = TextReader.new(whamm.filename, name);
			var t = Whamm.parseOpcodePattern(r), op = t.0, params = t.1, pred = t.2;
			if (!r.ok) {
				// parse error
				Trace.OUT.put1("whamm warning: export[%d] function name is invalid opcode pattern", i).ln();
				r.renderCurrentLineWithCaret(Trace.OUT, r.error_column);
				Trace.OUT.sp().puts(r.error_msg);
				Trace.OUT.ln();
				if (Trace.fatal) System.error("MonitorError", "failed parsing whamm monitor");
			} else if (t.0 == Opcode.INVALID) {
				// no events matched
				if (Trace.whamm) Trace.OUT.puts("no events matched").ln();
			} else {
				// ok, add opcode pattern to table
				if (Trace.whamm) {
					Trace.OUT.ln().put1("    matched event: opcode %s", op.mnemonic);
					if (params.length > 0) Trace.OUT.putTuple(params, WhammParam.render).ln();
				}
				if (opcodePatterns == null) opcodePatterns = Array.new(Opcode.count);
				opcodePatterns[op.tag] = List.new((op, params, func, pred), opcodePatterns[op.tag]); // XXX: probes added in reverse order
			}
		}
		if (opcodePatterns != null) {
			for (i < opcodePatterns.length) {
				opcodePatterns[i] = Lists.reverse(opcodePatterns[i]);
			}
		}
	}
	// monitors called on parsed modules
	def onParse(module: Module, err: ErrorGen) {
		var before_us = Metrics.whamm_bind_time_us.ticks();
		this.err = err;
		// What extensions?
		var wi = getWhammInstance(module);
		if (wi == null) return;
		if (opcodePatterns == null) return;
		// iterate over the functions in the module
		for (i < module.functions.length) {
			var func = module.functions[i];
			if (func.imp != null) continue; // imported

			var extensions = Extension.set.all;
			var cv = CodeValidator.new(extensions, Limits.new().set(extensions), module, err);
			cv.probe = bytecodeProbe(module, wi, func, _, _, _);
			cv.validateFunc(func);
		}
		Metrics.whamm_bind_time_us.updateDiff(before_us);
	}

	def bytecodeProbe(module: Module, wi: Instance, func: FuncDecl, cv: CodeValidator, opcode_pos: int, opcode: Opcode) {
		var bp = opcodePatterns[opcode.tag];

		for (l = bp; l != null; l = l.tail) { // for every probe
			if (Trace.whamm) Trace.OUT.put3("  match func %q+%d: %s", func.render(module.names, _), opcode_pos, opcode.mnemonic);
			def wf = wi.functions[l.head.2.func_index];
			// check static predicate
			if (l.head.3 != null) {
				match (Whamm.evalCall(l.head.3.call.target, l.head.3.call.params, cv, wi, opcode, err)) {
					OK(t, v) => {
						match (v) {
							I32(i) => if (i == 0) {
								if (Trace.whamm) Trace.OUT.puts(" => probe not inserted (predicate)").ln();
								continue;
							}
							_ => {
								err.at(cv.parser.decoder).WhammProbeError("whamm probe", "type error in predicate return value");
								continue;
							}
						}
					}
					Fail => continue;
				}
			}
			def args = WhammVarBinder.bindParams(cv, wf, wi, l.head.1, opcode, false, err);
			if (args != null) {
				Instrumentation.insertLocalProbe(module, func.func_index, opcode_pos, WhammProbe.new(wf, args));
				if (Trace.whamm) Trace.OUT.ln();
			} else {
				if (Trace.whamm) Trace.OUT.puts("    => probe not inserted (no match error)").ln();
			}
		}
	}
	private def getWhammInstance(module: Module) -> Instance {
		for (l = whammInstances; l != null; l = l.tail) {
			if (l.head.0 == module) return l.head.1;
		}

		if (Trace.whamm) Trace.OUT.put2("Instantiating whamm module %s for %s", whamm.filename, module.filename).ln();
		var err = ErrorGen.new(whamm.filename);
		var reflector = if(module.outline != null, ReflectorModule.new("whamm:comodule", module));

		// Perform the linking for Whamm monitor support libraries.
		var engine = Engine.new();
		engine.extensions = Extension.set.all;

		var linker = ModuleLinker.new(engine, [], err);
		linker.binder = if(BasicTracing.moduleFilter != null, ImportTracer.new(BasicTracing.moduleFilter).wrap);
		linker.named_modules.putr(named_modules[1 ...]);
		linker.named_modules.put(named_modules[0]);  		// whamm module goes at the end of the linking list
		linker.lookup.put(ModuleRegistry.get);					// Expose entire module registry
		linker.addImportProcessor(ModuleRegistry.getUnexposed("wizeng"));	// Expose wizeng explicitly
		linker.addImportProcessor(reflector);					// Expose the reflector module
		var all_instantiators = linker.link();
		if (!err.ok()) {
			var index = Ints.max(err.index, named_modules.length - 1);
			ErrorBuilder.new()
				.render(err.error_code,
						named_modules[index].module.filename,
						err.section,
						err.error_index,
						err.error_pos,
						err.error_msg)
				.exit(6);
			return null;
		}

		// Get the whamm instantiator (the last one)
		var i = all_instantiators[all_instantiators.length - 1];
		var instance = i.run();
		if (!err.ok()) return ErrorBuilder.new()
			.render(err.error_code, whamm.filename, err.section, err.error_index, err.error_pos, err.error_msg)
			.exit(null);
		whammInstances = List.new((module, instance), whammInstances);
		return instance;
	}

	def onFinish(i: Instance, r: Result) {
		def wi = getWhammInstance(i.module);
		if (wi == null) return;
		def exports = wi.module.exports;
		// TODO make wasm:exit part of parsing whamm module
		def lookupR = FuncDecl.!(Whamm.lookup(exports, "wasm:exit", Strings.equal, null));
		if (lookupR == null) return;
		// Record the time taken executing the reporting logic.
		var before_us = Metrics.whamm_report_time_us.ticks();
		def index = lookupR.func_index;
		def func = wi.functions[index];
		if (Trace.whamm) Trace.OUT.puts("wasm:exit call!").ln();

		def result = Execute.call(func, Values.NONE); // XXX: runs on a new stack
		match (result) {
			Throw(thrown) => {
				if (Trace.whamm) Trace.OUT.puts("wasm:exit threw an error").ln();
				TraceUtil.renderThrowable(Trace.OUT, thrown);
			}
			_ => {} // ignore
		}
		Metrics.whamm_report_time_us.updateDiff(before_us);
	}
}
