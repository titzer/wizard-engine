// Copyright 2025 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def DEBUG = false;

// TODO: trace reconstruction from anchor + branch history
// TODO: display trace prefix tree
// TODO: tests for many scenarios
// TODO: various sort-by scenarios
// TODO: metrics for how branchy a trace is, length, etc
// TODO: compare inter-procedural trace to inlining possibilities

// Implements a monitor that counts occurrences of (loopy) traces in the program.
def monitor_ = MonitorRegistry.add(
	"loop-tracer", "Tallies counts of program trace that form loops.",
	LoopTracesMonitor.new());

class LoopTracesMonitor extends Monitor {
	def trace = TraceBuffer.new();
	def bi = BytecodeIterator.new();
	def unused_ = void(MonitorRegistry.addReport(trace.report));

	def onParse(module: Module, err: ErrorGen) {
		TraceInstrumenter.new(trace, module).run();
	}
}

private class TraceInstrumenter extends BytecodeInstrumenter {
	def trace: TraceBuffer;
	def PROBE_BR_IF = TraceBrIfProbe.new(trace);
	def PROBE_IF = TraceIfProbe.new(trace);

	new(trace, module: Module) super(module) { }

	def visitEntry() {
		var anchor_id = trace.allocAnchorId(module, bi.func, 0);
		insertProbeHere(TraceAnchorProbe.new(trace, anchor_id));
	}
	def visit_LOOP(btc: BlockTypeCode) {
		var anchor_id = trace.allocAnchorId(module, bi.func, bi.pc);
		insertProbeHere(TraceAnchorProbe.new(trace, anchor_id));
	}
	def visit_BR_IF(depth: u31) {
		insertProbeHere(PROBE_BR_IF);
	}
	def visit_IF(btc: BlockTypeCode) {
		insertProbeHere(PROBE_IF);
	}
	def visit_BR_TABLE(labels: Range<u31>) {
		insertProbeHere(TraceBrTableProbe.new(trace, Ranges.dup(labels)));
	}
	def visit_BR_ON_NULL(depth: u31) {
		insertProbeHere(TraceBrOnNullProbe.new(trace, true));
	}
	def visit_BR_ON_NON_NULL(depth: u31) {
		insertProbeHere(TraceBrOnNullProbe.new(trace, false));
	}
	def visit_BR_ON_CAST(imm: BrOnCastImm) {
		insertProbeHere(TraceBrOnCastProbe.new(trace, imm.null2(), imm.ht2, true));
	}
	def visit_BR_ON_CAST_FAIL(imm: BrOnCastImm) {
		insertProbeHere(TraceBrOnCastProbe.new(trace, imm.null2(), imm.ht2, false));
	}
	// TODO: should the successor of a suspend be an anchor point?
}

private class TraceBuffer {
	def events = Vector<TraceEntry>.new();
	def starts = Vector<u30>.new();
	def anchorLocs = Vector<TraceAnchorLoc>.new();
	def anchorPositions = Vector<int>.new();
	def trees = Vector<PrefixTrie<TraceEntry, u32>>.new();
	def BRANCHES_MAX = 0x2000_0000u;
	var branchHistory: u32 = 1;

	def allocAnchorId(module: Module, func: FuncDecl, pc: int) -> u30 {
		var id = anchorLocs.length;
		anchorLocs.put(TraceAnchorLoc(module, func, pc));
		anchorPositions.put(-1);
		trees.put(null);
		return u30.!(id);
	}
	def pushTaken() {
		events.put(TraceEntry.Taken);
//		if (branchHistory < BRANCHES_MAX) {
//			branchHistory = (branchHistory << 1) | 1;
//		} else {
//			events.put(TraceEntry.BranchHistory(u30.view(branchHistory)));
//			branchHistory = 0b11u32;
//		}
	}
	def pushNotTaken() {
		events.put(TraceEntry.NotTaken);
//		if (branchHistory < BRANCHES_MAX) {
//			branchHistory = (branchHistory << 1);
//		} else {
//			events.put(TraceEntry.BranchHistory(u30.view(branchHistory)));
//			branchHistory = 0b10u32;
//		}
	}
	def pushBranchTable(which: u30) {
//		if (branchHistory != 1) { // flush branch history
//			events.put(TraceEntry.BranchHistory(u30.view(branchHistory)));
//			branchHistory = 1;
//		}
		events.put(TraceEntry.BranchTable(which));
	}
	def pushAnchor(anchor_id: u30) {
//		if (branchHistory != 1) { // flush branch history
//			events.put(TraceEntry.BranchHistory(u30.view(branchHistory)));
//			branchHistory = 1;
//		}
		var start = anchorPositions[anchor_id];
		if (start >= 0) {
			// Record a trace in the trace tree
			var r = events.array[start ... events.length];
			if (DEBUG) {
				putSeq(events.array[0 ... start], Trace.OUT);
				Trace.OUT.puts(" {");
				putSeq(r, Trace.OUT);
				Trace.OUT.puts("} ").ln();
			}
			var tree = trees[anchor_id];
			if (tree == null) tree = trees[anchor_id] = PrefixTrie.new();
			tree.update(r, increment);
			anchorPositions[anchor_id] = -1;
			events.resize(start);
			for (i = starts.length - 1; i >= 0; i--) {
				var s = starts[i];
				if (s == anchor_id) {
					starts.resize(i);
					break;
				}
				anchorPositions[s] = -1;
			}
		}
		// Put the anchor ID in the trace and record its position
		anchorPositions[anchor_id] = events.length;
		if (DEBUG) {
			putSeq(events.array[0 ... events.length], Trace.OUT);
			Trace.OUT.puts(" ++ ");
			Trace.OUT.put1("%q", anchorLocs[anchor_id].render);
			Trace.OUT.ln();
		}
		events.put(TraceEntry.Anchor(anchor_id));
		starts.put(anchor_id);
	}
	def report() {
		var paths = Vector<(Array<TraceEntry>, u32)>.new();
		for (i < trees.length) {
			var tree = trees[i];
			if (tree != null) tree.apply(putCopy(paths, _));
		}
		var all = paths.extract();
//		all = Arrays.sort<(Array<TraceEntry>, u32)>(all, 0, all.length,
//			fun (a, b) => b.1 < a.1						// by dynamic frequency
//		);

		def out = Trace.OUT;
		for (e in all) {
			out.beginColor(Color.COUNT);
			out.mark();
			out.put1(" x %d", e.1);
			out.rjustify_mark(11);
			out.endColors();
			out.puts(": ");
			putSeq(e.0, out);
			out.ln();
		}
	}
	def putCopy(all: Vector<(Array<TraceEntry>, u32)>, t: (Range<TraceEntry>, u32)) {
		all.put(Ranges.dup(t.0), t.1);
	}
	def putSeq(seq: Range<TraceEntry>, buf: StringBuilder) {
		for (p in seq) {
			match (p) {
				Invalid => {
					Trace.OUT.putc('X');
				}
				Anchor(anchor_id) => {
					var h = anchorLocs[anchor_id];
//					Trace.OUT.put1("{id=%d}", anchor_id);
					h.render(Trace.OUT);
				}
				Taken => {
					Trace.OUT.putc('T');
				}
				NotTaken => {
					Trace.OUT.putc('n');
				}
//				BranchHistory(bits) => {
//					var v: u32 = bits, print = false;
//					for (i < 32) {
//						var b = (v & 0x8000_0000u) != 0;
//						if (print) Trace.OUT.putc(if(b, 'T', 'n'));
//						print |= b;
//						v <<= 1;
//					}
//				}
				BranchTable(which) => {
					Trace.OUT.put1(",br_table(%d)", which);
				}
			}
		}
	}
}
def increment = u32.+(1, _);

private class TraceBrIfProbe(trace: TraceBuffer) extends OperandProbe_i_v {
	def fire_i(i: u32) {
		if (i == 0) trace.pushNotTaken();
		else trace.pushTaken();
	}
}

private class TraceIfProbe(trace: TraceBuffer) extends OperandProbe_i_v {
	def fire_i(i: u32) {
		if (i != 0) trace.pushNotTaken();
		else trace.pushTaken();
	}
}

private class TraceBrOnNullProbe(trace: TraceBuffer, null_taken: bool) extends Probe {
	def fire(loc: DynamicLoc) -> Resumption {
		// XXX: introduce a utility for taken/not taken branches
		match (loc.frame.getFrameAccessor().getOperand(0)) {
			Ref(obj) => {
				if (null_taken == (obj == null)) trace.pushTaken();
				else trace.pushNotTaken();
			}
			_ => trace.pushNotTaken();
		}
		return Resumption.Continue;
	}
}

private class TraceBrOnCastProbe(trace: TraceBuffer, nullable: bool, ht_val: int, success_taken: bool) extends Probe {
	def fire(loc: DynamicLoc) -> Resumption {
		// XXX: introduce a utility for taken/not taken branches
		var accessor = loc.frame.getFrameAccessor();
		var instance = accessor.func().instance;
		var result = Runtime.cast(instance, nullable, ht_val, accessor.getOperand(0));
		if (result == success_taken) trace.pushNotTaken();
		else trace.pushTaken();
		return Resumption.Continue;
	}
}


private class TraceBrTableProbe(trace: TraceBuffer, labels: Array<u31>) extends OperandProbe_i_v {
	def fire_i(i: u32) {
		// XXX: flag to switch between per value and per target accounting
		if (i >= labels.length) trace.pushBranchTable(u30.view(labels[labels.length - 1]));
		else trace.pushBranchTable(u30.view(labels[i]));
	}
}

private class TraceAnchorProbe(trace: TraceBuffer, anchor_id: u30) extends Probe { // XXX: void probe
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		trace.pushAnchor(anchor_id);
		return Resumption.Continue;
	}
}

type TraceAnchorLoc(module: Module, func: FuncDecl, pc: int) {
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.put2("[%q+%d]", func.render(module.names, _), pc); // XXX: module name
	}
}

type TraceEntry #unboxed {
	case Invalid;
	case Anchor(id: u30);
	case Taken;
	case NotTaken;
	case BranchTable(which: u30);
}
