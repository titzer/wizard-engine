// Copyright 2024 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A flat function-based profiler.
def monitor_ = MonitorRegistry.add(
	"fprofile", "Reports execution time spent in individual functions.",
	FuncProfileMonitor.new());
def filter_ = monitor_.options.addAlias(
	monitor_.options.newDeclFilterOption("filter", "apply profiling to selected functions"),
	"f");

var ticks: void -> u64;
var filter: DeclFilter;
class FuncProfileMonitor extends Monitor {
	def entries = Vector<EnterProbe>.new();
	// format: --monitors=fprofile{<filter>}
	def configure(args: string) -> string {
		if (args != null) filter = filter_.val;
		return null;
	}
	def onParse(module: Module, err: ErrorGen) {
		if (true) ticks = Target.getRdtsc(); // TODO: make configurable
		else ticks = Target.ticksNs;

		var bi = BytecodeIterator.new();
		for (i < module.functions.length) {
			var f = module.functions[i];
			if (f.imp != null) continue;
			if (filter != null && !filter.matches(module, f)) continue;
			var prev_call = false;
			var enter = EnterProbe.new(module, f);
			var exit = ExitProbe.new(enter);
			var call = NestedCallProbe.new(enter);
			var ret = NestedReturnProbe.new(enter);
			entries.put(enter);
			Instrumentation.insertFuncEntryProbe(module, f.func_index, enter);
			for (bi = BytecodeIterator.new().reset(f); bi.more(); bi.next()) {
				if (prev_call) {
					Instrumentation.insertLocalProbe(module, f.func_index, bi.pc, ret);
					prev_call = false;
				}
				match (bi.current()) {
					CALL, CALL_INDIRECT, CALL_REF => {
						Instrumentation.insertLocalProbe(module, f.func_index, bi.pc, call);
						prev_call = true;
					}
					RETURN, RETURN_CALL, RETURN_CALL_INDIRECT, RETURN_CALL_REF => {
						Instrumentation.insertLocalProbe(module, f.func_index, bi.pc, exit);
					}
					_ => ;
				}
			}
			Instrumentation.insertLocalProbe(module, f.func_index, f.cur_bytecode.length - 1, exit);
		}
	}
	def onFinish(i: Instance, r: Result) {
		output(out, entries);
	}
}

def compareEntries(a: EnterProbe, b: EnterProbe) -> bool {
	return a.cumul > b.cumul;
}


private class EnterProbe(module: Module, func: FuncDecl) extends Probe {
	var count: u64;
	var cumul: u64;
	var start: u64;
	var nested_start: u64;
	var stack: Vector<(u64, u64)>;

	def fire(loc: DynamicLoc) -> ProbeAction {
		count++;
		if (start != 0) {
			// recursive invocation; allocate stack entry
			if (stack == null) stack = Vector.new();
			stack.put(start, nested_start);
			start = u64.view(ticks());
		} else {
			start = u64.view(ticks());
		}
		return ProbeAction.Continue;
	}
}

private class ExitProbe(p: EnterProbe) extends Probe {
	def fire(loc: DynamicLoc) -> ProbeAction {
		var end = u64.view(ticks());
		var diff = end - p.start;
		p.cumul += diff;
		p.start = 0;
		if (p.stack != null && p.stack.length > 0) {
			var nlength = p.stack.length - 1;
			var t = p.stack[nlength];
			p.start = t.0;
			p.nested_start = t.1;
			p.stack.resize(nlength);
		}
		return ProbeAction.Continue;
	}
}

private class NestedCallProbe(p: EnterProbe) extends Probe {
	def fire(loc: DynamicLoc) -> ProbeAction {
		var time = u64.view(ticks());
		p.nested_start = time;
		return ProbeAction.Continue;
	}
}

private class NestedReturnProbe(p: EnterProbe) extends Probe {
	def fire(loc: DynamicLoc) -> ProbeAction {
		if (p.nested_start == 0) return ProbeAction.Continue; // not paired with a call in this func
		var time = u64.view(ticks());
		p.cumul -= time - p.nested_start;
		p.nested_start = 0;
		return ProbeAction.Continue;
	}
}

def table = initTable();
def initTable() -> TraceTable {
	var t = TraceTable.new(["Function", "count", "cycles", "percent"]);
	t.cells[0].set(24, Justification.LEFT, Color.NONE);
	t.cells[1].set(9, Justification.RIGHT, Color.NONE);
	t.cells[2].set(12, Justification.RIGHT, Color.NONE);
	t.cells[3].set(8, Justification.RIGHT, Color.NONE);
	return t;
}

def output(out: TraceBuilder, entries: Vector<EnterProbe>) {
	var C = table.cells;
	var total = 0uL;
	C[0].color = Color.COVERED;
	C[1].color = Color.COUNT;
	C[2].color = Color.COUNT;
	C[3].color = Color.COUNT;

	for (i < entries.length) { // compute maximum function name length for formatting
		var e = entries[i], func = e.func, count = e.count;
		total += e.cumul;		
		if (count == 0) continue;
		out.reset();
		func.render(e.module.names, out);
		if (out.length > C[0].width) C[0].width = if(out.length > byte.max, byte.max, byte.view(out.length));
	}
	out.reset();

	if (MonitorOptions.CSV.val) table.putCsvHeader(out);
	else table.putTableHeader(out);
	out.flush();

	var array = entries.copy();
	var sorted = Arrays.sort(array, 0, array.length, compareEntries);
	for (e in sorted) {
		var func = e.func, count = e.count, cumul = e.cumul;
		if (count == 0) continue;
		func.render(e.module.names, C[0]);
		C[1].putd(count);
		C[2].putd(cumul);
		TraceUtil.renderPercent(C[3], long.view(e.cumul), long.view(total), 3);
		if (MonitorOptions.CSV.val) table.putCsvRow(out);
		else table.putTableRow(out);
		out.flush();
	}
}
