// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def monitor_ = MonitorRegistry.add(
	"hotness", "Tallies \"hot\" execution path counts proportionally.",
	HotnessMonitor.new());
def inCodeMode = monitor_.options.addAlias(
	monitor_.options.newFlag("code", null, "emit report with code"),
	"c");

// Implements a monitor that computes various measures of hotness of the program.
class HotnessMonitor extends Monitor {
	var hotness: HotnessData;

	def onParse(m: Module, err: ErrorGen) {
		hotness = HotnessData.new(out, m);
		var it = BytecodeIterator.new();

		for (i < m.functions.length) {
			var f = m.functions[i];
			if (f.imp != null) continue; // skip imported functions

			for (bi = it.reset(f); bi.more(); bi.next()) {
				def p = hotness.newProbe(f, bi.current(), bi.pc);
				Instrumentation.insertLocalProbe(m, f.func_index, bi.pc, p);
			}
		}
	}
	def onFinish(i: Instance, r: Result) {
		if (inCodeMode.val){ 
			hotness.reportCode();
		} else if (MonitorOptions.CSV.val){
			hotness.reportCSV(); 
		} else {
			hotness.report();
		} 
	}
}
private class LocCounter(func: FuncDecl, pc: int, op: Opcode, var group: int) extends CountProbe {
	def compare(that: LocCounter) -> bool {
		if (this.count > that.count) return true;
		if (this.count < that.count) return false;
		if (this.func.func_index < that.func.func_index) return true;
		if (this.func.func_index > that.func.func_index) return false;
		if (this.pc < that.pc) return true;
		return false;
	}
}

private class HotnessData(out: TraceBuilder, m: Module) {
	def counters = Vector<LocCounter>.new();
	var thresholds = [0.5d, 0.75d, 0.9d, 0.95d, 0.99d, 1d];

	def newProbe(f: FuncDecl, op: Opcode, pc: int) -> LocCounter {
		var p = LocCounter.new(f, pc, op, 0);
		counters.put(p);
		return p;
	}

	def initialize(sort: bool) -> Array<LocCounter> {
		var result = if(sort, counters.extract(), counters.copy());
		result = Arrays.sort(result, 0, result.length, LocCounter.compare);
		var total = 0uL;
		for (r in result) total += r.count;
		var sum = 0uL;
		var t = 0;
		var threshold = u64.truncd(thresholds[t] * double.roundi(total));

		for (i < result.length) {
			var r = result[i];
			r.group = t; // set hotness group
			sum += r.count;
			if (sum >= threshold) {
				t++;
				if (t >= thresholds.length) threshold = u64.max;
				else threshold = u64.truncd(thresholds[t] * double.roundi(total));
			}
		}

		return result;
	}

	def report() {
		var result = initialize(true);

		for (i < result.length) {
			var r = result[i];

			var width = 25;
			if (i > 0 && r.group > result[i-1].group) {
				var t = result[i-1].group;
				out.beginColor(Palettes.spectrum[t]).beginColor(Color.UNDERLINE);
				var s1 = " %d instrs", s2 = "reach %d%";
				out.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.put1(_, s1, i)), 10)
					.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.put1(_, s2, u64.truncd(100*thresholds[t]))), width)
					.endColors()
					.ln();
			}

			var funcColor = if(r.count > 0, Color.FUNC, Color.UNREACHABLE);
			var lineColor = if(r.count > 0, Color.LINE, Color.UNREACHABLE);

			out.beginColor(funcColor)
				.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.put1(_, "func %q", r.func.render(m.names, _))), 15)
				.endColors()
				.beginColor(lineColor)
				.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.put1(_, "+%d", r.pc)), 5)
				.endColors()
				.putc(':')
				.beginColor(Palettes.spectrum[r.group])
				.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.putd(_, r.count)), 14)
				.endColors()
				.ln();
		}

	}

	def reportCode() {
		initialize(false);

		for (i < thresholds.length) {
			var width = 15;
			out.beginColor(Palettes.spectrum[i]).beginColor(Color.UNDERLINE);
			var s = " reach %d%";
			out.rjustify('-', TraceUtil.renderedLength(out, TraceBuilder.put1(_, s, u64.truncd(100*thresholds[i]))), width)
				.endColors()
				.ln();
		}

		var prev: FuncDecl;
		var bi = BytecodeIterator.new();
		var it = InstrTracer.new();
		var controlStack = ArrayStack<Opcode>.new();

		for (i < counters.length) {
			var e = counters[i];
			if (e.func != prev) {
				bi.reset(e.func);
				prev = e.func;
				out.beginColor(Color.FUNC)
					.put1("func %q:", prev.render(m.names, _))
					.ln();
			}
			bi.at(e.pc, -1);
			out.endColors()
				.beginColor(Color.LINE)
				.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.put1(_, "+%d", e.pc)), 5)
				.beginColor(Palettes.spectrum[e.group])
				.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.put1(_, "%d\t", e.count)), 8);
			match(e.op) {
				BLOCK, LOOP, IF =>  {
					for(i < controlStack.top) out.putc('\t');
					bi.traceOrig(out, m, it);
					out.ln();
					controlStack.push(e.op);
					continue;
				}
				END => controlStack.pop();
				_ => ;
			}
			if (e.op == Opcode.ELSE) for(i < controlStack.top - 1) out.putc('\t');
			else for(i < controlStack.top) out.putc('\t');
			bi.traceOrig(out, m, it);
			out.ln();
		}
	}
	
	def reportCSV() {
		var result = initialize(true);
		//add title line to out buffer
		//calling function, its pc, and the number of times its called in the program
		out.puts("hotness,func,pc,count\n");
		for (i < result.length) {
			var r = result[i];
			//add each line of data so the out buffer
			out.puts("hotness,")
				.put1("%q", r.func.render(m.names, _))
				.putc(',')
				.put1("%d", r.pc)
				.putc(',')
				.putd(r.count);
			if(i != result.length - 1){
				out.putc('\n');
			}
		}
		//release buffer to cmd
		out.ln();
	}
}

