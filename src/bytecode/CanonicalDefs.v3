// Constants
def HAS_MEM_INDEX = 0x40u8;

// Types.
type v128(low: u64, high: u64);
type Label;
type Value;
class Object { }
type TypeVar;
type FieldOffset;
type BlockType;
type Labels;
class Signature { }
class Function { }

enum FieldKind {
	U8, U16, U32, U64, F32, F64, V128, REF
}

// Immediates.
def imm_readILEB32() -> u32 #rw_codeptr;
def imm_readILEB64() -> u64 #rw_codeptr;
def imm_readULEB32() -> u32 #rw_codeptr;
def imm_readULEB64() -> u64 #rw_codeptr;
def imm_readU8() -> u8 #rw_codeptr;
def imm_readU32() -> u32 #rw_codeptr;
def imm_readU64() -> u64 #rw_codeptr;
def imm_readBlockType() -> BlockType #rw_codeptr;
def imm_readLabels() -> Labels #rw_codeptr;

// Value stack.
def pop_u32() -> u32 #rw_stack;
def pop_u64() -> u64 #rw_stack;
def pop_f32() -> float #rw_stack;
def pop_f64() -> double #rw_stack;
def pop_v128() -> v128 #rw_stack;
def pop_Object() -> Object #rw_stack;
def pop_Value(tv: TypeVar) -> Value #rw_stack;

def push_u32(v: u32);
def push_u64(v: u64);
def push_f32(v: float);
def push_f64(v: double);
def push_v128(v: v128);
def push_Object(v: Object);
def push_Value(tv: TypeVar, v: Value);

// Conversions.
def u32_reinterpret_f32(v: float) -> u32;
def f32_reinterpret_u32(v: u32) -> float;
def u64_reinterpret_f64(v: double) -> u64;
def f64_reinterpret_u64(v: u64) -> double;
def F32_convert_i32_s(v: u32) -> float;
def F32_convert_i32_u(v: u32) -> float;
def F32_convert_i64_s(v: u64) -> float;
def F32_convert_i64_u(v: u64) -> float;
def F64_convert_i32_s(v: u32) -> double;
def F64_convert_i32_u(v: u32) -> double;
def F64_convert_i64_s(v: u64) -> double;
def F64_convert_i64_u(v: u64) -> double;
def U32_trunc_f32_s(v: float) -> u32;
def U32_trunc_f32_u(v: float) -> u32;
def U32_trunc_f64_s(v: double) -> u32;
def U32_trunc_f64_u(v: double) -> u32;
def U64_trunc_f32_s(v: float) -> u64;
def U64_trunc_f32_u(v: float) -> u64;
def U64_trunc_f64_s(v: double) -> u64;
def U64_trunc_f64_u(v: double) -> u64;

def U32_wrap_u64(v: u64) -> u32;

// Signed ops.
def U32_div_s(lhs: u32, rhs: u32) -> u32;
def U32_rem_s(lhs: u32, rhs: u32) -> u32;
def U32_rem_u(lhs: u32, rhs: u32) -> u32;
def U32_lt_s(lhs: u32, rhs: u32) -> bool;
def U32_le_s(lhs: u32, rhs: u32) -> bool;
def U32_gt_s(lhs: u32, rhs: u32) -> bool;
def U32_ge_s(lhs: u32, rhs: u32) -> bool;

// Bitwise ops.
def U32_clz(x: u32) -> u32;
def U32_ctz(x: u32) -> u32;
def U32_popcnt(x: u32) -> u32;
def U32_shl(lhs: u32, rhs: u32) -> u32;
def U32_shr_u(lhs: u32, rhs: u32) -> u32;
def U32_shr_s(lhs: u32, rhs: u32) -> u32;
def U32_rotl(lhs: u32, rhs: u32) -> u32;
def U32_rotr(lhs: u32, rhs: u32) -> u32;
// Extension ops.
def U32_extend8_s(x: u32) -> u32;
def U32_extend16_s(x: u32) -> u32;

// U64 Signed ops.
def U64_div_s(lhs: u64, rhs: u64) -> u64;
def U64_rem_s(lhs: u64, rhs: u64) -> u64;
def U64_rem_u(lhs: u64, rhs: u64) -> u64;
def U64_lt_s(lhs: u64, rhs: u64) -> bool;
def U64_le_s(lhs: u64, rhs: u64) -> bool;
def U64_gt_s(lhs: u64, rhs: u64) -> bool;
def U64_ge_s(lhs: u64, rhs: u64) -> bool;
def U64_ge(lhs: u64, rhs: u64) -> bool;

// U64 Bitwise ops.
def U64_clz(x: u64) -> u64;
def U64_ctz(x: u64) -> u64;
def U64_popcnt(x: u64) -> u64;
def U64_shl(lhs: u64, rhs: u64) -> u64;
def U64_shr_u(lhs: u64, rhs: u64) -> u64;
def U64_shr_s(lhs: u64, rhs: u64) -> u64;
def U64_rotl(lhs: u64, rhs: u64) -> u64;
def U64_rotr(lhs: u64, rhs: u64) -> u64;

// U64 Extension ops.
def U64_extend8_s(x: u64) -> u64;
def U64_extend16_s(x: u64) -> u64;
def U64_extend32_s(x: u64) -> u64;
def U64_extend_i32_s(x: u64) -> u64;
def U64_extend_i32_u(x: u64) -> u64;

// F32 ops.
def F32_neg(x: float) -> float;
def F32_ceil(x: float) -> float;
def F32_floor(x: float) -> float;
def F32_trunc(x: float) -> float;

// F64 ops.
def F64_neg(x: double) -> double;
def F64_ceil(x: double) -> double;
def F64_floor(x: double) -> double;
def F64_trunc(x: double) -> double;

// Local variables.
def getLocal(tv: TypeVar, index: u32) -> Value;
def setLocal(tv: TypeVar, index: u32, v: Value);

// Global variables.
def getGlobal(tv: TypeVar, index: u32) -> Value;
def setGlobal(tv: TypeVar, index: u32, v: Value);

// Function context.
def f_getLabel(depth: u32) -> Label;
def f_getLocalType(index: u32) -> TypeVar;
def f_getTopOfStackType() -> TypeVar;
def f_isAtEnd() -> bool;

// Module context.
def m_getGlobalType(index: u32) -> TypeVar;
def m_getFieldKind(struct_index: u32, field_index: u32) -> FieldKind;
def m_getFieldOffset(struct_index: u32, field_index: u32) -> FieldOffset;
def m_isMemory64(memory_index: u32) -> bool;
def m_isTable64(memory_index: u32) -> bool;
def m_getFuncSignature(func_index: u32) -> Signature;
def m_getSignature(sig_index: u32) -> Signature;

// Instance context.
def i_getTableFunction64(table_index: u32, sig: Signature, func_index: u64) -> Function;
def i_getTableFunction32(table_index: u32, sig: Signature, func_index: u32) -> Function;
def i_getFunction(func_index: u32) -> Function;

// Machine intrinsics.
def mach_readStructField_u8(obj: Object, offset: FieldOffset) -> u8;
def mach_readStructField_u16(obj: Object, offset: FieldOffset) -> u16;
def mach_readStructField_u32(obj: Object, offset: FieldOffset) -> u32;
def mach_readStructField_u64(obj: Object, offset: FieldOffset) -> u64;
def mach_readStructField_f32(obj: Object, offset: FieldOffset) -> float;
def mach_readStructField_f64(obj: Object, offset: FieldOffset) -> double;
def mach_readStructField_v128(obj: Object, offset: FieldOffset) -> v128;
def mach_readStructField_Object(obj: Object, offset: FieldOffset) -> Object;

def mach_readMemory64_u8(memory_index: u32, index: u64, offset: u64) -> u8;
def mach_readMemory32_u8(memory_index: u32, index: u32, offset: u32) -> u8;
def mach_readMemory64_u16(memory_index: u32, index: u64, offset: u64) -> u16;
def mach_readMemory32_u16(memory_index: u32, index: u32, offset: u32) -> u16;
def mach_readMemory64_u32(memory_index: u32, index: u64, offset: u64) -> u32;
def mach_readMemory32_u32(memory_index: u32, index: u32, offset: u32) -> u32;
def mach_readMemory64_u8_64(memory_index: u32, index: u64, offset: u64) -> u8;
def mach_readMemory32_u8_64(memory_index: u32, index: u32, offset: u32) -> u8;
def mach_readMemory64_u16_64(memory_index: u32, index: u64, offset: u64) -> u16;
def mach_readMemory32_u16_64(memory_index: u32, index: u32, offset: u32) -> u16;
def mach_readMemory64_u32_64(memory_index: u32, index: u64, offset: u64) -> u32;
def mach_readMemory32_u32_64(memory_index: u32, index: u32, offset: u32) -> u32;
def mach_readMemory64_u64(memory_index: u32, index: u64, offset: u64) -> u64;
def mach_readMemory32_u64(memory_index: u32, index: u32, offset: u32) -> u64;
def mach_readMemory64_f32(memory_index: u32, index: u64, offset: u64) -> float;
def mach_readMemory32_f32(memory_index: u32, index: u32, offset: u32) -> float;
def mach_readMemory64_f64(memory_index: u32, index: u64, offset: u64) -> double;
def mach_readMemory32_f64(memory_index: u32, index: u32, offset: u32) -> double;

def mach_writeMemory64_u8(memory_index: u32, index: u64, offset: u64, val: u32);
def mach_writeMemory32_u8(memory_index: u32, index: u32, offset: u32, val: u32);
def mach_writeMemory64_u16(memory_index: u32, index: u64, offset: u64, val: u32);
def mach_writeMemory32_u16(memory_index: u32, index: u32, offset: u32, val: u32);
def mach_writeMemory64_u32(memory_index: u32, index: u64, offset: u64, val: u32);
def mach_writeMemory32_u32(memory_index: u32, index: u32, offset: u32, val: u32);
def mach_writeMemory64_u8_64(memory_index: u32, index: u64, offset: u64, val: u64);
def mach_writeMemory32_u8_64(memory_index: u32, index: u32, offset: u32, val: u64);
def mach_writeMemory64_u16_64(memory_index: u32, index: u64, offset: u64, val: u64);
def mach_writeMemory32_u16_64(memory_index: u32, index: u32, offset: u32, val: u64);
def mach_writeMemory64_u32_64(memory_index: u32, index: u64, offset: u64, val: u64);
def mach_writeMemory32_u32_64(memory_index: u32, index: u32, offset: u32, val: u64);
def mach_writeMemory64_u64(memory_index: u32, index: u64, offset: u64, val: u64);
def mach_writeMemory32_u64(memory_index: u32, index: u32, offset: u32, val: u64);
def mach_writeMemory64_f32(memory_index: u32, index: u64, offset: u64, val: float);
def mach_writeMemory32_f32(memory_index: u32, index: u32, offset: u32, val: double);
def mach_writeMemory64_f64(memory_index: u32, index: u64, offset: u64, val: double);
def mach_writeMemory32_f64(memory_index: u32, index: u32, offset: u32, val: double);

def mach_readTable64(table_index: u32, index: u64) -> Object;
def mach_readTable32(table_index: u32, index: u32) -> Object;

def mach_writeTable64(table_index: u32, index: u64, val: Object);
def mach_writeTable32(table_index: u32, index: u32, val: Object);

def mach_memorySize32(memory_index: u32) -> u32;
def mach_memoryGrow32(memory_index: u32, size: u32) -> u32;
def mach_memorySize64(memory_index: u32) -> u64;
def mach_memoryGrow64(memory_index: u32, size: u64) -> u64;

def object_Null() -> Object;
def object_isNull(obj: Object) -> bool;
def object_New(sig: Signature) -> Object;

// Traps.
def invalid(); // should never occur
def trapNull();
def trapUnreachable();
def trapDivideByZero();
def trapDivideUnrepresentable();
def trapTableOOB();

// Control flow and calls.
def doReturn();
def doFallthru();
def doBlock(bt: BlockType) -> Label;
def doLoop(bt: BlockType) -> Label;
def doIf(bt: BlockType) -> Label;
def doElse() -> Label;
def doTry(bt: BlockType);
def doEnd();
def doCall(sig: Signature, target: Function);
def doReturnCall(sig: Signature, target: Function);
def doBranch(label: Label);
def doSwitch(labels: Labels, key: u32);


//===================================================================================================
//@bytecode start
// 0x00
def UNREACHABLE() {
	trapUnreachable();
}
def NOP() { 
	return void; // needed for CBD parser
}
def BLOCK() {
	var bt = imm_readBlockType();
	doBlock(bt);
}
def LOOP() {
	var bt = imm_readBlockType();
	doLoop(bt);
}
def IF() {
	var bt = imm_readBlockType();
	var cond = pop_u32();
	var label #sidetable = doIf(bt);
	if (u32.==(cond, 0)) doBranch(label);
	else doFallthru();
}
def ELSE() {
	var label #sidetable = doElse();
	doBranch(label);
}
def TRY() {
	var bt = imm_readBlockType();
	doTry(bt);
}
// missing 0x08 THROW
// missing 0x0A THROW_REF
def END() {
	doEnd();
	if (f_isAtEnd()) doReturn();
}
def BR() {
	var depth = imm_readULEB32();
	var label #sidetable = f_getLabel(depth);
	doBranch(label);
}
def BR_IF() {
	var depth = imm_readULEB32();
	var label #sidetable = f_getLabel(depth);
	var cond = pop_u32();
	if (u32.!=(cond, 0)) doBranch(label);
	else doFallthru();
}
def BR_TABLE() {
	var labels #sidetable = imm_readLabels();
	var key = pop_u32();
	doSwitch(labels, key);
}
def RETURN() {
	doReturn();
}
// 0x10
def CALL() {
	var index = imm_readULEB32();
	var sig = m_getFuncSignature(index);
	var target = i_getFunction(index); // null implies no signature check
	doCall(sig, target);
}
def CALL_INDIRECT() {
	var sig_index = imm_readULEB32();
	var table_index = imm_readULEB32();
	var sig = m_getSignature(sig_index);
	var is64 #sidetable = m_isTable64(table_index);
	if (is64) {
		var func_index = pop_u64();
		var target = i_getTableFunction64(table_index, sig, func_index);
		doCall(sig, target);
	} else {
		var func_index = pop_u32();
		var target = i_getTableFunction32(table_index, sig, func_index);
		doCall(sig, target);
	}
}
def RETURN_CALL() {
	var index = imm_readULEB32();
	var sig = m_getFuncSignature(index);
	var target = i_getFunction(index);
	doReturnCall(sig, target);
}
// missing 0x13 RETURN_CALL_INDIRECT
// missing 0x14 CALL_REF
// missing 0x15 RETURN_CALL_REF
def DROP() {
	var tv = f_getTopOfStackType();
	pop_Value(tv);
}
def SELECT() {
	var c = pop_u32();
	var tv = f_getTopOfStackType();
	var b = pop_Value(tv), a = pop_Value(tv);
	if (u32.!=(c, 0)) push_Value(tv, a);
	else push_Value(tv, b);
}
// missing 0x1C SELECT_T
// missing 0x1F TRY_TABLE
// 0x20
def LOCAL_GET() {
	var index = imm_readULEB32();
	var tv = f_getLocalType(index);
	var val = getLocal(tv, index);
	push_Value(tv, val);
}
def LOCAL_SET() {
	var index = imm_readULEB32();
	var tv = f_getLocalType(index);
	var val = pop_Value(tv);
	setLocal(tv, index, val);
}
def LOCAL_TEE() {
	var index = imm_readULEB32();
	var tv = f_getLocalType(index);
	var val = pop_Value(tv);
	setLocal(tv, index, val);
	push_Value(tv, val);
}
def GLOBAL_GET() {
	var index = imm_readULEB32();
	var tv = m_getGlobalType(index);
	var val = getGlobal(tv, index);
	push_Value(tv, val);
}
def GLOBAL_SET() {
	var index = imm_readULEB32();
	var tv = m_getGlobalType(index);
	var val = pop_Value(tv);
	setGlobal(tv, index, val);
}
def TABLE_GET() {
	var table_index = imm_readULEB32();
	if (m_isTable64(table_index)) {
		var index = pop_u64();
		var val = mach_readTable64(table_index, index);
		push_Object(val);
	} else {
		var index = pop_u32();
		var val = mach_readTable32(table_index, index);
		push_Object(val);
	}
}
def TABLE_SET() {
	var table_index = imm_readULEB32();
	if (m_isTable64(table_index)) {
		var val = pop_Object();
		var index = pop_u64();
		mach_writeTable64(table_index, index, val);
	} else {
		var val = pop_Object();
		var index = pop_u32();
		mach_writeTable32(table_index, index, val);
	}
}
def I32_LOAD() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u32(memindex, index, offset);
		push_u32(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_u32(memindex, index, offset);
		push_u32(val);
	}
}
def I64_LOAD() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u64(memindex, index, offset);
		push_u64(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_u64(memindex, index, offset);
		push_u64(val);
	}
}
def F32_LOAD() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_f32(memindex, index, offset);
		push_f32(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_f32(memindex, index, offset);
		push_f32(val);
	}
}
def F64_LOAD() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_f64(memindex, index, offset);
		push_f64(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_f64(memindex, index, offset);
		push_f64(val);
	}
}
def I32_LOAD8_S() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u8(memindex, index, offset);
		var extend = U32_extend8_s(val);
		push_u32(extend);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();		
		var val = mach_readMemory32_u8(memindex, index, offset);
		var extend = U32_extend8_s(val);
		push_u32(extend);
	}
}
def I32_LOAD8_U() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u8(memindex, index, offset);
		push_u32(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_u8(memindex, index, offset);
		push_u32(val);
	}
}
def I32_LOAD16_S() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u16(memindex, index, offset);
		var extend = U32_extend16_s(val);
		push_u32(extend);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_u16(memindex, index, offset);
		var extend = U32_extend16_s(val);
		push_u32(extend);
	}
}
def I32_LOAD16_U() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u16(memindex, index, offset);
		push_u32(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_u16(memindex, index, offset);
		push_u32(val);
	}
}
// 0x30
def I64_LOAD8_S() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u8_64(memindex, index, offset);
		var extend = U64_extend8_s(val);
		push_u64(extend);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();		
		var val = mach_readMemory32_u8_64(memindex, index, offset);
		var extend = U64_extend8_s(val);
		push_u64(extend);
	}
}
def I64_LOAD8_U() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u8_64(memindex, index, offset);
		push_u64(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_u8_64(memindex, index, offset);
		push_u64(val);
	}
}
def I64_LOAD16_S() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u16_64(memindex, index, offset);
		var extend = U64_extend16_s(val);
		push_u64(extend);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_u16_64(memindex, index, offset);
		var extend = U64_extend16_s(val);
		push_u64(extend);
	}
}
def I64_LOAD16_U() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u16_64(memindex, index, offset);
		push_u64(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_u16_64(memindex, index, offset);
		push_u64(val);
	}
}
def I64_LOAD32_S() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u32_64(memindex, index, offset);
		var extend = U64_extend32_s(val);
		push_u64(extend);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_u32_64(memindex, index, offset);
		var extend = U64_extend32_s(val);
		push_u64(extend);
	}
}
def I64_LOAD32_U() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u32_64(memindex, index, offset);
		push_u64(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_u32_64(memindex, index, offset);
		push_u64(val);
	}
}
def I32_STORE() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();

	var val = pop_u32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		mach_writeMemory64_u32(memindex, index, offset, val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		mach_writeMemory32_u32(memindex, index, offset, val);
	}
}
def I64_STORE() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();

	var val = pop_u64();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		mach_writeMemory64_u64(memindex, index, offset, val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		mach_writeMemory32_u64(memindex, index, offset, val);
	}
}
def F32_STORE() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();

	var val = pop_f32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		mach_writeMemory64_f32(memindex, index, offset, val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		mach_writeMemory32_f32(memindex, index, offset, val);
	}
}
def F64_STORE() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();

	var val = pop_f64();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		mach_writeMemory64_f64(memindex, index, offset, val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		mach_writeMemory32_f64(memindex, index, offset, val);
	}
}
def I32_STORE8() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();

	var val = pop_u32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		mach_writeMemory64_u8(memindex, index, offset, val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		mach_writeMemory32_u8(memindex, index, offset, val);
	}
}
def I32_STORE16() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();

	var val = pop_u32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		mach_writeMemory64_u16(memindex, index, offset, val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		mach_writeMemory32_u16(memindex, index, offset, val);
	}
}
def I64_STORE8() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();

	var val = pop_u64();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		mach_writeMemory64_u8_64(memindex, index, offset, val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		mach_writeMemory32_u8_64(memindex, index, offset, val);
	}
}
def I64_STORE16() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();

	var val = pop_u64();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		mach_writeMemory64_u16_64(memindex, index, offset, val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		mach_writeMemory32_u16_64(memindex, index, offset, val);
	}
}
def I64_STORE32() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();

	var val = pop_u64();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		mach_writeMemory64_u32_64(memindex, index, offset, val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		mach_writeMemory32_u32_64(memindex, index, offset, val);
	}
}
def MEMORY_SIZE() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();

	if (m_isMemory64(memindex)) {
		var r = mach_memorySize64(memindex);
		push_u64(r);
	} else {
		var r = mach_memorySize32(memindex);
		push_u32(r);
	}
}
// 0x40
def MEMORY_GROW() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();

	if (m_isMemory64(memindex)) {
		var val = pop_u64();
		var r = mach_memoryGrow64(memindex, val);
		push_u64(r);
	} else {
		var val = pop_u32();
		var r = mach_memoryGrow32(memindex, val);
		push_u32(r);
	}
}
def I32_CONST() {
	var x = imm_readILEB32();
	push_u32(x);
}
def I64_CONST() {
	var x = imm_readILEB64();
	push_u64(x);
}
def F32_CONST() {
	var x = imm_readU32();
	push_f32(f32_reinterpret_u32(x));
}
def F64_CONST() {
	var x = imm_readU64();
	push_f64(f64_reinterpret_u64(x));
}
def I32_EQZ() {
	var a = pop_u32();
	if (u32.==(a, 0)) push_u32(1);
	else push_u32(0);
}
def I32_EQ() {
	var b = pop_u32(), a = pop_u32();
	if (u32.==(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_NE() {
	var b = pop_u32(), a = pop_u32();
	if (u32.!=(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_LT_S() {
	var b = pop_u32(), a = pop_u32();
	if (U32_lt_s(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_LT_U() {
	var b = pop_u32(), a = pop_u32();
	if (u32.<(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_GT_S() {
	var b = pop_u32(), a = pop_u32();
	if (U32_gt_s(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_GT_U() {
	var b = pop_u32(), a = pop_u32();
	if (u32.>(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_LE_S() {
	var b = pop_u32(), a = pop_u32();
	if (U32_le_s(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_LE_U() {
	var b = pop_u32(), a = pop_u32();
	if (u32.<=(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_GE_S() {
	var b = pop_u32(), a = pop_u32();
	if (U32_ge_s(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_GE_U() {
	var b = pop_u32(), a = pop_u32();
	if (u32.>=(a, b)) push_u32(1);
	else push_u32(0);
}
// 0x50
def I64_EQZ() {
	var a = pop_u64();
	if (u64.==(a, 0)) push_u32(1);
	else push_u32(0);
}
def I64_EQ() {
	var b = pop_u64(), a = pop_u64();
	if (u64.==(a, b)) push_u32(1);
	else push_u32(0);
}
def I64_NE() {
	var b = pop_u64(), a = pop_u64();
	if (u64.!=(a, b)) push_u32(1);
	else push_u32(0);
}
def I64_LT_S() {
	var b = pop_u64(), a = pop_u64();
	if (U64_lt_s(a, b)) push_u32(1);
	else push_u32(0);
}
def I64_LT_U() {
	var b = pop_u64(), a = pop_u64();
	if (u64.<(a, b)) push_u32(1);
	else push_u32(0);
}
def I64_GT_S() {
	var b = pop_u64(), a = pop_u64();
	if (U64_gt_s(a, b)) push_u32(1);
	else push_u32(0);
}
def I64_GT_U() {
	var b = pop_u64(), a = pop_u64();
	if (u64.>(a, b)) push_u32(1);
	else push_u32(0);
}
def I64_LE_S() {
	var b = pop_u64(), a = pop_u64();
	if (U64_le_s(a, b)) push_u32(1);
	else push_u32(0);
}
def I64_LE_U() {
	var b = pop_u64(), a = pop_u64();
	if (u64.<=(a, b)) push_u32(1);
	else push_u32(0);
}
def I64_GE_S() {
	var b = pop_u64(), a = pop_u64();
	if (U64_ge_s(a, b)) push_u32(1);
	else push_u32(0);
}
def I64_GE_U() {
	var b = pop_u64(), a = pop_u64();
	if (u64.>=(a, b)) push_u32(1);
	else push_u32(0);
}
def F32_EQ() {
	var b = pop_f32(), a = pop_f32();
	if (float.==(a, b)) push_u32(1);
	else push_u32(0);
}
def F32_NE() {
	var b = pop_f32(), a = pop_f32();
	if (float.!=(a, b)) push_u32(1);
	else push_u32(0);
}
def F32_LT() {
	var b = pop_f32(), a = pop_f32();
	if (float.<(a, b)) push_u32(1);
	else push_u32(0);
}
def F32_GT() {
	var b = pop_f32(), a = pop_f32();
	if (float.>(a, b)) push_u32(1);
	else push_u32(0);
}
def F32_LE() {
	var b = pop_f32(), a = pop_f32();
	if (float.<=(a, b)) push_u32(1);
	else push_u32(0);
}
// 0x60
def F32_GE() {
	var b = pop_f32(), a = pop_f32();
	if (float.>=(a, b)) push_u32(1);
	else push_u32(0);
}
def F64_EQ() {
	var b = pop_f64(), a = pop_f64();
	if (double.==(a, b)) push_u32(1);
	else push_u32(0);
}
def F64_NE() {
	var b = pop_f64(), a = pop_f64();
	if (double.!=(a, b)) push_u32(1);
	else push_u32(0);
}
def F64_LT() {
	var b = pop_f64(), a = pop_f64();
	if (double.<(a, b)) push_u32(1);
	else push_u32(0);
}
def F64_GT() {
	var b = pop_f64(), a = pop_f64();
	if (double.>(a, b)) push_u32(1);
	else push_u32(0);
}
def F64_LE() {
	var b = pop_f64(), a = pop_f64();
	if (double.<=(a, b)) push_u32(1);
	else push_u32(0);
}
def F64_GE() {
	var b = pop_f64(), a = pop_f64();
	if (double.>=(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_CLZ() {
	var a = pop_u32();
	var r = U32_clz(a);
	push_u32(r);
}
def I32_CTZ() {
	var a = pop_u32();
	var r = U32_ctz(a);
	push_u32(r);
}
def I32_POPCNT() {
	var a = pop_u32();
	var r = U32_popcnt(a);
	push_u32(r);
}
def I32_ADD() {
	var b = pop_u32(), a = pop_u32();
	var r = u32.+(a, b);
	push_u32(r);
}
def I32_SUB() {
	var b = pop_u32(), a = pop_u32();
	var r = u32.-(a, b);
	push_u32(r);
}
def I32_MUL() {
	var b = pop_u32(), a = pop_u32();
	var r = u32.*(a, b);
	push_u32(r);
}
def I32_DIV_S() {
	var b = pop_u32(), a = pop_u32();
	var r = U32_div_s(a, b);
	if (u32.==(b, 0)) trapDivideByZero();
	else if (bool.&&(u32.==(b, u32.view(-1)), u32.==(a, u32.view(-2_147_483_648)))) trapDivideUnrepresentable();
	else push_u32(r);
}
def I32_DIV_U() {
	var b = pop_u32(), a = pop_u32();
	var r = u32./(a, b);
	if (u32.==(b, 0)) trapDivideByZero();
	else push_u32(r);
}
def I32_REM_S() {
	var b = pop_u32(), a = pop_u32();
	var r = U32_rem_s(a, b);
	if (u32.==(b, 0)) trapDivideByZero();
	else push_u32(r);
}
// 0x70
def I32_REM_U() {
	var b = pop_u32(), a = pop_u32();
	var r = U32_rem_u(a, b);
	if (u32.==(b, 0)) trapDivideByZero();
	else push_u32(r);
}
def I32_AND() {
	var b = pop_u32(), a = pop_u32();
	var r = u32.&(a, b);
	push_u32(r);
}
def I32_OR() {
	var b = pop_u32(), a = pop_u32();
	var r = u32.|(a, b);
	push_u32(r);
}
def I32_XOR() {
	var b = pop_u32(), a = pop_u32();
	var r = u32.^(a, b);
	push_u32(r);
}
def I32_SHL() {
	var b = pop_u32(), a = pop_u32();
	var r = U32_shl(a, b);
	push_u32(r);
}
def I32_SHR_S() {
	var b = pop_u32(), a = pop_u32();
	var r = U32_shr_s(a, b);
	push_u32(r);
}
def I32_SHR_U() {
	var b = pop_u32(), a = pop_u32();
	var r = U32_shr_u(a, b);
	push_u32(r);
}
def I32_ROTL() {
	var b = pop_u32(), a = pop_u32();
	var r = U32_rotl(a, b);
	push_u32(r);
}
def I32_ROTR() {
	var b = pop_u32(), a = pop_u32();
	var r = U32_rotr(a, b);
	push_u32(r);
}
def I64_CLZ() {
	var a = pop_u64();
	var r = U64_clz(a);
	push_u64(r);
}
def I64_CTZ() {
	var a = pop_u64();
	var r = U64_ctz(a);
	push_u64(r);
}
def I64_POPCNT() {
	var a = pop_u64();
	var r = U64_popcnt(a);
	push_u64(r);
}
def I64_ADD() {
	var b = pop_u64(), a = pop_u64();
	var r = u64.+(a, b);
	push_u64(r);
}
def I64_SUB() {
	var b = pop_u64(), a = pop_u64();
	var r = u64.-(a, b);
	push_u64(r);
}
def I64_MUL() {
	var b = pop_u64(), a = pop_u64();
	var r = u64.*(a, b);
	push_u64(r);
}
def I64_DIV_S() {
	var b = pop_u64(), a = pop_u64();
	var r = U64_div_s(a, b);
	if (u64.==(b, 0)) trapDivideByZero();
	else if (bool.&&(u64.==(b, u64.view(-1)), u64.==(a, u64.view(-9223372036854775808L)))) trapDivideUnrepresentable();
	else push_u64(r);
}
// 0x80
def I64_DIV_U() {
	var b = pop_u64(), a = pop_u64();
	var r = u64./(a, b);
	if (u64.==(b, 0)) trapDivideByZero();
	else push_u64(r);
}
def I64_REM_S() {
	var b = pop_u64(), a = pop_u64();
	var r = U64_rem_s(a, b);
	if (u64.==(b, 0)) trapDivideByZero();
	else push_u64(r);
}
def I64_REM_U() {
	var b = pop_u64(), a = pop_u64();
	var r = U64_rem_u(a, b);
	if (u64.==(b, 0)) trapDivideByZero();
	else push_u64(r);
}
def I64_AND() {
	var b = pop_u64(), a = pop_u64();
	var r = u64.&(a, b);
	push_u64(r);
}
def I64_OR() {
	var b = pop_u64(), a = pop_u64();
	var r = u64.|(a, b);
	push_u64(r);
}
def I64_XOR() {
	var b = pop_u64(), a = pop_u64();
	var r = u64.^(a, b);
	push_u64(r);
}
def I64_SHL() {
	var b = pop_u64(), a = pop_u64();
	var r = U64_shl(a, b);
	push_u64(r);
}
def I64_SHR_S() {
	var b = pop_u64(), a = pop_u64();
	var r = U64_shr_s(a, b);
	push_u64(r);
}
def I64_SHR_U() {
	var b = pop_u64(), a = pop_u64();
	var r = U64_shr_u(a, b);
	push_u64(r);
}
def I64_ROTL() {
	var b = pop_u64(), a = pop_u64();
	var r = U64_rotl(a, b);
	push_u64(r);
}
def I64_ROTR() {
	var b = pop_u64(), a = pop_u64();
	var r = U64_rotr(a, b);
	push_u64(r);
}
def F32_ABS() {
	var a = pop_f32();
	var r = float.abs(a);
	push_f32(r);
}
def F32_NEG() {
	var a = pop_f32();
	var r = F32_neg(a);
	push_f32(r);
}
def F32_CEIL() {
	var a = pop_f32();
	var r = F32_ceil(a);
	push_f32(r);
}
def F32_FLOOR() {
	var a = pop_f32();
	var r = F32_floor(a);
	push_f32(r);
}
def F32_TRUNC() {
	var a = pop_f32();
	var r = F32_trunc(a);
	push_f32(r);
}
// 0x90
def F32_NEAREST() {
	var a = pop_f32();
	var r = float.round(a);
	push_f32(r);
}
def F32_SQRT() {
	var a = pop_f32();
	var r = float.sqrt(a);
	push_f32(r);
}
def F32_ADD() {
	var b = pop_f32(), a = pop_f32();
	var r = float.+(a, b);
	push_f32(r);
}
def F32_SUB() {
	var b = pop_f32(), a = pop_f32();
	var r = float.-(a, b);
	push_f32(r);
}
def F32_MUL() {
	var b = pop_f32(), a = pop_f32();
	var r = float.*(a, b);
	push_f32(r);
}
def F32_DIV() {
	var b = pop_f32(), a = pop_f32();
	var r = float./(a, b);
	if (float.==(b, 0.0f)) trapDivideByZero();
	else push_f32(r);
}
// missing 0x96 F32_MIN
// missing 0x97 F32_MAX
// missing 0x98 F32_COPYSIGN
def F64_ABS() {
	var a = pop_f64();
	var r = double.abs(a);
	push_f64(r);
}
def F64_NEG() {
	var a = pop_f64();
	var r = F64_neg(a);
	push_f64(r);
}
def F64_CEIL() {
	var a = pop_f64();
	var r = F64_ceil(a);
	push_f64(r);
}
def F64_FLOOR() {
	var a = pop_f64();
	var r = F64_floor(a);
	push_f64(r);
}
def F64_TRUNC() {
	var a = pop_f64();
	var r = F64_trunc(a);
	push_f64(r);
}
def F64_NEAREST() {
	var a = pop_f64();
	var r = double.round(a);
	push_f64(r);
}
def F64_SQRT() {
	var a = pop_f64();
	var r = double.sqrt(a);
	push_f64(r);
}
// 0xA0
def F64_ADD() {
	var b = pop_f64(), a = pop_f64();
	var r = double.+(a, b);
	push_f64(r);
}
def F64_SUB() {
	var b = pop_f64(), a = pop_f64();
	var r = double.-(a, b);
	push_f64(r);
}
def F64_MUL() {
	var b = pop_f64(), a = pop_f64();
	var r = double.*(a, b);
	push_f64(r);
}
def F64_DIV() {
	var b = pop_f64(), a = pop_f64();
	var r = double./(a, b);
	if (double.==(b, 0.0f)) trapDivideByZero();
	else push_f64(r);
}
// missing 0xA4 F64_MIN
// missing 0xA5 F64_MAX
// missing 0xA6 F64_COPYSIGN
def I32_WRAP_I64() {
	var a = pop_u64();
	var r = U32_wrap_u64(a);
	push_u32(r);
}
def I32_TRUNC_F32_S() {
	var a = pop_f32();
	var r = U32_trunc_f32_s(a);
	push_u32(r);
}
def I32_TRUNC_F32_U() {
	var a = pop_f32();
	var r = U32_trunc_f32_u(a);
	push_u32(r);
}
def I32_TRUNC_F64_S() {
	var a = pop_f64();
	var r = U32_trunc_f64_s(a);
	push_u32(r);
}
def I32_TRUNC_F64_U() {
	var a = pop_f64();
	var r = U32_trunc_f64_u(a);
	push_u32(r);
}
def I64_EXTEND_I32_S() {
	var a = pop_u32();
	var r = U64_extend_i32_s(a);
	push_u64(r);
}
def I64_EXTEND_I32_U() {
	var a = pop_u32();
	var r = U64_extend_i32_u(a);
	push_u64(r);
}
def I64_TRUNC_F32_S() {
	var a = pop_f32();
	var r = U64_trunc_f32_s(a);
	push_u64(r);
}
def I64_TRUNC_F32_U() {
	var a = pop_f32();
	var r = U64_trunc_f32_u(a);
	push_u64(r);
}
// 0xB0
def I64_TRUNC_F64_S() {
	var a = pop_f64();
	var r = U64_trunc_f64_s(a);
	push_u64(r);
}
def I64_TRUNC_F64_U() {
	var a = pop_f64();
	var r = U64_trunc_f64_u(a);
	push_u64(r);
}
def F32_CONVERT_I32_S() {
	var b = pop_u32();
	var r = F32_convert_i32_s(b);
	push_f32(r);
}
def F32_CONVERT_I32_U() {
	var b = pop_u32();
	var r = F32_convert_i32_u(b);
	push_f32(r);
}
def F32_CONVERT_I64_S() {
	var b = pop_u64();
	var r = F32_convert_i64_s(b);
	push_f32(r);
}
def F32_CONVERT_I64_U() {
	var b = pop_u64();
	var r = F32_convert_i64_u(b);
	push_f32(r);
}
// missing 0xB6 F32_DEMOTE_F64
def F64_CONVERT_I32_S() {
	var b = pop_u32();
	var r = F64_convert_i32_s(b);
	push_f64(r);
}
def F64_CONVERT_I32_U() {
	var b = pop_u32();
	var r = F64_convert_i32_u(b);
	push_f64(r);
}
def F64_CONVERT_I64_S() {
	var b = pop_u64();
	var r = F64_convert_i64_s(b);
	push_f64(r);
}
def F64_CONVERT_I64_U() {
	var b = pop_u64();
	var r = F64_convert_i64_u(b);
	push_f64(r);
}
// missing 0xBB F64_PROMOTE_F32
def I32_REINTERPRET_F32() {
	var a = pop_f32();
	var r = u32_reinterpret_f32(a);
	push_u32(r);
}
def I64_REINTERPRET_F64() {
	var a = pop_f64();
	var r = u64_reinterpret_f64(a);
	push_u64(r);
}
def F32_REINTERPRET_I32() {
	var a = pop_u32();
	var r = f32_reinterpret_u32(a);
	push_f32(r);
}
def F64_REINTERPRET_I64() {
	var a = pop_u64();
	var r = f64_reinterpret_u64(a);
	push_f64(r);
}
// 0xC0
def I32_EXTEND8_S() {
	var a = pop_u32();
	var r = U32_extend8_s(a);
	push_u32(r);
}
def I32_EXTEND16_S() {
	var a = pop_u32();
	var r = U32_extend16_s(a);
	push_u32(r);
}
def I64_EXTEND8_S() {
	var a = pop_u64();
	var r = U64_extend8_s(a);
	push_u64(r);
}
def I64_EXTEND16_S() {
	var a = pop_u64();
	var r = U64_extend16_s(a);
	push_u64(r);
}
def I64_EXTEND32_S() {
	var a = pop_u64();
	var r = U64_extend32_s(a);
	push_u64(r);
}
// 0xD0
def REF_NULL() {
	def idx = imm_readULEB32();
	push_Object(object_Null());
}
def REF_IS_NULL() {
	var obj = pop_Object();
	if (object_isNull(obj)) {
		push_u32(1);
	} else {
		push_u32(0);
	}
}
// missing 0xD2 REF_FUNC
// missing 0xD3 REF_EQ
def REF_AS_NON_NULL() {
	var obj = pop_Object();
	if (object_isNull(obj)) {
		trapNull();
	}
	push_Object(obj); // XXX: wonder if we can optimize out pop->test->push in CBD
}
// missing 0xD5 BR_ON_NULL
// missing 0xD6 BR_ON_NON_NULL
// multi-byte opcodes
def STRUCT_NEW() {
	var struct_idx = imm_readULEB32();
	def sig = m_getSignature(struct_idx);
	def obj = object_New(sig);
	push_Object(obj);
}
def STRUCT_GET() {
	var struct_index = imm_readULEB32();
	var field_index = imm_readULEB32();
	var kind #sidetable = m_getFieldKind(struct_index, field_index);
	var offset #sidetable = m_getFieldOffset(struct_index, field_index);
	var obj = pop_Object();
	if (object_isNull(obj)) return trapNull();
	match (kind) {
		U32 => push_u32(mach_readStructField_u32(obj, offset));
		U64 => push_u64(mach_readStructField_u64(obj, offset));
		F32 => push_f32(mach_readStructField_f32(obj, offset));
		F64 => push_f64(mach_readStructField_f64(obj, offset));
		V128 => push_v128(mach_readStructField_v128(obj, offset));
		REF => push_Object(mach_readStructField_Object(obj, offset));
		_ => return invalid();
	}
}
def STRUCT_GET_S() {
	var struct_index = imm_readULEB32();
	var field_index = imm_readULEB32();
	var kind #sidetable = m_getFieldKind(struct_index, field_index);
	var offset #sidetable = m_getFieldOffset(struct_index, field_index);
	var obj = pop_Object();
	if (object_isNull(obj)) return trapNull();
	// TODO: sign extend
	match (kind) {
		U8 => push_u32(u32.view(mach_readStructField_u8(obj, offset)));
		U16 => push_u32(u32.view(mach_readStructField_u16(obj, offset)));
		_ => return invalid();
	}
}
def STRUCT_GET_U() {
	var struct_index = imm_readULEB32();
	var field_index = imm_readULEB32();
	var kind #sidetable = m_getFieldKind(struct_index, field_index);
	var offset #sidetable = m_getFieldOffset(struct_index, field_index);
	var obj = pop_Object();
	if (object_isNull(obj)) return trapNull();
	// TODO: zero extend
	match (kind) {
		U8 => push_u32(u32.view(mach_readStructField_u8(obj, offset)));
		U16 => push_u32(u32.view(mach_readStructField_u16(obj, offset)));
		_ => return invalid();
	}
}
//@bytecode end
//===================================================================================================

/*
@macro LOAD<T> `
	var flags = imm_readU8();
	var memindex: i32 = 0u;
	if (u8.!=(u8.&(flags, 0x40u8), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) { // #sidetable
		var offset = imm_readULEB64();
		var index = pop_ ## T();
		var val = mach_readMemory64_ ## T(memindex, index, offset);
		push_ ## T(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_ ## T();
		var val = mach_readMemory32_ ## T(memindex, index, offset);
		push_ ## T(val);
	}
`
def I64_LOAD() @LOAD<i64>
*/
