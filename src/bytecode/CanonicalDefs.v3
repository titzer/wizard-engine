// Constants
def HAS_MEM_INDEX = 0x40u8;

// Types.
type v128(low: u64, high: u64);
type Label;
type Value;
class Object { }
type TypeVar;
type FieldOffset;
type BlockType;
class Signature { }
class Function { }

enum FieldKind {
	U8, U16, I32, I64, F32, F64, V128, REF
}

// Immediates.
def imm_readULEB32() -> u32;
def imm_readILEB32() -> i32;
def imm_readULEB64() -> u64;
def imm_readILEB64() -> i64;
def imm_readU8() -> u8;
def imm_readBlockType() -> BlockType;

// Value stack.
def pop_i32() -> i32;
def pop_u32() -> u32;
def pop_i64() -> i64;
def pop_u64() -> u64;
def pop_f32() -> float;
def pop_f64() -> double;
def pop_v128() -> v128;
def pop_Object() -> Object;
def pop_Value(tv: TypeVar) -> Value;

def push_i32(v: i32);
def push_u32(v: u32);
def push_i64(v: i64);
def push_u64(v: u64);
def push_f32(v: float);
def push_f64(v: double);
def push_v128(v: v128);
def push_Object(v: Object);
def push_Value(tv: TypeVar, v: Value);

// Local variables.
def getLocal(tv: TypeVar, index: u32) -> Value;
def setLocal(tv: TypeVar, index: u32, v: Value);

// Global variables.
def getGlobal(tv: TypeVar, index: u32) -> Value;
def setGlobal(tv: TypeVar, index: u32, v: Value);

// Function context.
def f_getLabel(depth: u32) -> Label;
def f_getLocalType(index: u32) -> TypeVar;
def f_getTopOfStackType() -> TypeVar;
def f_isAtEnd() -> bool;

// Module context.
def m_getGlobalType(index: u32) -> TypeVar;
def m_getFieldKind(struct_index: u32, field_index: u32) -> FieldKind;
def m_getFieldOffset(struct_index: u32, field_index: u32) -> FieldOffset;
def m_isMemory64(memory_index: u32) -> bool;
def m_isTable64(memory_index: u32) -> bool;
def m_getFuncSignature(func_index: u32) -> Signature;
def m_getSignature(sig_index: u32) -> Signature;

// Instance context.
def i_getTableFunction64(table_index: u32, sig: Signature, func_index: u64) -> Function;
def i_getTableFunction32(table_index: u32, sig: Signature, func_index: u32) -> Function;
def i_getFunction(func_index: u32) -> Function;

// Machine intrinsics.
def mach_readStructField_i8(obj: Object, offset: FieldOffset) -> i8;
def mach_readStructField_u8(obj: Object, offset: FieldOffset) -> u8;
def mach_readStructField_i16(obj: Object, offset: FieldOffset) -> i16;
def mach_readStructField_u16(obj: Object, offset: FieldOffset) -> u16;
def mach_readStructField_u32(obj: Object, offset: FieldOffset) -> u32;
def mach_readStructField_u64(obj: Object, offset: FieldOffset) -> u64;
def mach_readStructField_f32(obj: Object, offset: FieldOffset) -> float;
def mach_readStructField_f64(obj: Object, offset: FieldOffset) -> double;
def mach_readStructField_v128(obj: Object, offset: FieldOffset) -> v128;
def mach_readStructField_Object(obj: Object, offset: FieldOffset) -> Object;

def mach_readMemory64_u32(memory_index: u32, index: u64, offset: u64) -> u32;
def mach_readMemory32_u32(memory_index: u32, index: u32, offset: u32) -> u32;

def mach_readTable64(table_index: u32, index: u64) -> Object;
def mach_readTable32(table_index: u32, index: u32) -> Object;

def mach_writeTable64(table_index: u32, index: u64, val: Object);
def mach_writeTable32(table_index: u32, index: u32, val: Object);

// Traps.
def invalid(); // should never occur
def trapNull();
def trapUnreachable();
def trapDivideByZero();
def trapDivideUnrepresentable();

// Control flow and calls.
def doReturn();
def doFallthru();
def doBlock(bt: BlockType) -> Label;
def doLoop(bt: BlockType) -> Label;
def doIf(bt: BlockType) -> Label;
def doTry(bt: BlockType);
def doEnd();
def doCall(sig: Signature, target: Function);
def doBranch(label: Label);


//===================================================================================================
//@bytecode start
def UNREACHABLE() {
	trapUnreachable();
}
def NOP() { 
    return void; // needed for CBD parser
}
def LOCAL_GET() {
	var index = imm_readULEB32();
	var tv = f_getLocalType(index);
	var val = getLocal(tv, index);
	push_Value(tv, val);
}
def LOCAL_SET() {
	var index = imm_readULEB32();
	var tv = f_getLocalType(index);
	var val = pop_Value(tv);
	setLocal(tv, index, val);
}
def LOCAL_TEE() {
	var index = imm_readULEB32();
	var tv = f_getLocalType(index);
	var val = pop_Value(tv);
	setLocal(tv, index, val);
	push_Value(tv, val);
}
def GLOBAL_GET() {
	var index = imm_readULEB32();
	var tv = m_getGlobalType(index);
	var val = getGlobal(tv, index);
	push_Value(tv, val);
}
def GLOBAL_SET() {
	var index = imm_readULEB32();
	var tv = m_getGlobalType(index);
	var val = pop_Value(tv);
	setGlobal(tv, index, val);
}
def TABLE_GET() {
	var table_index = imm_readULEB32();
	if (m_isTable64(table_index)) {
		var index = pop_u64();
		var val = mach_readTable64(table_index, index);
		push_Object(val);
	} else {
		var index = pop_u32();
		var val = mach_readTable32(table_index, index);
		push_Object(val);
	}
}
def TABLE_SET() {
	var table_index = imm_readULEB32();
	if (m_isTable64(table_index)) {
		var val = pop_Object();
		var index = pop_u64();
		mach_writeTable64(table_index, index, val);
	} else {
		var val = pop_Object();
		var index = pop_u32();
		mach_writeTable32(table_index, index, val);
	}
}
def CALL() {
	var index = imm_readULEB32();
	var sig = m_getFuncSignature(index);
	var target = i_getFunction(index); // null implies no signature check
	doCall(sig, target);
}
def CALL_INDIRECT() {
	var sig_index = imm_readULEB32();
	var table_index = imm_readULEB32();
	var sig = m_getSignature(sig_index);
	var is64 #sidetable = m_isTable64(table_index);
	if (is64) {
		var func_index = pop_u64();
		var target = i_getTableFunction64(table_index, sig, func_index);
		doCall(sig, target);
	} else {
		var func_index = pop_u32();
		var target = i_getTableFunction32(table_index, sig, func_index);
		doCall(sig, target);
	}
}
def DROP() {
	var tv = f_getTopOfStackType();
	pop_Value(tv);
}
def SELECT() {
	var c = pop_u32();
	var tv = f_getTopOfStackType();
	var b = pop_Value(tv), a = pop_Value(tv);
	if (u32.!=(c, 0u)) push_Value(tv, a);
	else push_Value(tv, b);
}
def I32_CONST() {
	var x = imm_readILEB32();
	push_i32(x);
}
def I32_ADD() {
	var b = pop_u32(), a = pop_u32();
	var r = u32.+(a, b);
	push_u32(r);
}
def I32_SUB() {
	var b = pop_u32(), a = pop_u32();
	var r = u32.-(a, b);
	push_u32(r);
}
def I32_MUL() {
	var b = pop_u32(), a = pop_u32();
	var r = u32.*(a, b);
	push_u32(r);
}
def I32_DIV_S() {
	var b = pop_i32(), a = pop_i32();
	if (i32.==(b, 0)) return trapDivideByZero();
	if (bool.&&(i32.==(b, -1), i32.==(a, -2_147_483_648))) return trapDivideUnrepresentable();
	var r = i32./(a, b);
	push_i32(r);
}
def I32_DIV_U() {
	var b = pop_u32(), a = pop_u32();
	if (u32.==(b, 0u)) return trapDivideByZero();
	var r = u32./(a, b);
	push_u32(r);
}
def I32_EQZ() {
	var a = pop_u32();
	if (u32.==(a, 0)) push_u32(1);
	else push_u32(0);
}
def I32_EQ() {
	var b = pop_u32(), a = pop_u32();
	if (u32.==(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_NE() {
	var b = pop_u32(), a = pop_u32();
	if (u32.!=(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_LT_U() {
	var b = pop_u32(), a = pop_u32();
	if (u32.<(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_LE_S() {
	var b = pop_u32(), a = pop_u32();
	if (u32.<=(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_GT_U() {
	var b = pop_u32(), a = pop_u32();
	if (u32.>(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_AND() {
	var b = pop_u32(), a = pop_u32();
	var r = u32.&(a, b);
	push_u32(r);
}
def BR() {
	var depth = imm_readULEB32();
	var label #sidetable = f_getLabel(depth);
	return doBranch(label);
}
def BR_IF() {
	var depth = imm_readULEB32();
	var label #sidetable = f_getLabel(depth);
	var cond = pop_u32();
	if (u32.!=(cond, 0)) return doBranch(label);
	doFallthru();
}
def BLOCK() {
	var bt = imm_readBlockType();
	doBlock(bt);
}
def LOOP() {
	var bt = imm_readBlockType();
	doLoop(bt);
}
def TRY() {
	var bt = imm_readBlockType();
	doTry(bt);
}
def IF() {
	var bt = imm_readBlockType();
	var cond = pop_i32();
	var label = doIf(bt);
	if (i32.==(cond, 0)) return doBranch(label);
	else return doFallthru();
}
def ELSE() {
	var label = f_getLabel(0);
	return doBranch(label);
}
def END() {
	doEnd();
	if (f_isAtEnd()) return doReturn();
}
def RETURN() {
	return doReturn();
}
def STRUCT_GET() {
	var struct_index = imm_readULEB32();
	var field_index = imm_readULEB32();
	var kind #sidetable = m_getFieldKind(struct_index, field_index);
	var offset #sidetable = m_getFieldOffset(struct_index, field_index);
	var obj = pop_Object();
	if (obj == null) return trapNull();
	match (kind) {
		I32 => push_u32(mach_readStructField_u32(obj, offset));
		I64 => push_u64(mach_readStructField_u64(obj, offset));
		F32 => push_f32(mach_readStructField_f32(obj, offset));
		F64 => push_f64(mach_readStructField_f64(obj, offset));
		V128 => push_v128(mach_readStructField_v128(obj, offset));
		REF => push_Object(mach_readStructField_Object(obj, offset));
		_ => return invalid();
	}
}
def STRUCT_GET_S() {
	var struct_index = imm_readULEB32();
	var field_index = imm_readULEB32();
	var kind #sidetable = m_getFieldKind(struct_index, field_index);
	var offset #sidetable = m_getFieldOffset(struct_index, field_index);
	var obj = pop_Object();
	if (obj == null) return trapNull();
	match (kind) {
		U8 => push_u32(u32.view(mach_readStructField_i8(obj, offset)));
		U16 => push_u32(u32.view(mach_readStructField_i16(obj, offset)));
		_ => return invalid();
	}
}
def STRUCT_GET_U() {
	var struct_index = imm_readULEB32();
	var field_index = imm_readULEB32();
	var kind #sidetable = m_getFieldKind(struct_index, field_index);
	var offset #sidetable = m_getFieldOffset(struct_index, field_index);
	var obj = pop_Object();
	if (obj == null) return trapNull();
	match (kind) {
		U8 => push_u32(u32.view(mach_readStructField_u8(obj, offset)));
		U16 => push_u32(u32.view(mach_readStructField_u16(obj, offset)));
		_ => return invalid();
	}
}
def I32_LOAD() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.&(flags, HAS_MEM_INDEX) == 0) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u32(memindex, index, offset);
		push_u32(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_u32(memindex, index, offset);
		push_u32(val);
	}
}
//@bytecode end
//===================================================================================================

/*
@macro LOAD<T> `
	var flags = imm_readU8();
	var memindex: u32 = 0;
	if (u8.!=(u8.&(flags, HAS_MEM_INDEX), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) { // #sidetable
		var offset = imm_readULEB64();
		var index = pop_ ## T();
		var val = mach_readMemory64_ ## T(memindex, index, offset);
		push_ ## T(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_ ## T();
		var val = mach_readMemory32_ ## T(memindex, index, offset);
		push_ ## T(val);
	}
`
def I64_LOAD() @LOAD<u64>
*/
