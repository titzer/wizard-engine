// Immediates.
def imm_readULEB32() -> u32.V : read;
def imm_readILEB32() -> i32.V : read;
def imm_readULEB64() -> u64.V : read;
def imm_readILEB64() -> i64.V : read;
def imm_readU8() -> u8.V : read;
def imm_readBlockType() -> BlockType.V : read;

// Value stack.
def pop_i32() -> i32.I : pop;
def pop_u32() -> u32.I : pop;
def pop_i64() -> i64.I : pop;
def pop_u64() -> u64.I : pop;
def pop_f32() -> float.I : pop;
def pop_f64() -> double.I : pop;
def pop_v128() -> v128.I : pop;
def pop_Object() -> Object.I : pop;
def pop_Value(tv: TypeVar.V) -> Value.I : pop;

def push_i32(v: i32.I) : push;
def push_u32(v: u32.I) : push;
def push_i64(v: i64.I) : push;
def push_u64(v: u64.I) : push;
def push_f32(v: float.I) : push;
def push_f64(v: double.I) : push;
def push_v128(v: v128.I) : push;
def push_Object(v: Object.I) : push;
def push_Value(tv: TypeVar.V, v: Value.I) : push;

// Local variables.
def getLocal(tv: TypeVar.V, index: u32.V) -> Value.I : push;
def setLocal(tv: TypeVar.V, index: u32.V, v: Value.I) : local;

// Global variables.
def getGlobal(tv: TypeVar.V, index: u32.V) -> Value.I : push;
def setGlobal(tv: TypeVar.V, index: u32.V, v: Value.I) : global;

// Function context.
def f_getLabel(depth: u32.V) -> Label.V;
def f_getLocalType(index: u32.V) -> TypeVar.V;
def f_getTopOfStackType() -> TypeVar.V;
def f_isAtEnd() -> bool.V;

// Module context.
def m_getGlobalType(index: u32.V) -> TypeVar.V;
def m_getFieldKind(struct_index: u32.V, field_index: u32.V) -> FieldKind.V;
def m_getFieldOffset(struct_index: u32.V, field_index: u32.V) -> FieldOffset.V;
def m_isMemory64(memory_index: u32.V) -> bool.V;
def m_isTable64(memory_index: u32.V) -> bool.V;
def m_getFuncSignature(func_index: u32.V) -> Signature.V;
def m_getSignature(sig_index: u32.V) -> Signature.V;

// Instance context.
def i_getTableFunction64(table_index: u32.V, sig: Signature.V, func_index: u64.V) -> Function.V;
def i_getTableFunction32(table_index: u32.V, sig: Signature.V, func_index: u32.V) -> Function.V;
def i_getFunction(func_index: u32.V) -> Function.V;

// Machine intrinsics.
def mach_readStructField_i8(obj: Object.V, offset: FieldOffset.V) -> i8.I;
def mach_readStructField_u8(obj: Object.V, offset: FieldOffset.V) -> u8.I;
def mach_readStructField_i16(obj: Object.V, offset: FieldOffset.V) -> i16.I;
def mach_readStructField_u16(obj: Object.V, offset: FieldOffset.V) -> u16.I;
def mach_readStructField_u32(obj: Object.V, offset: FieldOffset.V) -> u32.I;
def mach_readStructField_u64(obj: Object.V, offset: FieldOffset.V) -> u64.I;
def mach_readStructField_f32(obj: Object.V, offset: FieldOffset.V) -> float.I;
def mach_readStructField_f64(obj: Object.V, offset: FieldOffset.V) -> double.I;
def mach_readStructField_v128(obj: Object.V, offset: FieldOffset.V) -> v128.I;
def mach_readStructField_Object(obj: Object.V, offset: FieldOffset.V) -> Object.I;

def mach_readMemory64_u32(memory_index: u32.V, index: u64.I, offset: u64.V) -> u32.I;
def mach_readMemory32_u32(memory_index: u32.V, index: u32.I, offset: u32.V) -> u32.I;

def mach_readTable64(table_index: u32.V, index: u64.V) -> Object.I;
def mach_readTable32(table_index: u32.V, index: u32.V) -> Object.I;

def mach_writeTable64(table_index: u32.V, index: u64.V, val: Object.I);
def mach_writeTable32(table_index: u32.V, index: u32.V, val: Object.I);

// Traps.
def invalid() : trap;
def trapNull() : trap;
def trapUnreachable() : trap;
def trapDivideByZero() : trap;
def trapDivideUnrepresentable() : trap;

// Control flow and calls.
def doReturn() : ctl;
def doFallthru() : ctl;
def doBlock(bt: BlockType.V) : ctl;
def doLoop(bt: BlockType.V) : ctl;
def doTry(bt: BlockType.V) : ctl;
def doEnd() : ctl;
def doCall(sig: Signature.V, target: Function.V) : ctl;
def doBranch(label: Label.V) : ctl;

def i32.==(lhs: i32.V, rhs: i32.V) -> i32.V;
def i32./(lhs: i32.V, rhs: i32.V) -> i32.V;
def i32.&(lhs: i32.V, rhs: i32.V) -> i32.V;
def u32.==(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.!=(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.+(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.-(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32./(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.<(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.<=(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.>(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.*(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.&(lhs: u32.V, rhs: u32.V) -> u32.V;
