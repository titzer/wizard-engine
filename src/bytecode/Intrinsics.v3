// Immediates.
def imm_readILEB32() -> u32.V : read;
def imm_readILEB64() -> u64.V : read;
def imm_readULEB32() -> u32.V : read;
def imm_readULEB64() -> u64.V : read;
def imm_readU8() -> u8.V : read;
def imm_readBlockType() -> BlockType.V : read;
def imm_readLabels() -> Labels.V : read;

// Value stack.
def pop_u32() -> u32.I : pop;
def pop_u64() -> u64.I : pop;
def pop_u64() -> u64.I : pop;
def pop_f32() -> f32.I : pop;
def pop_f64() -> f64.I : pop;
def pop_v128() -> v128.I : pop;
def pop_Object() -> Object.I : pop;
def pop_Value(tv: TypeVar.V) -> Value.I : pop;

def push_u32(v: u32.I) : push;
def push_u64(v: u64.I) : push;
def push_u64(v: u64.I) : push;
def push_f32(v: f32.I) : push;
def push_f64(v: f64.I) : push;
def push_v128(v: v128.I) : push;
def push_Object(v: Object.I) : push;
def push_Value(tv: TypeVar.V, v: Value.I) : push;

// Local variables.
def getLocal(tv: TypeVar.V, index: u32.V) -> Value.I : push;
def setLocal(tv: TypeVar.V, index: u32.V, v: Value.I) : local;

// Global variables.
def getGlobal(tv: TypeVar.V, index: u32.V) -> Value.I : push;
def setGlobal(tv: TypeVar.V, index: u32.V, v: Value.I) : global;

// Function context.
def f_getLabel(depth: u32.V) -> Label.V;
def f_getLocalType(index: u32.V) -> TypeVar.V;
def f_getTopOfStackType() -> TypeVar.V;
def f_isAtEnd() -> bool.V;

// Module context.
def m_getGlobalType(index: u32.V) -> TypeVar.V;
def m_getFieldKind(struct_index: u32.V, field_index: u32.V) -> FieldKind.V;
def m_getFieldOffset(struct_index: u32.V, field_index: u32.V) -> FieldOffset.V;
def m_isMemory64(memory_index: u32.V) -> bool.V;
def m_isTable64(memory_index: u32.V) -> bool.V;
def m_getFuncSignature(func_index: u32.V) -> Signature.V;
def m_getSignature(sig_index: u32.V) -> Signature.V;

// Instance context.
def i_getTableFunction64(table_index: u32.V, sig: Signature.V, func_index: u64.V) -> Function.V;
def i_getTableFunction32(table_index: u32.V, sig: Signature.V, func_index: u32.V) -> Function.V;
def i_getFunction(func_index: u32.V) -> Function.V;

// Machine intrinsics.
def mach_readStructField_u8(obj: Object.V, offset: FieldOffset.V) -> u8.I;
def mach_readStructField_u16(obj: Object.V, offset: FieldOffset.V) -> u16.I;
def mach_readStructField_u32(obj: Object.V, offset: FieldOffset.V) -> u32.I;
def mach_readStructField_u64(obj: Object.V, offset: FieldOffset.V) -> u64.I;
def mach_readStructField_f32(obj: Object.V, offset: FieldOffset.V) -> f32.I;
def mach_readStructField_f64(obj: Object.V, offset: FieldOffset.V) -> double.I;
def mach_readStructField_v128(obj: Object.V, offset: FieldOffset.V) -> v128.I;
def mach_readStructField_Object(obj: Object.V, offset: FieldOffset.V) -> Object.I;

def mach_readMemory64_u8(memory_index: u32.V, index: u64.I, offset: u64.V) -> u32.I;
def mach_readMemory32_u8(memory_index: u32.V, index: u32.I, offset: u32.V) -> u32.I;
def mach_readMemory64_u16(memory_index: u32.V, index: u64.I, offset: u64.V) -> u32.I;
def mach_readMemory32_u16(memory_index: u32.V, index: u32.I, offset: u32.V) -> u32.I;
def mach_readMemory64_u32(memory_index: u32.V, index: u64.I, offset: u64.V) -> u32.I;
def mach_readMemory32_u32(memory_index: u32.V, index: u32.I, offset: u32.V) -> u32.I;
def mach_readMemory64_u8_64(memory_index: u32.V, index: u64.I, offset: u64.V) -> u64.I;
def mach_readMemory32_u8_64(memory_index: u32.V, index: u32.I, offset: u32.V) -> u64.I;
def mach_readMemory64_u16_64(memory_index: u32.V, index: u64.I, offset: u64.V) -> u64.I;
def mach_readMemory32_u16_64(memory_index: u32.V, index: u32.I, offset: u32.V) -> u64.I;
def mach_readMemory64_u32_64(memory_index: u32.V, index: u64.I, offset: u64.V) -> u64.I;
def mach_readMemory32_u32_64(memory_index: u32.V, index: u32.I, offset: u32.V) -> u64.I;
def mach_readMemory64_u64(memory_index: u32.V, index: u64.I, offset: u64.V) -> u64.I;
def mach_readMemory32_u64(memory_index: u32.V, index: u32.I, offset: u32.V) -> u64.I;

def mach_writeMemory64_u8(memory_index: u32.V, index: u64.I, offset: u64.V, val: u32.I) : memory;
def mach_writeMemory32_u8(memory_index: u32.V, index: u32.I, offset: u32.V, val: u32.I) : memory;
def mach_writeMemory64_u16(memory_index: u32.V, index: u64.I, offset: u64.V, val: u32.I) : memory;
def mach_writeMemory32_u16(memory_index: u32.V, index: u32.I, offset: u32.V, val: u32.I) : memory;
def mach_writeMemory64_u32(memory_index: u32.V, index: u64.I, offset: u64.V, val: u32.I) : memory;
def mach_writeMemory32_u32(memory_index: u32.V, index: u32.I, offset: u32.V, val: u32.I) : memory;
def mach_writeMemory64_u8_64(memory_index: u32.V, index: u64.I, offset: u64.V, val: u64.I) : memory;
def mach_writeMemory32_u8_64(memory_index: u32.V, index: u32.I, offset: u32.V, val: u64.I) : memory;
def mach_writeMemory64_u16_64(memory_index: u32.V, index: u64.I, offset: u64.V, val: u64.I) : memory;
def mach_writeMemory32_u16_64(memory_index: u32.V, index: u32.I, offset: u32.V, val: u64.I) : memory;
def mach_writeMemory64_u32_64(memory_index: u32.V, index: u64.I, offset: u64.V, val: u64.I) : memory;
def mach_writeMemory32_u32_64(memory_index: u32.V, index: u32.I, offset: u32.V, val: u64.I) : memory;
def mach_writeMemory64_u64(memory_index: u32.V, index: u64.I, offset: u64.V, val: u64.I) : memory;
def mach_writeMemory32_u64(memory_index: u32.V, index: u32.I, offset: u32.V, val: u64.I) : memory;
def mach_writeMemory64_f64(memory_index: u32.V, index: u64.I, offset: u64.V, val: f64.I) : memory;
def mach_writeMemory32_f64(memory_index: u32.V, index: u32.I, offset: u32.V, val: f64.I) : memory;

def mach_memorySize32(memory_index: u32.V) -> u32.I;
def mach_memoryGrow32(memory_index: u32.V, size: u32.I) -> u32.I;
def mach_memorySize64(memory_index: u32.V) -> u64.I;
def mach_memoryGrow64(memory_index: u32.V, size: u64.I) -> u64.I;

def mach_readTable64(table_index: u32.V, index: u64.V) -> Object.I;
def mach_readTable32(table_index: u32.V, index: u32.V) -> Object.I;

def mach_writeTable64(table_index: u32.V, index: u64.V, val: Object.I) : table;
def mach_writeTable32(table_index: u32.V, index: u32.V, val: Object.I) : table;

// Traps.
def invalid() : trap;
def trapNull() : trap;
def trapUnreachable() : trap;
def trapDivideByZero() : trap;
def trapDivideUnrepresentable() : trap;
def trapTableOOB() : trap;

// Control flow and calls.
def doReturn() : ctl;
def doFallthru() : ctl;
def doBlock(bt: BlockType.V) : ctl;
def doLoop(bt: BlockType.V) : ctl;
def doTry(bt: BlockType.V) : ctl;
def doIf(bt: BlockType.V) : ctl;
def doElse() : ctl;
def doEnd() : ctl;
def doCall(sig: Signature.V, target: Function.V) : ctl;
def doReturnCall(sig: Signature.V, target: Function.V) : ctl;
def doBranch(label: Label.V) : ctl;
def doSwitch(labels: Labels.V, key: u32.I) : ctl;

def u8.&(lhs: u8.V, rhs: u8.V) -> u8.V;
def u8.==(lhs: u8.V, rhs: u8.V) -> u8.V;
def u8.!=(lhs: u8.V, rhs: u8.V) -> u8.V;

def u32.==(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.!=(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.+(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.-(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32./(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.*(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.&(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.<(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.<=(lhs: u32.V, rhs: u32.V) -> u32.V;
def u32.>(lhs: u32.V, rhs: u32.V) -> u32.V;
def U32_lt_s(lhs: u32.V, rhs: u32.V) -> u32.V;
def U32_le_s(lhs: u32.V, rhs: u32.V) -> u32.V;
def U32_div_s(lhs: u32.V, rhs: u32.V) -> u32.V;

def float.+(lhs: f32.V, rhs: f32.V) -> f32.V;
def float.-(lhs: f32.V, rhs: f32.V) -> f32.V;
def float./(lhs: f32.V, rhs: f32.V) -> f32.V;
def float.*(lhs: f32.V, rhs: f32.V) -> f32.V;
def float.==(lhs: f32.V, rhs: f32.V) -> u32.V;
def float.!=(lhs: f32.V, rhs: f32.V) -> u32.V;
def float.<(lhs: f32.V, rhs: f32.V) -> u32.V;
def float.<=(lhs: f32.V, rhs: f32.V) -> u32.V;
def float.>(lhs: f32.V, rhs: f32.V) -> u32.V;
def float.sqrt(x: f32.V) -> f32.V;

def U8_and(lhs: u32.I, rhs: u32.I) -> u32.I;

def U32_equals(lhs: u32.I, rhs: u32.I) -> u32.I;
def U32_not_equals(lhs: u32.I, rhs: u32.I) -> u32.I;
def U32_plus(lhs: u32.I, rhs: u32.I) -> u32.I;
def U32_minus(lhs: u32.I, rhs: u32.I) -> u32.I;
def U32_div(lhs: u32.I, rhs: u32.I) -> u32.I;
def U32_lt(lhs: u32.I, rhs: u32.I) -> u32.I;
def U32_lte(lhs: u32.I, rhs: u32.I) -> u32.I;
def U32_gt(lhs: u32.I, rhs: u32.I) -> u32.I;
def U32_ge(lhs: u32.I, rhs: u32.I) -> u32.I;
def U32_gt_s(lhs: u32.I, rhs: u32.I) -> u32.I;
def U32_ge_s(lhs: u32.I, rhs: u32.I) -> u32.I;
def U32_times(lhs: u32.I, rhs: u32.I) -> u32.I;
def U32_and(lhs: u32.I, rhs: u32.I) -> u32.I;

def U64_equals(lhs: u64.I, rhs: u64.I) -> u64.I;
def U64_not_equals(lhs: u64.I, rhs: u64.I) -> u64.I;
def U64_plus(lhs: u64.I, rhs: u64.I) -> u64.I;
def U64_minus(lhs: u64.I, rhs: u64.I) -> u64.I;
def U64_div(lhs: u64.I, rhs: u64.I) -> u64.I;
def U64_lt(lhs: u64.I, rhs: u64.I) -> u64.I;
def U64_lte(lhs: u64.I, rhs: u64.I) -> u64.I;
def U64_gt(lhs: u64.I, rhs: u64.I) -> u64.I;
def U64_ge(lhs: u64.I, rhs: u64.I) -> u64.I;
def U64_gt_s(lhs: u64.I, rhs: u64.I) -> u64.I;
def U64_ge_s(lhs: u64.I, rhs: u64.I) -> u64.I;
def U64_times(lhs: u64.I, rhs: u64.I) -> u64.I;
def U64_and(lhs: u64.I, rhs: u64.I) -> u64.I;

def F32_equals(lhs: f32.I, rhs: f32.I) -> u32.I;
def F32_not_equals(lhs: f32.I, rhs: f32.I) -> u32.I;
def F32_lt(lhs: f32.I, rhs: f32.I) -> u32.I;
def F32_lte(lhs: f32.I, rhs: f32.I) -> u32.I;
def F32_gt(lhs: f32.I, rhs: f32.I) -> u32.I;
def F32_gte(lhs: f32.I, rhs: f32.I) -> u32.I;
def F32_plus(lhs: f32.I, rhs: f32.I) -> f32.I;
def F32_minus(lhs: f32.I, rhs: f32.I) -> f32.I;
def F32_div(lhs: f32.I, rhs: f32.I) -> f32.I;
def F32_times(lhs: f32.I, rhs: f32.I) -> f32.I;
def F32_neg(x: f32.I) -> f32.I;
def F32_ceil(x: f32.I) -> f32.I;
def F32_floor(x: f32.I) -> f32.I;
def F32_trunc(x: f32.I) -> f32.I;

def F64_equals(lhs: f64.I, rhs: f64.I) -> u32.I;
def F64_not_equals(lhs: f64.I, rhs: f64.I) -> u32.I;
def F64_lt(lhs: f64.I, rhs: f64.I) -> u32.I;
def F64_lte(lhs: f64.I, rhs: f64.I) -> u32.I;
def F64_gt(lhs: f64.I, rhs: f64.I) -> u32.I;
def F64_gte(lhs: f64.I, rhs: f64.I) -> u32.I;
def F64_plus(lhs: f64.I, rhs: f64.I) -> f64.I;
def F64_minus(lhs: f64.I, rhs: f64.I) -> f64.I;
def F64_times(lhs: f64.I, rhs: f64.I) -> f64.I;
def F64_div(lhs: f64.I, rhs: f64.I) -> f64.I;
def F64_neg(x: f64.I) -> f64.I;
def F64_ceil(x: f64.I) -> f64.I;
def F64_floor(x: f64.I) -> f64.I;
def F64_trunc(x: f64.I) -> f64.I;

def f32_reinterpret_u32(i: u32.I) -> f32.I;
def f64_reinterpret_u64(i: u64.I) -> f64.I;
def U32_wrap_u64(i: u64.I) -> u64.I;

def F32_convert_i32_s(v: u32.I) -> float.I;
def F32_convert_i32_u(v: u32.I) -> float.I;
def F32_convert_i64_s(v: u64.I) -> float.I;
def F32_convert_i64_u(v: u64.I) -> float.I;
def F64_convert_i32_s(v: u32.I) -> double.I;
def F64_convert_i32_u(v: u32.I) -> double.I;
def F64_convert_i64_s(v: u64.I) -> double.I;
def F64_convert_i64_u(v: u64.I) -> double.I;
def U32_trunc_f32_s(v: float.I) -> u32.I;
def U32_trunc_f32_u(v: float.I) -> u32.I;
def U32_trunc_f64_s(v: double.I) -> u32.I;
def U32_trunc_f64_u(v: double.I) -> u32.I;
def U64_trunc_f32_s(v: float.I) -> u64.I;
def U64_trunc_f32_u(v: float.I) -> u64.I;
def U64_trunc_f64_s(v: double.I) -> u64.I;
def U64_trunc_f64_u(v: double.I) -> u64.I;

def rtcast_u32(i: u32.V) -> u32.I;
def rtcast_f32(f: f32.V) -> f32.I;

def object_isNull(obj: Object.I) -> u32.I;
def object_New(sig: Signature.V) -> Object.I;
def object_Null() -> Object.I;

def U32_maybeTrue(x: u32.I) -> bool.I;
def U32_maybeFalse(x: u32.I) -> bool.I;
def U64_maybeTrue(x: u64.I) -> bool.I;
def U64_maybeFalse(x: u64.I) -> bool.I;
