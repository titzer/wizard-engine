// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Wrapper functions for executing WebAssembly spec tests (.bin.wast).
def OUT = Trace.OUT;
component SpectestMode {
	def group = OptionsRegistry.newGroup("SPECTEST", null);
	def expected = Strings.newMap<bool>();

	def SKIP_ACTIONS = group.newBoolOption("skip-actions", false, "Parse only and skip actions.");
	def EXPECTED = group.newPathOption("expected", null, "File containing expected failures to be ignored.")
		.onSet(TestUtil.loadExpectedFile(expected, _));
	
	def runSpectests(files: Array<string>) -> int {
		if (files.length == 0) return 0;

		OUT.puts("##>");
		OUT.putd(files.length);
		OUT.ln();

		var result = 0;
		var engine = Engine.new();
		for (f in files) result |= runTest(engine, f);
		return result;
	}

	def runTest(engine: Engine, filename: string) -> int {
		OUT.puts("##+");
		OUT.puts(filename);
		OUT.ln();
		var input = System.fileLoad(filename);
		if (input == null) {
			OUT.puts("##-fail: could not load file").ln();
			return 1;
		}
		var before = System.ticksUs();
		var p = SpecTestParser.new(filename, input, makeExternRef(Vector.new(), _));
		p.parseFile();
		if (Trace.test) {
			var diff = System.ticksUs() - before;
			OUT.puts("##@");
			OUT.puts(filename);
			OUT.puts(" : ");
			OUT.putd(diff);
			OUT.puts(" us\n");
		}
		if (p.ok) {
			var ip = SpecTestInterpreter.new(engine, filename);
			ip.skip_actions = SKIP_ACTIONS.val;
			ip.ignore_failure = expected[filename];
			if (ip.run(p.commands)) {
				OUT.puts("##-ok").ln();
			} else {
				return 1;
			}
		} else if (expected[filename]) {
			OUT.put3("##-ok: (ignored expected failure: @ %d:%d %s)", p.error_loc.0, p.error_loc.1, p.error_msg).ln();
		} else {
			OUT.put1("##-fail: %s ", filename);
			OUT.put3("%d:%d %s", p.error_loc.0, p.error_loc.1, p.error_msg).ln();
			return 1;
		}
		return 0;
	}

	def makeExternRef(cache: Vector<HostObject>, i: int) -> HostObject {
		if (i >= cache.length || cache[i] == null) {
			cache.set(i, NumberedObject.new(i));
		}
		return cache[i];
	}
}
