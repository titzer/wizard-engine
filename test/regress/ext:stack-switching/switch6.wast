(module
  (rec
    (type $f1 (func (param i32 (ref null $c1)) (result i32)))
    (type $c1 (cont $f1))
    (type $f2 (func (param) (result i32)))
    (type $c2 (cont $f2))
  )
  (tag $e (result i32))
  (global $limit (mut i32) (i32.const 0))

  (func $add_1 (type $f1)
    (local $cont (ref null $c1))
    (local $acc i32)
    (local.get 0)
    (local.get 1)
    (loop $loop (param i32 (ref null $c1))
      (local.set $cont)
      (i32.add (i32.const 1))
      (local.get $cont)
      (switch $c1 $e)
      (local.set $cont)
      (local.tee $acc)
      (local.get $cont)
      (br_if $loop (i32.lt_s (local.get $acc) (global.get $limit)))
      (drop)
      (return)
    )
    (unreachable)
  )
  (elem declare func $add_1)

  (func (export "main") (param $cap i32) (result i32)
    (local $a (ref null $c1))
    (local $b (ref null $c1))
    (local.set $a (cont.new $c1 (ref.func $add_1)))
    (local.set $b (cont.new $c1 (ref.func $add_1)))

    (global.set $limit (local.get $cap))
    (cont.bind $c1 $c2 (i32.const 0) (local.get $b) (local.get $a))
    (resume $c2 (on $e switch))
  )
)


(assert_return (invoke "main" (i32.const 1)) (i32.const 2))
(assert_return (invoke "main" (i32.const 2)) (i32.const 2))
(assert_return (invoke "main" (i32.const 250)) (i32.const 250))
(assert_return (invoke "main" (i32.const 500)) (i32.const 500))
(assert_return (invoke "main" (i32.const 1000)) (i32.const 1000))
(assert_return (invoke "main" (i32.const 2000)) (i32.const 2000))
(assert_return (invoke "main" (i32.const 50000)) (i32.const 50000))
