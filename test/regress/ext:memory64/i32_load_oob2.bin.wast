(module definition binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\01\7e\00\03\ad\80\80\80\00\2c\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\05\83\80\80\80\00\01\04\02\07"
  "\fd\89\80\80\00\2c\1a\6c\6f\61\64\5f\30\78\31\30"
  "\30\30\5f\30\30\30\30\5f\30\30\30\30\5f\30\30\30"
  "\30\00\00\1a\6c\6f\61\64\5f\30\78\32\30\30\30\5f"
  "\30\30\30\30\5f\30\30\30\30\5f\30\30\30\30\00\01"
  "\1a\6c\6f\61\64\5f\30\78\34\30\30\30\5f\30\30\30"
  "\30\5f\30\30\30\30\5f\30\30\30\30\00\02\1a\6c\6f"
  "\61\64\5f\30\78\38\30\30\30\5f\30\30\30\30\5f\30"
  "\30\30\30\5f\30\30\30\30\00\03\1a\6c\6f\61\64\5f"
  "\30\78\30\31\30\30\5f\30\30\30\30\5f\30\30\30\30"
  "\5f\30\30\30\30\00\04\1a\6c\6f\61\64\5f\30\78\30"
  "\32\30\30\5f\30\30\30\30\5f\30\30\30\30\5f\30\30"
  "\30\30\00\05\1a\6c\6f\61\64\5f\30\78\30\34\30\30"
  "\5f\30\30\30\30\5f\30\30\30\30\5f\30\30\30\30\00"
  "\06\1a\6c\6f\61\64\5f\30\78\30\38\30\30\5f\30\30"
  "\30\30\5f\30\30\30\30\5f\30\30\30\30\00\07\1a\6c"
  "\6f\61\64\5f\30\78\30\30\31\30\5f\30\30\30\30\5f"
  "\30\30\30\30\5f\30\30\30\30\00\08\1a\6c\6f\61\64"
  "\5f\30\78\30\30\32\30\5f\30\30\30\30\5f\30\30\30"
  "\30\5f\30\30\30\30\00\09\1a\6c\6f\61\64\5f\30\78"
  "\30\30\34\30\5f\30\30\30\30\5f\30\30\30\30\5f\30"
  "\30\30\30\00\0a\1a\6c\6f\61\64\5f\30\78\30\30\38"
  "\30\5f\30\30\30\30\5f\30\30\30\30\5f\30\30\30\30"
  "\00\0b\1a\6c\6f\61\64\5f\30\78\30\30\30\31\5f\30"
  "\30\30\30\5f\30\30\30\30\5f\30\30\30\30\00\0c\1a"
  "\6c\6f\61\64\5f\30\78\30\30\30\32\5f\30\30\30\30"
  "\5f\30\30\30\30\5f\30\30\30\30\00\0d\1a\6c\6f\61"
  "\64\5f\30\78\30\30\30\34\5f\30\30\30\30\5f\30\30"
  "\30\30\5f\30\30\30\30\00\0e\1a\6c\6f\61\64\5f\30"
  "\78\30\30\30\38\5f\30\30\30\30\5f\30\30\30\30\5f"
  "\30\30\30\30\00\0f\1a\6c\6f\61\64\5f\30\78\30\30"
  "\30\30\5f\31\30\30\30\5f\30\30\30\30\5f\30\30\30"
  "\30\00\10\1a\6c\6f\61\64\5f\30\78\30\30\30\30\5f"
  "\32\30\30\30\5f\30\30\30\30\5f\30\30\30\30\00\11"
  "\1a\6c\6f\61\64\5f\30\78\30\30\30\30\5f\34\30\30"
  "\30\5f\30\30\30\30\5f\30\30\30\30\00\12\1a\6c\6f"
  "\61\64\5f\30\78\30\30\30\30\5f\38\30\30\30\5f\30"
  "\30\30\30\5f\30\30\30\30\00\13\1a\6c\6f\61\64\5f"
  "\30\78\30\30\30\30\5f\30\31\30\30\5f\30\30\30\30"
  "\5f\30\30\30\30\00\14\1a\6c\6f\61\64\5f\30\78\30"
  "\30\30\30\5f\30\32\30\30\5f\30\30\30\30\5f\30\30"
  "\30\30\00\15\1a\6c\6f\61\64\5f\30\78\30\30\30\30"
  "\5f\30\34\30\30\5f\30\30\30\30\5f\30\30\30\30\00"
  "\16\1a\6c\6f\61\64\5f\30\78\30\30\30\30\5f\30\38"
  "\30\30\5f\30\30\30\30\5f\30\30\30\30\00\17\1a\6c"
  "\6f\61\64\5f\30\78\30\30\30\30\5f\30\30\31\30\5f"
  "\30\30\30\30\5f\30\30\30\30\00\18\1a\6c\6f\61\64"
  "\5f\30\78\30\30\30\30\5f\30\30\32\30\5f\30\30\30"
  "\30\5f\30\30\30\30\00\19\1a\6c\6f\61\64\5f\30\78"
  "\30\30\30\30\5f\30\30\34\30\5f\30\30\30\30\5f\30"
  "\30\30\30\00\1a\1a\6c\6f\61\64\5f\30\78\30\30\30"
  "\30\5f\30\30\38\30\5f\30\30\30\30\5f\30\30\30\30"
  "\00\1b\1a\6c\6f\61\64\5f\30\78\30\30\30\30\5f\30"
  "\30\30\31\5f\30\30\30\30\5f\30\30\30\30\00\1c\1a"
  "\6c\6f\61\64\5f\30\78\30\30\30\30\5f\30\30\30\32"
  "\5f\30\30\30\30\5f\30\30\30\30\00\1d\1a\6c\6f\61"
  "\64\5f\30\78\30\30\30\30\5f\30\30\30\34\5f\30\30"
  "\30\30\5f\30\30\30\30\00\1e\1a\6c\6f\61\64\5f\30"
  "\78\30\30\30\30\5f\30\30\30\38\5f\30\30\30\30\5f"
  "\30\30\30\30\00\1f\1a\6c\6f\61\64\5f\30\78\30\30"
  "\30\30\5f\30\30\30\30\5f\31\30\30\30\5f\30\30\30"
  "\30\00\20\1a\6c\6f\61\64\5f\30\78\30\30\30\30\5f"
  "\30\30\30\30\5f\32\30\30\30\5f\30\30\30\30\00\21"
  "\1a\6c\6f\61\64\5f\30\78\30\30\30\30\5f\30\30\30"
  "\30\5f\34\30\30\30\5f\30\30\30\30\00\22\1a\6c\6f"
  "\61\64\5f\30\78\30\30\30\30\5f\30\30\30\30\5f\38"
  "\30\30\30\5f\30\30\30\30\00\23\1a\6c\6f\61\64\5f"
  "\30\78\30\30\30\30\5f\30\30\30\30\5f\30\31\30\30"
  "\5f\30\30\30\30\00\24\1a\6c\6f\61\64\5f\30\78\30"
  "\30\30\30\5f\30\30\30\30\5f\30\32\30\30\5f\30\30"
  "\30\30\00\25\1a\6c\6f\61\64\5f\30\78\30\30\30\30"
  "\5f\30\30\30\30\5f\30\34\30\30\5f\30\30\30\30\00"
  "\26\1a\6c\6f\61\64\5f\30\78\30\30\30\30\5f\30\30"
  "\30\30\5f\30\38\30\30\5f\30\30\30\30\00\27\1a\6c"
  "\6f\61\64\5f\30\78\30\30\30\30\5f\30\30\30\30\5f"
  "\30\30\31\30\5f\30\30\30\30\00\28\1a\6c\6f\61\64"
  "\5f\30\78\30\30\30\30\5f\30\30\30\30\5f\30\30\32"
  "\30\5f\30\30\30\30\00\29\1a\6c\6f\61\64\5f\30\78"
  "\30\30\30\30\5f\30\30\30\30\5f\30\30\34\30\5f\30"
  "\30\30\30\00\2a\1a\6c\6f\61\64\5f\30\78\30\30\30"
  "\30\5f\30\30\30\30\5f\30\30\38\30\5f\30\30\30\30"
  "\00\2b\0a\af\86\80\80\00\2c\90\80\80\80\00\00\20"
  "\00\28\02\80\80\80\80\80\80\80\80\10\1a\0b\90\80"
  "\80\80\00\00\20\00\28\02\80\80\80\80\80\80\80\80"
  "\20\1a\0b\90\80\80\80\00\00\20\00\28\02\80\80\80"
  "\80\80\80\80\80\40\1a\0b\91\80\80\80\00\00\20\00"
  "\28\02\80\80\80\80\80\80\80\80\80\01\1a\0b\90\80"
  "\80\80\00\00\20\00\28\02\80\80\80\80\80\80\80\80"
  "\01\1a\0b\90\80\80\80\00\00\20\00\28\02\80\80\80"
  "\80\80\80\80\80\02\1a\0b\90\80\80\80\00\00\20\00"
  "\28\02\80\80\80\80\80\80\80\80\04\1a\0b\90\80\80"
  "\80\00\00\20\00\28\02\80\80\80\80\80\80\80\80\08"
  "\1a\0b\8f\80\80\80\00\00\20\00\28\02\80\80\80\80"
  "\80\80\80\08\1a\0b\8f\80\80\80\00\00\20\00\28\02"
  "\80\80\80\80\80\80\80\10\1a\0b\8f\80\80\80\00\00"
  "\20\00\28\02\80\80\80\80\80\80\80\20\1a\0b\8f\80"
  "\80\80\00\00\20\00\28\02\80\80\80\80\80\80\80\40"
  "\1a\0b\8e\80\80\80\00\00\20\00\28\02\80\80\80\80"
  "\80\80\40\1a\0b\8f\80\80\80\00\00\20\00\28\02\80"
  "\80\80\80\80\80\80\01\1a\0b\8f\80\80\80\00\00\20"
  "\00\28\02\80\80\80\80\80\80\80\02\1a\0b\8f\80\80"
  "\80\00\00\20\00\28\02\80\80\80\80\80\80\80\04\1a"
  "\0b\8e\80\80\80\00\00\20\00\28\02\80\80\80\80\80"
  "\80\04\1a\0b\8e\80\80\80\00\00\20\00\28\02\80\80"
  "\80\80\80\80\08\1a\0b\8e\80\80\80\00\00\20\00\28"
  "\02\80\80\80\80\80\80\10\1a\0b\8e\80\80\80\00\00"
  "\20\00\28\02\80\80\80\80\80\80\20\1a\0b\8d\80\80"
  "\80\00\00\20\00\28\02\80\80\80\80\80\20\1a\0b\8d"
  "\80\80\80\00\00\20\00\28\02\80\80\80\80\80\40\1a"
  "\0b\8e\80\80\80\00\00\20\00\28\02\80\80\80\80\80"
  "\80\01\1a\0b\8e\80\80\80\00\00\20\00\28\02\80\80"
  "\80\80\80\80\02\1a\0b\8d\80\80\80\00\00\20\00\28"
  "\02\80\80\80\80\80\02\1a\0b\8d\80\80\80\00\00\20"
  "\00\28\02\80\80\80\80\80\04\1a\0b\8d\80\80\80\00"
  "\00\20\00\28\02\80\80\80\80\80\08\1a\0b\8d\80\80"
  "\80\00\00\20\00\28\02\80\80\80\80\80\10\1a\0b\8c"
  "\80\80\80\00\00\20\00\28\02\80\80\80\80\10\1a\0b"
  "\8c\80\80\80\00\00\20\00\28\02\80\80\80\80\20\1a"
  "\0b\8c\80\80\80\00\00\20\00\28\02\80\80\80\80\40"
  "\1a\0b\8d\80\80\80\00\00\20\00\28\02\80\80\80\80"
  "\80\01\1a\0b\8c\80\80\80\00\00\20\00\28\02\80\80"
  "\80\80\01\1a\0b\8c\80\80\80\00\00\20\00\28\02\80"
  "\80\80\80\02\1a\0b\8c\80\80\80\00\00\20\00\28\02"
  "\80\80\80\80\04\1a\0b\8c\80\80\80\00\00\20\00\28"
  "\02\80\80\80\80\08\1a\0b\8b\80\80\80\00\00\20\00"
  "\28\02\80\80\80\08\1a\0b\8b\80\80\80\00\00\20\00"
  "\28\02\80\80\80\10\1a\0b\8b\80\80\80\00\00\20\00"
  "\28\02\80\80\80\20\1a\0b\8b\80\80\80\00\00\20\00"
  "\28\02\80\80\80\40\1a\0b\8a\80\80\80\00\00\20\00"
  "\28\02\80\80\40\1a\0b\8b\80\80\80\00\00\20\00\28"
  "\02\80\80\80\01\1a\0b\8b\80\80\80\00\00\20\00\28"
  "\02\80\80\80\02\1a\0b\8b\80\80\80\00\00\20\00\28"
  "\02\80\80\80\04\1a\0b"
)
(module instance)
(assert_trap
  (invoke "load_0x1000_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x2000_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x4000_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x8000_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0100_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0200_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0400_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0800_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0010_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0020_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0040_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0080_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0001_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0002_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0004_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0008_0000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_1000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_2000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_4000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_8000_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0100_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0200_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0400_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0800_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0010_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0020_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0040_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0080_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0001_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0002_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0004_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0008_0000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0000_1000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0000_2000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0000_4000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0000_8000_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0000_0100_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0000_0200_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0000_0400_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0000_0800_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0000_0010_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0000_0020_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0000_0040_0000" (i64.const 0x0))
  "out of bounds memory access"
)
(assert_trap
  (invoke "load_0x0000_0000_0080_0000" (i64.const 0x0))
  "out of bounds memory access"
)
