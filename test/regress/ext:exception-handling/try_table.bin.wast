(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0d\83\80\80\80\00"
  "\01\00\00\07\8e\80\80\80\00\02\02\65\30\04\00\05"
  "\74\68\72\6f\77\00\00\0a\8a\80\80\80\00\01\84\80"
  "\80\80\00\00\08\00\0b"
)
(register "test")
(module binary
  "\00\61\73\6d\01\00\00\00\01\c6\80\80\80\00\0f\60"
  "\00\00\60\01\7f\00\60\01\7d\00\60\01\7e\00\60\01"
  "\7c\00\60\01\7f\01\7f\60\02\7f\7f\01\7f\60\01\7d"
  "\01\7d\60\01\7e\01\7e\60\01\7c\01\7c\60\00\02\7f"
  "\69\60\00\02\7d\69\60\00\02\7e\69\60\00\02\7c\69"
  "\60\00\01\7f\02\a4\80\80\80\00\03\04\74\65\73\74"
  "\02\65\30\04\00\00\04\74\65\73\74\02\65\30\04\00"
  "\00\04\74\65\73\74\05\74\68\72\6f\77\00\00\03\99"
  "\80\80\80\00\18\05\05\00\06\06\05\05\05\07\08\09"
  "\05\07\08\09\01\05\0e\0e\05\00\00\00\00\04\85\80"
  "\80\80\00\01\70\01\01\01\0d\8f\80\80\80\00\07\00"
  "\00\00\00\00\00\00\01\00\02\00\03\00\04\07\ce\83"
  "\80\80\00\14\12\73\69\6d\70\6c\65\2d\74\68\72\6f"
  "\77\2d\63\61\74\63\68\00\02\16\75\6e\72\65\61\63"
  "\68\61\62\6c\65\2d\6e\6f\74\2d\63\61\75\67\68\74"
  "\00\03\0e\74\72\61\70\2d\69\6e\2d\63\61\6c\6c\65"
  "\65\00\05\0f\63\61\74\63\68\2d\63\6f\6d\70\6c\65"
  "\78\2d\31\00\06\0f\63\61\74\63\68\2d\63\6f\6d\70"
  "\6c\65\78\2d\32\00\07\15\74\68\72\6f\77\2d\63\61"
  "\74\63\68\2d\70\61\72\61\6d\2d\69\33\32\00\08\15"
  "\74\68\72\6f\77\2d\63\61\74\63\68\2d\70\61\72\61"
  "\6d\2d\66\33\32\00\09\15\74\68\72\6f\77\2d\63\61"
  "\74\63\68\2d\70\61\72\61\6d\2d\69\36\34\00\0a\15"
  "\74\68\72\6f\77\2d\63\61\74\63\68\2d\70\61\72\61"
  "\6d\2d\66\36\34\00\0b\19\74\68\72\6f\77\2d\63\61"
  "\74\63\68\5f\72\65\66\2d\70\61\72\61\6d\2d\69\33"
  "\32\00\0c\19\74\68\72\6f\77\2d\63\61\74\63\68\5f"
  "\72\65\66\2d\70\61\72\61\6d\2d\66\33\32\00\0d\19"
  "\74\68\72\6f\77\2d\63\61\74\63\68\5f\72\65\66\2d"
  "\70\61\72\61\6d\2d\69\36\34\00\0e\19\74\68\72\6f"
  "\77\2d\63\61\74\63\68\5f\72\65\66\2d\70\61\72\61"
  "\6d\2d\66\36\34\00\0f\0f\63\61\74\63\68\2d\70\61"
  "\72\61\6d\2d\69\33\32\00\11\0e\63\61\74\63\68\2d"
  "\69\6d\70\6f\72\74\65\64\00\12\14\63\61\74\63\68"
  "\2d\69\6d\70\6f\72\74\65\64\2d\61\6c\69\61\73\00"
  "\13\0d\63\61\74\63\68\6c\65\73\73\2d\74\72\79\00"
  "\14\18\72\65\74\75\72\6e\2d\63\61\6c\6c\2d\69\6e"
  "\2d\74\72\79\2d\63\61\74\63\68\00\16\21\72\65\74"
  "\75\72\6e\2d\63\61\6c\6c\2d\69\6e\64\69\72\65\63"
  "\74\2d\69\6e\2d\74\72\79\2d\63\61\74\63\68\00\17"
  "\0e\74\72\79\2d\77\69\74\68\2d\70\61\72\61\6d\00"
  "\18\09\87\80\80\80\00\01\00\41\00\0b\01\15\0a\e7"
  "\84\80\80\00\18\8e\80\80\80\00\00\20\00\41\00\47"
  "\04\40\08\02\0b\41\00\0b\99\80\80\80\00\00\02\40"
  "\1f\7f\01\00\02\00\20\00\45\04\40\08\02\0b\41\2a"
  "\0b\0f\0b\41\17\0b\8d\80\80\80\00\00\02\40\1f\40"
  "\01\02\00\00\0b\0f\0b\0b\87\80\80\80\00\00\20\00"
  "\20\01\6e\0b\94\80\80\80\00\00\02\40\1f\7f\01\02"
  "\00\20\00\20\01\10\04\0b\0f\0b\41\0b\0b\b5\80\80"
  "\80\00\00\02\40\1f\7f\01\00\03\00\02\40\1f\7f\01"
  "\00\02\00\20\00\45\04\40\08\02\05\20\00\41\01\46"
  "\04\40\08\03\05\08\04\0b\0b\41\02\0b\0c\01\0b\41"
  "\03\0b\0f\0b\41\04\0b\b0\80\80\80\00\00\02\40\02"
  "\40\1f\7f\02\00\02\01\00\03\00\20\00\45\04\40\08"
  "\02\05\20\00\41\01\46\04\40\08\03\05\08\04\0b\0b"
  "\41\02\0b\0f\0b\41\04\0f\0b\41\03\0b\94\80\80\80"
  "\00\00\02\7f\1f\7f\01\00\05\00\20\00\08\05\41\02"
  "\0b\0f\0b\0f\0b\97\80\80\80\00\00\02\7d\1f\7d\01"
  "\00\06\00\20\00\08\06\43\00\00\00\00\0b\0f\0b\0f"
  "\0b\94\80\80\80\00\00\02\7e\1f\7e\01\00\07\00\20"
  "\00\08\07\42\02\0b\0f\0b\0f\0b\9b\80\80\80\00\00"
  "\02\7c\1f\7c\01\00\08\00\20\00\08\08\44\00\00\00"
  "\00\00\00\00\00\0b\0f\0b\0f\0b\95\80\80\80\00\00"
  "\02\0a\1f\7f\01\01\05\00\20\00\08\05\41\02\0b\0f"
  "\0b\1a\0f\0b\98\80\80\80\00\00\02\0b\1f\7d\01\01"
  "\06\00\20\00\08\06\43\00\00\00\00\0b\0f\0b\1a\0f"
  "\0b\95\80\80\80\00\00\02\0c\1f\7e\01\01\07\00\20"
  "\00\08\07\42\02\0b\0f\0b\1a\0f\0b\9c\80\80\80\00"
  "\00\02\0d\1f\7c\01\01\08\00\20\00\08\08\44\00\00"
  "\00\00\00\00\00\00\0b\0f\0b\1a\0f\0b\86\80\80\80"
  "\00\00\20\00\08\05\0b\93\80\80\80\00\00\02\7f\1f"
  "\7f\01\00\05\00\41\00\20\00\10\10\0b\0f\0b\0b\93"
  "\80\80\80\00\00\02\40\1f\7f\01\00\00\00\41\01\10"
  "\00\0b\0f\0b\41\02\0b\93\80\80\80\00\00\02\40\1f"
  "\7f\01\00\00\00\41\01\08\01\0b\0f\0b\41\02\0b\97"
  "\80\80\80\00\00\02\40\1f\7f\01\00\02\00\1f\7f\00"
  "\20\00\10\01\0b\0b\0f\0b\41\01\0b\84\80\80\80\00"
  "\00\08\02\0b\8e\80\80\80\00\00\02\40\1f\40\01\00"
  "\02\00\12\15\0b\0b\0b\91\80\80\80\00\00\02\40\1f"
  "\40\01\00\02\00\41\00\13\00\00\0b\0b\0b\89\80\80"
  "\80\00\00\41\00\1f\01\00\1a\0b\0b"
)
(assert_return (invoke "simple-throw-catch" (i32.const 0x0)) (i32.const 0x17))
(assert_return (invoke "simple-throw-catch" (i32.const 0x1)) (i32.const 0x2a))
(assert_trap (invoke "unreachable-not-caught") "unreachable")
(assert_return
  (invoke "trap-in-callee" (i32.const 0x7) (i32.const 0x2))
  (i32.const 0x3)
)
(assert_trap
  (invoke "trap-in-callee" (i32.const 0x1) (i32.const 0x0))
  "integer divide by zero"
)
(assert_return (invoke "catch-complex-1" (i32.const 0x0)) (i32.const 0x3))
(assert_return (invoke "catch-complex-1" (i32.const 0x1)) (i32.const 0x4))
(assert_exception (invoke "catch-complex-1" (i32.const 0x2)))
(assert_return (invoke "catch-complex-2" (i32.const 0x0)) (i32.const 0x3))
(assert_return (invoke "catch-complex-2" (i32.const 0x1)) (i32.const 0x4))
(assert_exception (invoke "catch-complex-2" (i32.const 0x2)))
(assert_return (invoke "throw-catch-param-i32" (i32.const 0x0)) (i32.const 0x0))
(assert_return (invoke "throw-catch-param-i32" (i32.const 0x1)) (i32.const 0x1))
(assert_return (invoke "throw-catch-param-i32" (i32.const 0xa)) (i32.const 0xa))
(assert_return
  (invoke "throw-catch-param-f32" (f32.const 0x1.4p+2))
  (f32.const 0x1.4p+2)
)
(assert_return
  (invoke "throw-catch-param-f32" (f32.const 0x1.5p+3))
  (f32.const 0x1.5p+3)
)
(assert_return (invoke "throw-catch-param-i64" (i64.const 0x5)) (i64.const 0x5))
(assert_return (invoke "throw-catch-param-i64" (i64.const 0x0)) (i64.const 0x0))
(assert_return
  (invoke "throw-catch-param-i64" (i64.const 0xffff_ffff_ffff_ffff))
  (i64.const 0xffff_ffff_ffff_ffff)
)
(assert_return
  (invoke "throw-catch-param-f64" (f64.const 0x1.4p+2))
  (f64.const 0x1.4p+2)
)
(assert_return
  (invoke "throw-catch-param-f64" (f64.const 0x1.5p+3))
  (f64.const 0x1.5p+3)
)
(assert_return
  (invoke "throw-catch_ref-param-i32" (i32.const 0x0))
  (i32.const 0x0)
)
(assert_return
  (invoke "throw-catch_ref-param-i32" (i32.const 0x1))
  (i32.const 0x1)
)
(assert_return
  (invoke "throw-catch_ref-param-i32" (i32.const 0xa))
  (i32.const 0xa)
)
(assert_return
  (invoke "throw-catch_ref-param-f32" (f32.const 0x1.4p+2))
  (f32.const 0x1.4p+2)
)
(assert_return
  (invoke "throw-catch_ref-param-f32" (f32.const 0x1.5p+3))
  (f32.const 0x1.5p+3)
)
(assert_return
  (invoke "throw-catch_ref-param-i64" (i64.const 0x5))
  (i64.const 0x5)
)
(assert_return
  (invoke "throw-catch_ref-param-i64" (i64.const 0x0))
  (i64.const 0x0)
)
(assert_return
  (invoke "throw-catch_ref-param-i64" (i64.const 0xffff_ffff_ffff_ffff))
  (i64.const 0xffff_ffff_ffff_ffff)
)
(assert_return
  (invoke "throw-catch_ref-param-f64" (f64.const 0x1.4p+2))
  (f64.const 0x1.4p+2)
)
(assert_return
  (invoke "throw-catch_ref-param-f64" (f64.const 0x1.5p+3))
  (f64.const 0x1.5p+3)
)
(assert_return (invoke "catch-param-i32" (i32.const 0x5)) (i32.const 0x5))
(assert_return (invoke "catch-imported") (i32.const 0x2))
(assert_return (invoke "catch-imported-alias") (i32.const 0x2))
(assert_return (invoke "catchless-try" (i32.const 0x0)) (i32.const 0x0))
(assert_return (invoke "catchless-try" (i32.const 0x1)) (i32.const 0x1))
(assert_exception (invoke "return-call-in-try-catch"))
(assert_exception (invoke "return-call-indirect-in-try-catch"))
(assert_return (invoke "try-with-param"))
(module binary
  "\00\61\73\6d\01\00\00\00\01\88\80\80\80\00\02\60"
  "\00\00\60\00\01\7f\02\8e\80\80\80\00\01\04\74\65"
  "\73\74\05\74\68\72\6f\77\00\00\03\82\80\80\80\00"
  "\01\01\0d\83\80\80\80\00\01\00\00\07\95\80\80\80"
  "\00\01\11\69\6d\70\6f\72\74\65\64\2d\6d\69\73\6d"
  "\61\74\63\68\00\01\0a\a5\80\80\80\00\01\9f\80\80"
  "\80\00\00\02\40\1f\7f\01\02\00\02\40\1f\7f\01\00"
  "\00\00\41\01\10\00\0b\0f\0b\41\02\0b\0f\0b\41\03"
  "\0b"
)
(assert_return (invoke "imported-mismatch") (i32.const 0x3))
(module binary
  "\00\61\73\6d\01\00\00\00\01\88\80\80\80\00\02\60"
  "\00\00\60\00\01\69\03\87\80\80\80\00\06\00\00\00"
  "\01\01\01\0d\83\80\80\80\00\01\00\00\0a\e4\80\80"
  "\80\00\06\8c\80\80\80\00\00\1f\40\02\00\00\00\00"
  "\00\00\0b\0b\8b\80\80\80\00\00\1f\40\02\02\00\00"
  "\00\00\0b\0b\8a\80\80\80\00\00\1f\40\02\02\00\02"
  "\00\0b\0b\8d\80\80\80\00\00\1f\40\02\01\00\00\01"
  "\00\00\0b\00\0b\8c\80\80\80\00\00\1f\40\02\03\00"
  "\01\00\00\0b\00\0b\8b\80\80\80\00\00\1f\40\02\03"
  "\00\03\00\0b\00\0b"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\8c\80\80\80"
    "\00\01\86\80\80\80\00\00\1f\7f\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\8e\80\80\80"
    "\00\01\88\80\80\80\00\00\1f\7f\00\42\2a\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0d\83\80\80\80\00"
    "\01\00\00\0a\8f\80\80\80\00\01\89\80\80\80\00\00"
    "\1f\40\01\01\00\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\88\80\80\80\00\02\60"
    "\00\00\60\00\01\69\03\82\80\80\80\00\01\01\0d\83"
    "\80\80\80\00\01\00\00\0a\90\80\80\80\00\01\8a\80"
    "\80\80\00\00\1f\40\01\00\00\00\0b\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
    "\01\88\80\80\80\00\00\1f\40\01\03\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\69\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\1f\40\01\02\00\0b\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\8a\80\80\80\00\02\60"
    "\01\7e\00\60\00\02\7f\69\03\82\80\80\80\00\01\01"
    "\0d\83\80\80\80\00\01\00\00\0a\91\80\80\80\00\01"
    "\8b\80\80\80\00\00\1f\7f\01\01\00\00\41\2a\0b\0b"
  )
  "type mismatch"
)
