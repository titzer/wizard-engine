import component wali {
	def SYS_open(pathname: Pointer, flags: i32, mode: i32) -> i64;
	def SYS_close(fd: i32) -> i64;
	def SYS_read(fd: i32, buf: Pointer, count: i32) -> i64;
	def SYS_write(fd: i32, buf: Pointer, count: i32) -> i64;
	def SYS_dup(fd: i32) -> i64;
	def SYS_dup2(oldfd: i32, newfd: i32) -> i64;
}

def O_RDONLY = 0;
def STDOUT = 1;
def READ_SIZE = 40;
def main() -> i64 {
	var filename = "lorem-ipsum.txt\x00";
	var first_fd = wali.SYS_open(Pointer.atContents(filename), O_RDONLY, 0);
	var second_fd = wali.SYS_dup(i32.view(first_fd));

	// Read 40 bytes for the first_fd
	print(readfd(i32.view(first_fd), READ_SIZE));

	// dup2 to first_fd to second_fd, and close first_fd
	var new_fd = wali.SYS_dup2(i32.view(first_fd), i32.view(second_fd));
	wali.SYS_close(i32.view(first_fd));

	// Second read, this SHOULD continue the offset
	print(readfd(i32.view(new_fd), READ_SIZE));

	wali.SYS_close(i32.view(new_fd));
	
	// Check that new_fd should be second_fd
	return if(second_fd == new_fd, 0, 1);
}

def readfd(fd: i32, length: i32) -> string {
	var str = Array<byte>.new(length);
	wali.SYS_read(i32.view(fd), Pointer.atContents(str), length);
	return str;
}

def print(str: string) {
	wali.SYS_write(STDOUT, Pointer.atContents(str), str.length);
}
