// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def DEFAULT_LIMITS = Limits.new();
def N = WasmStackTester.new;
def unused_ = TestTiers.addTests2([
	("reset0", N, test_reset0),
	("reset1", N, test_reset1),
	("reset2", N, test_reset2),
	("bind0", N, test_bind0),
	("resume_nop", N, test_resume_nop),
	("resume_add", N, test_resume_add),
	("resume_host", N, test_resume_host),
	("resume_host_throw", N, test_resume_host_throw),
	("resume_host_tc_host", N, test_resume_host_tc_host),
	("resume_host_tc_wasm", N, test_resume_host_tc_wasm),
	("gc_stacks0", N, test_gc_stacks0),
	("gc_stacks1", N, test_gc_stacks1)
]);

class WasmStackTester extends ExeTester {
	new(t: Tester, tiering: ExecutionStrategy) super(t, tiering) { }

	def assert_state(expected: StackState, stack: WasmStack) {
		var got = stack.state();
		if (got != expected) t.fail2("expected state == %s, got %s", expected.name, got.name);
	}
	def assert_r(expected: Result, got: Result) {
		if (!expected.equals(got)) t.fail2("expected %q, got %q", expected.render, got.render);
	}
	def assertRefType<R>(v: Value) {
		match (v) {
			Ref(obj) => if (!R.?(obj)) t.fail("expected reference, got wrong type");
			_ => t.fail1("expected reference, got %q", Values.render(v, _));
		}
	}
}

def hf_i_i = HostFunction.new("dummy1", SigCache.i_i, null);
def hf_v_i = HostFunction.new("dummy2", SigCache.v_i, null);

def test_reset0(t: WasmStackTester) {
	var stack = Target.newWasmStack();

	t.assert_state(StackState.EMPTY, stack);

	stack.reset(hf_i_i);
	t.assert_state(StackState.SUSPENDED, stack);

	stack.clear();
	t.assert_state(StackState.EMPTY, stack);
}

def test_reset1(t: WasmStackTester) {
	var s1 = Target.newWasmStack(), s2 = Target.newWasmStack();

	t.t.assert_ne(s1, s2);
	t.assert_state(StackState.EMPTY, s1);
	t.assert_state(StackState.EMPTY, s2);

	s1.reset(hf_i_i);
	t.assert_state(StackState.SUSPENDED, s1);
	t.assert_state(StackState.EMPTY, s2);

	s2.reset(hf_i_i);
	t.assert_state(StackState.SUSPENDED, s1);
	t.assert_state(StackState.SUSPENDED, s2);

	s1.clear();
	t.assert_state(StackState.EMPTY, s1);
	t.assert_state(StackState.SUSPENDED, s2);

	s2.clear();
	t.assert_state(StackState.EMPTY, s1);
	t.assert_state(StackState.EMPTY, s2);
}

def test_reset2(t: WasmStackTester) {
	var stack = Target.newWasmStack();

	t.assert_state(StackState.EMPTY, stack);

	stack.reset(hf_v_i);
	t.assert_state(StackState.RESUMABLE, stack);

	stack.clear();
	t.assert_state(StackState.EMPTY, stack);
}

def test_bind0(t: WasmStackTester) {
	var stack = Target.newWasmStack();

	t.assert_state(StackState.EMPTY, stack);

	stack.reset(hf_i_i);
	t.assert_state(StackState.SUSPENDED, stack);

	stack.bind([Value.I32(0)]);
	t.assert_state(StackState.RESUMABLE, stack);

	stack.clear();
	t.assert_state(StackState.EMPTY, stack);
}

def test_resume_nop(t: WasmStackTester) {
	t.sig(SigCache.v_v).code([]);
	var f = t.makeFunc();

	var s1 = Target.newWasmStack();
	s1.reset(f);
	if (Trace.interpreter) Trace.OUT.puts("resume ").ln();
	var r = s1.resume();
	if (Trace.interpreter) Trace.OUT.put1(" -> %q\n", r.render).ln();
	t.assert_r(Result.Value(Values.NONE), r);
}

def test_resume_add(t: WasmStackTester) {
	t.sig(SigCache.ii_i).code([
		u8.!(Opcode.LOCAL_GET.code), 0,
		u8.!(Opcode.LOCAL_GET.code), 1,
		u8.!(Opcode.I32_ADD.code)
	]);
	var f = t.makeFunc();

	var s1 = Target.newWasmStack();
	s1.reset(f);
	if (Trace.interpreter) Trace.OUT.puts("resume ").ln();
	s1.bind([Value.I32(44), Value.I32(33)]);
	var r = s1.resume();
	if (Trace.interpreter) Trace.OUT.put1(" -> %q\n", r.render).ln();
	t.assert_r(Result.Value([Value.I32(77)]), r);
}

def host_a_minus_2b(args: Range<Value>) -> HostResult {
	var a = Values.unbox_i(args[0]), b = Values.unbox_i(args[1]);
	return HostResult.Value1(Values.box_i(a - 2 * b));
}

def host_a_times_3_minus_b(args: Range<Value>) -> HostResult {
	var a = Values.unbox_i(args[0]), b = Values.unbox_i(args[1]);
	return HostResult.Value1(Values.box_i(a * 3 - b));
}

def host_return_k(args: Range<Value>, r: HostResult) -> HostResult {
	return r;
}

def test_resume_host(t: WasmStackTester) {
	var f = HostFunction.new("host_a_minus_2b", SigCache.ii_i, host_a_minus_2b);
	var s1 = Target.newWasmStack();
	s1.reset(f);
	if (Trace.interpreter) Trace.OUT.puts("resume ").ln();
	s1.bind([Value.I32(444), Value.I32(333)]);
	var r = s1.resume();
	if (Trace.interpreter) Trace.OUT.put1(" -> %q\n", r.render).ln();
	t.assert_r(Result.Value([Values.box_i(-222)]), r);
}

def test_resume_host_throw(t: WasmStackTester) {
	var thrown = Trap.new(TrapReason.HOST, null, null);
	var f = HostFunction.new("host_throw", SigCache.ii_i, host_return_k(_, HostResult.Throw(thrown)));
	var s1 = Target.newWasmStack();
	s1.reset(f);
	if (Trace.interpreter) Trace.OUT.puts("resume ").ln();
	s1.bind([Value.I32(444), Value.I32(333)]);
	var r = s1.resume();
	if (Trace.interpreter) Trace.OUT.put1(" -> %q\n", r.render).ln();
	t.assert_r(Result.Throw(thrown), r);
}

def host_tailcall_f(args: Range<Value>, f: Function) -> HostResult {
	return HostResult.TailCall(f, Ranges.dup(args));
}

def test_resume_host_tc_host(t: WasmStackTester) {
	var g = HostFunction.new("host_a_times_3_minus_b", SigCache.ii_i, host_a_times_3_minus_b);
	var f = HostFunction.new("host_tc_host", SigCache.ii_i, host_tailcall_f(_, g));
	var s1 = Target.newWasmStack();
	s1.reset(f);
	if (Trace.interpreter) Trace.OUT.puts("resume ").ln();
	s1.bind([Value.I32(22222), Value.I32(11111)]);
	var r = s1.resume();
	if (Trace.interpreter) Trace.OUT.put1(" -> %q\n", r.render).ln();
	t.assert_r(Result.Value([Values.box_i(55555)]), r);
}

def test_resume_host_tc_wasm(t: WasmStackTester) {
	t.sig(SigCache.ii_i).code([
		u8.!(Opcode.LOCAL_GET.code), 0,
		u8.!(Opcode.LOCAL_GET.code), 1,
		u8.!(Opcode.I32_SUB.code)
	]);
	var g = t.makeFunc();

	var f = HostFunction.new("host_tc_host", SigCache.ii_i, host_tailcall_f(_, g));
	var s1 = Target.newWasmStack();
	s1.reset(f);
	if (Trace.interpreter) Trace.OUT.puts("resume ").ln();
	s1.bind([Value.I32(333333), Value.I32(111111)]);
	var r = s1.resume();
	if (Trace.interpreter) Trace.OUT.put1(" -> %q\n", r.render).ln();
	t.assert_r(Result.Value([Values.box_i(222222)]), r);
}

def bindArgs(s: WasmStack) {
	var a = HeapObject.new(null, []);
	var h = HostObject.new();
	var f = HostFunction.new("host_a_minus_2b", SigCache.ii_i, host_a_minus_2b);
	s.bind([Value.Ref(a), Value.Ref(h), Value.Ref(f)]);
}

def test_gc_stacks0(t: WasmStackTester) {
	var sig = t.newSig(
		[ValueTypes.ANYREF, ValueTypes.EXTERNREF, ValueTypes.FUNCREF],
		[ValueTypes.ANYREF, ValueTypes.EXTERNREF, ValueTypes.FUNCREF]);
	t.sig(sig).code([
		u8.!(Opcode.LOCAL_GET.code), 0,
		u8.!(Opcode.LOCAL_GET.code), 1,
		u8.!(Opcode.LOCAL_GET.code), 2
	]);

	var s1 = Target.newWasmStack();
	var f = t.makeFunc();
	s1.reset(f);
	bindArgs(s1);
	Target.forceGC();
	Target.forceGC();
	var r = s1.resume();
	match (r) {
		Value(vals) => {
			if (vals.length != 3) return t.t.fail1("expected 3 vals, got %d", vals.length);
			t.assertRefType<HeapObject>(vals[0]);
			t.assertRefType<HostObject>(vals[1]);
			t.assertRefType<HostFunction>(vals[2]);
		}
		_ => t.t.fail1("expected 3 vals, got %q", r.render);
	}
}

def test_gc_stacks1(t: WasmStackTester) {
	var sig = t.newSig(
		[ValueTypes.ANYREF, ValueTypes.ANYREF, ValueTypes.FUNCREF],
		[ValueTypes.ANYREF, ValueTypes.ANYREF, ValueTypes.FUNCREF]);
	t.sig(sig).code([
		u8.!(Opcode.LOCAL_GET.code), 0,
		u8.!(Opcode.LOCAL_GET.code), 1,
		u8.!(Opcode.LOCAL_GET.code), 2
	]);

	var s1 = Target.newWasmStack();
	var f = t.makeFunc();
	s1.reset(f);

	var a = HeapObject.new(null, []);

	s1.bind([Value.Ref(a), Value.I31(666777), Value.Ref(f)]);
	Target.forceGC();
	Target.forceGC();
	var r = s1.resume();
	match (r) {
		Value(vals) => {
			if (vals.length != 3) return t.t.fail1("expected 3 vals, got %d", vals.length);
			t.t.assert_eq(Value.Ref(a), vals[0]);
			t.t.assert_eq(Value.I31(666777), vals[1]);
			t.t.assert_eq(Value.Ref(f), vals[2]);
		}
		_ => t.t.fail1("expected 3 vals, got %q", r.render);
	}
}
