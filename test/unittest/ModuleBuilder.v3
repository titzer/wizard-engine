// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility class to build an in-memory {Module} object.
class ModuleBuilder {
	var extensions: Extension.set;
	def module = Module.new("<test-module>");
	var cache = Canon.globalCache;
	var func: FuncDecl;
	def locals = Vector<(ValueType, u32)>.new();
	var num_locals: int;
	private var func_index: int;
	private var sig_index: int;

	new() {
		var sig = SigCache.v_i.dup();
		sig_index = module.heaptypes.length;
		module.addDecl(sig);

		func_index = module.functions.length;
		module.addDecl(func = FuncDecl.new(sig_index));
	}
	def sig(sig: SigDecl) -> this {
		var ns = sig.dup();
		ns.heaptype_index = sig_index;
		module.heaptypes[sig_index] = ns;

		var nf = FuncDecl.new(sig_index);
		nf.func_index = func_index;
		nf.sig = ns;
		module.functions[func_index] = func = nf;
	}
	def sig0(params: Array<ValueType>, results: Array<ValueType>) -> this {
		sig(SigDecl.new(true, ValueTypes.NO_HEAPTYPES, params, results));
	}
	def addSig(sig: SigDecl) -> SigDecl {
		if (u32.view(sig.heaptype_index) >= module.heaptypes.length || module.heaptypes[sig.heaptype_index] != sig) {
			sig = sig.dup();
			module.addDecl(sig);
			return sig;
		}
		return sig;
	}
	def newFunc(sig: SigDecl) -> FuncDecl {
		addSig(sig);
		var func = FuncDecl.new(sig.heaptype_index);
		module.addDecl(func);
		return func;
	}
	def newSig(params: Array<ValueType>, results: Array<ValueType>) -> SigDecl {
		var sig = SigDecl.new(true, ValueTypes.NO_HEAPTYPES, params, results);
		sig = SigDecl.!(cache.doOne(sig));
		module.addDecl(sig);
		return sig;
	}
	def newStruct(field_types: Array<StorageType>) -> StructDecl {
		var decl = StructDecl.new(true, ValueTypes.NO_HEAPTYPES, field_types);
		decl = StructDecl.!(cache.doOne(decl));
		module.addDecl(decl);
		return decl;
	}
	def newStructP(supertypes: Array<StructDecl>, field_types: Array<StorageType>) -> StructDecl {
		var decl = StructDecl.new(true, Arrays.map(supertypes, HeapType.Struct), field_types);
		decl = StructDecl.!(cache.doOne(decl));
		module.addDecl(decl);
		return decl;
	}
	def newArray(elem_types: Array<StorageType>) -> ArrayDecl {
		var decl = ArrayDecl.new(true, ValueTypes.NO_HEAPTYPES, elem_types);
		decl = ArrayDecl.!(cache.doOne(decl));
		module.addDecl(decl);
		return decl;
	}
	def code(raw: Array<byte>) -> this {
		var body = makeBody(raw, this.locals);
		func.setOrigCode(body);
		// XXX: using u16.view because of internal test exceeds maximum
		func.num_locals = u16.view(func.sig.params.length + num_locals);
		BasicTracing.instrumentFunc(module, func);
	}
	def code_op(opcode: Opcode) -> this {
		sig(opcode.sig);
		code(wrap_opcode(opcode)); // XXX: can save a BinBuilder copy here
	}
	def wrap_opcode(opcode: Opcode) -> Array<byte> {
		var code = BinBuilder.new();
		for (i < opcode.sig.params.length) {
			code.put(u8.!(Opcode.LOCAL_GET.code));
			code.put(byte.view(i));
		}
		if (opcode.prefix != 0) {
			code.put(opcode.prefix);
			code.put_u32leb(opcode.code);
		} else {
			code.put(u8.!(opcode.code));
		}
		return code.extract();
	}
	def validate() -> bool {
		var v = CodeValidator.new(extensions,
			Limits.new().set(extensions), module,
			ErrorGen.new(module.filename));
		return CodeValidatorResult.Ok.?(v.validateFunc(func));
	}
	private def makeBody(raw: Array<byte>, locals: Vector<(ValueType, u32)>) -> Array<byte> {
		var copy = BinBuilder.new();
		copy.put_u32leb(u32.!(locals.length));
		for (i < locals.length) {
			var e = locals[i];
			copy.put_u32leb(u32.!(e.1));
			copy.put_ValueType(e.0);
		}
		copy.puta(raw);
		copy.put(u8.!(Opcode.END.code));
		return copy.extract();
	}
	def newGlobal(valtype: ValueType, init: InitExpr) -> GlobalDecl {
		var decl = GlobalDecl.new(valtype, true, init);
		module.addDecl(decl);
		return decl;
	}
	def newImmGlobal(valtype: ValueType, init: InitExpr) -> GlobalDecl {
		var decl = GlobalDecl.new(valtype, false, init);
		module.addDecl(decl);
		return decl;
	}
	def addLocal(typ: ValueType) -> int {
		return addLocals(1, typ);
	}
	def addLocals(count: int, typ: ValueType) -> int {
		var size = locals.length;
		if (size > 0) {
			var last = locals[size-1];
			if (last.0 == typ) {
				locals[size-1] = (last.0, last.1 + u32.!(count));
				var prev = num_locals;
				num_locals += count;
				return func.sig.params.length + prev;
			}
		}
		locals.put((typ, u32.!(count)));
		var prev = num_locals;
		num_locals += count;
		return func.sig.params.length + prev;
	}
	def newFunction(sig: SigDecl, raw: Array<byte>) -> FuncDecl {
		var func = newFunc(addSig(sig));
		func.setOrigCode(makeBody(raw, Vector.new()));
		func.num_locals = u16.!(sig.params.length);
		BasicTracing.instrumentFunc(module, func);
		return func;
	}
	def addTable(length: u32, offset: int, indices: Array<int>) -> this {
		var decl = TableDecl.new(ValueTypes.FUNCREF, SizeConstraint(false, length, Max.Set(length)));
		module.addDecl(decl);
		if (indices != null) {
			var mode = SegmentMode.Active(decl.table_index, InitExpr.I32(offset));
			var details = ElemDetails.FuncRefs(indices);
			var elem = ElemDecl.new(ValueTypes.FUNCREF, mode, details);
			module.elems.put(elem);
		}
	}
	def addTableOfSize(initial: u32, maximum: Max) -> this {
		var decl = TableDecl.new(ValueTypes.FUNCREF, SizeConstraint(false, initial, maximum));
		module.addDecl(decl);
	}
	def addTableAndElemsOfType(vt: ValueType.Ref) -> (TableDecl, ElemDecl) {
		var decl = TableDecl.new(vt, SizeConstraint(false, 0, Max.None));
		module.addDecl(decl);
		var mode = SegmentMode.Active(decl.table_index, InitExpr.I32(0));
		var details = ElemDetails.Exprs([]);
		var elem = ElemDecl.new(vt, mode, details);
		elem.elem_index = module.elems.length;
		module.elems.put(elem);
		return (decl, elem);
	}
	def addMemory(initial: u32, maximum: Max) -> this {
		var decl = MemoryDecl.new(SizeConstraint(false, initial, maximum), false, BpConstants.log2_WASM_PAGE_SIZE);
		module.addDecl(decl);
	}
	def addData(offset: int, raw: Array<byte>) -> this {
		var mode = SegmentMode.Active(0, InitExpr.I32(offset));
		var data = DataDecl.new(mode, raw);
		module.data.put(data);
	}
	def addPassiveData(raw: Array<byte>) -> this {
		var data = DataDecl.new(SegmentMode.Passive, raw);
		module.data.put(data);
	}
	def addPassiveElems(indices: Array<int>) -> this {
		var details = ElemDetails.FuncRefs(indices);
		var elem = ElemDecl.new(ValueTypes.FUNCREF, SegmentMode.Passive, details);
		module.elems.put(elem);
	}
	def addCodeNV(func: FuncDecl, raw: Array<byte>) {
		var body = makeBody(raw, Vector.new());
		func.setOrigCode(body);
		BasicTracing.instrumentFunc(module, func);
		func.num_locals = u16.!(func.sig.params.length);
	}
	def addCodeV(func: FuncDecl, raw: Array<byte>) {
		return addCodeV_extra_raw(func, makeBody(raw, Vector.new()));
	}
	def addCodeV_extra_raw(func: FuncDecl, body: Array<byte>) {
		func.setOrigCode(body);
		BasicTracing.instrumentFunc(module, func);
		var limits = Limits.new().set(extensions);
		var err = ErrorGen.new("ModuleBuilder.v3");
		var cv = CodeValidator.new(extensions, limits, module, err);
		cv.validate(func, DataReader.new(func.orig_bytecode));
		Execute.tiering.onFuncValidationFinish(module, func, err);
		if (err.error()) {
			System.error("ModuleBuilderError", Strings.format2("expected valid code, got error @%d %s", err.error_pos, err.error_msg));
		}
	}
}
