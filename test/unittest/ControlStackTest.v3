// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("ctlstack:", _, ControlStackTester.new, _);
def X_ = void(
	T("count0", test_count0),
	T("br0", test_br0),
	T("br1", test_br1),
	T("br2", test_br2),
	T("br_if0", test_br_if0),
	T("unreach", test_unreach),
	T("return", test_return),
	T("loop0", test_loop0),
	T("loop1", test_loop1),
	T("loop2", test_loop2),
	T("if0", test_if0),
	T("if1", test_if1),
	T("if2", test_if2),
	T("if_unreach0", test_if_unreach0),
	T("if_unreach1", test_if_unreach1),
	()
);

def verbose = false;

class ControlStackTester(t: Tester) extends ModuleBuilder {
	def test_count(counts: Array<(int, int, int)>) {
		var cs = newControlPathCounter();
		var bi = BytecodeIterator.new().reset(func);
		bi.current();
		var i = 0;
		var tracer = InstrTracer.new();
		while (bi.more()) {
			if (verbose) {
				Trace.OUT.mark().put1("+%d ", bi.pc).ljustify_mark(7);
				Trace.OUT.mark();
				bi.traceOrig(Trace.OUT, module, tracer);
				Trace.OUT.ljustify_mark(Opcodes.longestName);
				Trace.OUT.put2(" cur=%d, label=%d", counts[i].1, counts[i].2);
				Trace.OUT.ln();
			}

			cs.pc = bi.pc;
			if (i >= counts.length) return t.fail2("expected at least %d entries, got %d", i + 1, counts.length);
			check_count(counts[i], cs);
			if (!t.ok) return;
			bi.dispatch(cs);
			bi.next();
			cs.pc = bi.pc;
			i++;
		}
		check_count(counts[i], cs);
	}
	def check_count(expected: (int, int, int), cs: ControlStack<int>) {
		if (expected.0 != cs.pc) t.fail2("expected pc=%d, got=%d", expected.0, cs.pc);
		if (expected.1 != cs.block) t.fail2("expected cur=%d, got=%d", expected.1, cs.block);
		var e = cs.getTopEntry();
		if (e != null && expected.2 != e.label) t.fail2("expected label=%d, got=%d", expected.2, e.label);
	}
	def test_count2(instrs: Array<(Array<byte>, int, int)>, end: (int, int), last: int) {
		var buf = Vector<byte>.new();
		var expected = Array<(int, int, int)>.new(instrs.length + 2);
		var pc = 1;
		for (i < instrs.length) {
			var e = instrs[i];
			buf.putr(e.0);
			expected[i] = (pc, e.1, e.2);
			pc += e.0.length;
		}
		expected[instrs.length] = (pc, end.0, end.1);
		expected[instrs.length + 1] = (pc + 1, last, 0);
		code(buf.extract());
		test_count(expected);
	}
}

def test_count0(t: ControlStackTester) {
	t.test_count2([], (1, 0), 1);
}

def test_br0(t: ControlStackTester) {
	t.test_count2([
		([u8.!(Opcode.BR.code), 0], 1, 0)
	],
	(0, 1),
	1);
}

def test_br1(t: ControlStackTester) {
	t.test_count2([
		([u8.!(Opcode.BLOCK.code), EMPTY],	1, 0),
		([u8.!(Opcode.BR.code), 1],		1, 0),
		([u8.!(Opcode.END.code)],		0, 0)
	],
	(0, 1),
	1);
}

def test_br2(t: ControlStackTester) {
	t.test_count2([
		([u8.!(Opcode.BLOCK.code), EMPTY],	1, 0),
		([u8.!(Opcode.BR.code), 0],		1, 0),
		([u8.!(Opcode.END.code)],		0, 1)
	],
	(1, 0),
	1);
}

def test_br_if0(t: ControlStackTester) {
	t.test_count2([
		([u8.!(Opcode.I32_CONST.code), 0],	1, 0),
		([u8.!(Opcode.BR_IF.code), 0],	1, 0),
		([u8.!(Opcode.I32_CONST.code), 0],	1, 1),
		([u8.!(Opcode.BR_IF.code), 0],	1, 1)
	],
	(1, 2),
	3);
}

def test_unreach(t: ControlStackTester) {
	t.test_count2([
		([u8.!(Opcode.UNREACHABLE.code)], 1, 0)
	],
	(0, 0),
	0);
}

def test_return(t: ControlStackTester) {
	t.test_count2([
		([u8.!(Opcode.RETURN.code)], 1, 0)
	],
	(0, 0),
	0);
}

def test_loop0(t: ControlStackTester) {
	t.test_count2([
		([u8.!(Opcode.LOOP.code), EMPTY],	1, 0),
		([u8.!(Opcode.NOP.code)],		1, 1),
		([u8.!(Opcode.END.code)],		1, 1)
	],
	(1, 0),
	1
	);
}

def test_loop1(t: ControlStackTester) {
	t.test_count2([
		([u8.!(Opcode.LOOP.code), EMPTY],	1, 0),
		([u8.!(Opcode.I32_CONST.code), 0],	1, 1),
		([u8.!(Opcode.BR_IF.code), 0],	1, 1),
		([u8.!(Opcode.NOP.code)],		1, 2),
		([u8.!(Opcode.END.code)],		1, 2)
	],
	(1, 0),
	1
	);
}

def test_loop2(t: ControlStackTester) {
	t.test_count2([
		([u8.!(Opcode.LOOP.code), EMPTY],	1, 0),
		([u8.!(Opcode.I32_CONST.code), 0],	1, 1),
		([u8.!(Opcode.BR_IF.code), 0],	1, 1),
		([u8.!(Opcode.NOP.code)],		1, 2),
		([u8.!(Opcode.UNREACHABLE.code)],	1, 2),
		([u8.!(Opcode.END.code)],		0, 2)
	],
	(0, 0),
	0
	);
}

def EMPTY = BpTypeCode.EmptyBlock.code;

def test_if0(t: ControlStackTester) {
	t.test_count2([
		([u8.!(Opcode.LOCAL_GET.code), 0],	1, 0),
		([u8.!(Opcode.IF.code), EMPTY],	1, 0),
		([u8.!(Opcode.NOP.code)], 		1, 0),
		([u8.!(Opcode.ELSE.code)],		1, 0),
		([u8.!(Opcode.NOP.code)],		1, 1),
		([u8.!(Opcode.END.code)],		1, 1)
	],
	(2, 0),
	2);
}

def test_if1(t: ControlStackTester) {
	t.test_count2([
		([u8.!(Opcode.LOCAL_GET.code), 0],	1, 0),
		([u8.!(Opcode.IF.code), EMPTY],	1, 0),
		([u8.!(Opcode.NOP.code)], 		1, 0),
		([u8.!(Opcode.END.code)],		1, 0)
	],
	(2, 0),
	2);
}

def test_if2(t: ControlStackTester) {
	t.test_count2([
		([u8.!(Opcode.LOCAL_GET.code), 0],	1, 0),
		([u8.!(Opcode.IF.code), EMPTY],	1, 0),
		([u8.!(Opcode.UNREACHABLE.code)], 	1, 0),
		([u8.!(Opcode.END.code)],		0, 0)
	],
	(1, 0),
	1);
}

def test_if_unreach0(t: ControlStackTester) {
	t.test_count2([
		([u8.!(Opcode.LOCAL_GET.code), 0],	1, 0),
		([u8.!(Opcode.IF.code), EMPTY],	1, 0),
		([u8.!(Opcode.UNREACHABLE.code)], 	1, 0),
		([u8.!(Opcode.NOP.code)], 		0, 0),
		([u8.!(Opcode.ELSE.code)],		0, 0),
		([u8.!(Opcode.NOP.code)],		1, 0),
		([u8.!(Opcode.END.code)],		1, 0)
	],
	(1, 0),
	1);
}

def test_if_unreach1(t: ControlStackTester) {
	t.test_count2([
		([u8.!(Opcode.LOCAL_GET.code), 0], 			1, 0),
		([u8.!(Opcode.IF.code), BpTypeCode.EmptyBlock.code],	1, 0),
		([u8.!(Opcode.NOP.code)], 				1, 0),
		([u8.!(Opcode.ELSE.code)],				1, 0),
		([u8.!(Opcode.UNREACHABLE.code)], 			1, 1),
		([u8.!(Opcode.NOP.code)],				0, 1),
		([u8.!(Opcode.END.code)],				0, 1)
	],
	(1, 0),
	1);
}

def newControlPathCounter() -> ControlStack<int> {
	var cs = ControlStack<int>.new();
	cs.newLabel = cs.newBlock = newCount;
	cs.splitBlock = splitCount;
	cs.mergeBlock = mergeCount;
	cs.reset();
	cs.block = 1;
	return cs;
}
def newCount(cs: ControlStack<int>) -> int {
	return 0;
}
def splitCount(cs: ControlStack<int>, a: int) -> (int, int) {
	return if(cs.isUnreachable(), (0, 0), (a, a));
}
def mergeCount(cs: ControlStack<int>, a: int, b: int) -> int {
	return if(cs.isUnreachable(), b, a + b);
}
