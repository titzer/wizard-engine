// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("mem:", _, MemoryTester.new, _);
def X_ = void(
	T("alloc", test_alloc),
	T("access_u8", test_access_u8),
	T("access_u16", test_access_u16),
	T("access_u32", test_access_u32),
	T("access_u64", test_access_u64),
	T("copyD", test_copyD),
	T("fill", test_fill),
	T("copyM1", test_copyM1),
	T("copyM2", test_copyM2),
	T("grow1", test_grow1),
	T("grow2", test_grow2),
	T("grow3", test_grow3),
	()
);

def PAGE_SIZE = 65536u;

class MemoryTester(t: Tester) {
	var mem: Memory;
	def assert_alloc(initial: u32, max: Max) -> Memory {
		var decl = MemoryDecl.new(SizeConstraint(false, initial, max), false, BpConstants.log2_WASM_PAGE_SIZE);
		mem = Target.newMemory(decl);
		if (mem.oom) t.fail("failed to allocate memory");
		return mem;
	}
	def assert_mem(offset: u32, expected: Array<byte>) {
		if (mem == null) return t.fail("memory is null");
		for (i < expected.length) {
			var addr = int.!(offset) + i;
			var got = mem.read_u8(0, u32.view(addr)).result;
			if (expected[i] != got) return t.fail3("expected mem[%x] = %x, got %x", addr, expected[i], got);
		}
	}
	def assert_oob(reason: TrapReason) {
		if (reason != TrapReason.MEM_OUT_OF_BOUNDS) t.fail1("expected out of bounds, got %s", reason.name);
	}
	def assert_ok(reason: TrapReason) {
		if (reason != TrapReason.NONE) t.fail1("expected no trap, got %s", reason.name);
	}
	def assert_ok2<T>(tu: MaybeTrap<T>) -> T {
		if (tu.reason != TrapReason.NONE) t.fail1("expected no trap, got %s", tu.reason.name);
		return tu.result;
	}
	def deallocate() {
		if (mem != null) mem.deallocate();
		mem = null;
	}
}

def test_alloc(t: MemoryTester) {
	t.assert_alloc(1, Max.None);
	t.assert_mem(0, [0, 0, 0, 0]);
	t.assert_mem(PAGE_SIZE - 4, [0, 0, 0, 0]);
	t.t.assert_eq(1u, t.mem.num_pages);
	t.t.assert_eq(PAGE_SIZE, t.mem.num_bytes);
	t.deallocate();
}

def test_access_u8(t: MemoryTester) {
	t.assert_alloc(1, Max.None);
	t.mem.write_u8(0, 0, 11);
	t.assert_mem(0, [11]);

	var d1 = ['\x99'];
	var d2 = ['\x99', '\x99'];
	var d4 = ['\x99', '\x99', '\x99', '\x99'];
	var d8 = ['\x99', '\x99', '\x99', '\x99', '\x99', '\x99', '\x99', '\x99'];
	for (i < 100u) {
		var v1 = u8.view(100u + i);
		d1[0] = v1;

		t.mem.write_u8(i, 0, v1);
		t.assert_mem(i, d1);

		t.mem.write_u8(0, i + 200, v1);
		t.assert_mem(i + 200, d1);
		t.t.assert_eq(v1, t.mem.read_u8(5, i + 195).result);
	}
	t.deallocate();
}

def test_access_u16(t: MemoryTester) {
	t.assert_alloc(1, Max.None);
	t.mem.write_u8(0, 0, 11);
	t.assert_mem(0, [11]);

	var d2 = ['\x99', '\x99'];
	for (i < 100u) {
		var v2 = u16.view(9999u + i);
		d2[0] = u8.view(v2);
		d2[1] = u8.view(v2 >> 8);
		t.mem.write_u16(100, i + 200, v2);
		t.assert_mem(i + 300, d2);
		var got = t.assert_ok2(t.mem.read_u16(105, i + 195));
		t.t.assert_eq(v2, got);
	}
	t.deallocate();
}

def test_access_u32(t: MemoryTester) {
	t.assert_alloc(1, Max.None);
	t.mem.write_u8(0, 0, 11);
	t.assert_mem(0, [11]);

	var d4 = ['\x99', '\x99', '\x99', '\x99'];
	for (i < 100u) {
		var v4 = u32.view(0x01020304u * i);
		d4[0] = u8.view(v4);
		d4[1] = u8.view(v4 >> 8);
		d4[2] = u8.view(v4 >> 16);
		d4[3] = u8.view(v4 >> 24);
		t.mem.write_u32(600, i + 200, v4);
		t.assert_mem(i + 800, d4);
		var got = t.assert_ok2(t.mem.read_u32(205, i + 595));
		t.t.assert_eq(v4, got);
	}
	t.deallocate();
}

def test_access_u64(t: MemoryTester) {
	t.assert_alloc(1, Max.None);
	t.mem.write_u8(0, 0, 11);
	t.assert_mem(0, [11]);

	var d8 = ['\x99', '\x99', '\x99', '\x99', '\x99', '\x99', '\x99', '\x99'];
	for (i < 100u) {
		var v8 = 0x0102030405060708u * i;
		d8[0] = u8.view(v8);
		d8[1] = u8.view(v8 >> 8);
		d8[2] = u8.view(v8 >> 16);
		d8[3] = u8.view(v8 >> 24);
		d8[4] = u8.view(v8 >> 32);
		d8[5] = u8.view(v8 >> 40);
		d8[6] = u8.view(v8 >> 48);
		d8[7] = u8.view(v8 >> 56);
		t.mem.write_u64(700, i + 200, v8);
		t.assert_mem(i + 900, d8);
		var got = t.assert_ok2(t.mem.read_u64(405, i + 495));
		t.t.assert_eq(v8, got);
	}
	t.deallocate();
}

def test_copyD(t: MemoryTester) {
	t.assert_alloc(1, Max.None);
	var data: Array<byte> = [0x99, 0x88, 0x77];

	t.assert_ok(t.mem.copyIn(3, data, 0, 3));
	t.assert_mem(3, data);

	t.assert_ok(t.mem.copyIn(PAGE_SIZE - 3, data, 0, 3));
	t.assert_mem(PAGE_SIZE - 3, data);

	t.assert_oob(t.mem.copyIn(PAGE_SIZE - 2, data, 0, 3));
	t.assert_oob(t.mem.copyIn(PAGE_SIZE, data, 0, 3));
	t.assert_oob(t.mem.copyIn(100u + PAGE_SIZE, data, 0, 3));
	t.deallocate();
}

def test_fill(t: MemoryTester) {
	t.assert_alloc(1, Max.None);

	t.assert_ok(t.mem.fill(0, 99, 0));
	t.assert_ok(t.mem.fill(PAGE_SIZE, 88, 0));
	t.assert_ok(t.mem.fill(0, 11, PAGE_SIZE));
	t.assert_mem(0, [11, 11]);
	t.assert_mem(1550, [11, 11]);
	t.assert_mem(PAGE_SIZE - 2, [11, 11]);

	t.assert_oob(t.mem.fill(0, 12, PAGE_SIZE + 1));
	t.assert_oob(t.mem.fill(PAGE_SIZE, 13, 1));
	t.assert_oob(t.mem.fill(PAGE_SIZE + 1, 14, 1));

	t.assert_ok(t.mem.fill(101, 99, 11));
	t.assert_mem(100, [11, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 11]);

	t.deallocate();
}

def test_copyM1(t: MemoryTester) {
	var m1 = t.assert_alloc(1, Max.None);
	var m2 = t.assert_alloc(2, Max.None);

	def A = '\x11', B = '\x22', C = '\x33';

	t.assert_ok(m1.copyM(0, m1, 0, 0));
	t.assert_ok(m1.copyM(1, m1, 0, 0));
	t.assert_ok(m1.copyM(0, m1, 1, 0));
	t.assert_ok(m1.copyM(0, m1, 0, 1));

	t.assert_ok(m1.copyM(0, m1, 0, PAGE_SIZE));
	t.assert_oob(m1.copyM(1, m1, 0, PAGE_SIZE));
	t.assert_oob(m1.copyM(0, m1, 0, PAGE_SIZE+1));

	t.assert_ok(m1.copyM(0, m2, 1, PAGE_SIZE));
	t.assert_ok(m1.copyM(0, m2, PAGE_SIZE, PAGE_SIZE));
	t.assert_oob(m1.copyM(0, m2, PAGE_SIZE, PAGE_SIZE+1));

	t.assert_ok(m1.fill(0, A, PAGE_SIZE));
	t.assert_ok(m2.fill(0, B, PAGE_SIZE));
	t.assert_ok(m2.fill(PAGE_SIZE, C, PAGE_SIZE));

	t.assert_ok(m1.copyM(1, m2, 2, 11));
	t.mem = m1;
	t.assert_mem(0, [A, B, B, B, B, B, B, B, B, B, B, B, A]);
	t.assert_ok(m1.copyM(2, m2, PAGE_SIZE, 9));
	t.assert_mem(0, [A, B, C, C, C, C, C, C, C, C, C, B, A]);
	t.assert_ok(m1.copyM(4, m1, 0, 5));
	t.assert_mem(0, [A, B, C, C, A, B, C, C, C, C, C, B, A]);

	m1.deallocate();
	m2.deallocate();
}

def test_copyM2(t: MemoryTester) {
	var m1 = t.assert_alloc(1, Max.None);
	def copy = m1.copyM(_, m1, _, _);
	var init: Array<byte> = [33, 44, 55];
	m1.copyIn(3, init, 0, 3);

	t.assert_ok(copy(0, 0, 0));
	t.assert_mem(3, init);
	t.assert_ok(copy(0, 2, 5));
	t.assert_mem(0, [0, 33, 44, 55, 0, 55, 0]);
	t.assert_ok(copy(7, 3, 3));
	t.assert_mem(0, [0, 33, 44, 55, 0, 55, 0, 55, 0, 55]);
	t.assert_ok(copy(65533, 1, 3));
	t.assert_mem(65533, [33, 44, 55]);

	t.assert_oob(copy(65533, 3, 4));
	t.assert_oob(copy(65535, 3, 2));
	t.assert_oob(copy(3, 65533, 4));
	t.assert_oob(copy(3, 65535, 2));
	t.assert_oob(copy(0xFFFFFFF0, 3, 4));
	t.assert_oob(copy(0xFFFFFFF0, 3, 0xF0));
	t.assert_oob(copy(3, 0xFFFFFFF0, 0xF0));
	m1.deallocate();
}

def test_grow1(t: MemoryTester) {
	var m1 = t.assert_alloc(1, Max.None);
	var v8 = '\x88';
	for (i < 5u) {
		var size = 1u + i;
		t.t.assert_eq(size, m1.num_pages);
		for (j < size) {
			t.assert_ok(m1.write_u8(0, j * PAGE_SIZE, v8));
			t.t.assert_eq(v8, t.assert_ok2(m1.read_u8(0, j * PAGE_SIZE)));
			v8++;
		}
		var r = m1.grow(1);
		t.t.assert_eq(size, u32.view(r));
	}
	t.deallocate();
}

def test_grow2(t: MemoryTester) {
	var m1 = t.assert_alloc(1, Max.Set(2));
	t.t.assert_eq(1, m1.grow(1));
	t.t.assert_eq(-1, m1.grow(1));
	t.deallocate();
}

def test_grow3(t: MemoryTester) {
	var m1 = t.assert_alloc(1, Max.None);
	t.t.assert_eq(1, m1.grow(1));
	t.t.assert_eq(-1, m1.grow(Target.limit_memory_size >> 16));
	t.deallocate();
}
