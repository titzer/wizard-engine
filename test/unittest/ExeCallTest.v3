// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def X_ = TestTiers.addTests([
	("call0", test_call0),
	("call1", test_call1),
	("call2", test_call2),
	("callN", test_callN),
	("call_trap", test_call_trap),
	("call_indirect", test_call_indirect),
	("call_indirect_extended", test_call_indirect_extended),
	("call_indirect_subtype", test_call_indirect_subtype),
	("call_host", test_call_host),
	("call_host_throw", test_call_host_throw),
	("reenter", test_reenter),
	("call.ref", test_call_ref),
	("rcall1", test_rcall1),
	("rcall2", test_rcall2),
	("rcall3", test_rcall3),
	("rcallN", test_rcallN),
	("rcall_host", test_rcall_host),
	("rcall_host2", test_rcall_host2),
	("rcall_indirect", test_rcall_indirect),
	("rcall_indirect_subtype", test_rcall_indirect_subtype),
	("rcall_ref", test_rcall_ref),
	("rcall_host_rcall_wasm", test_rcall_host_rcall_wasm),
	("host_tail_call1", test_host_tail_call1),
	("host_tail_call2", test_host_tail_call2),
	("stack_overflow1", test_stack_overflow1),
	("stack_overflow2", test_stack_overflow2),
	("force_gc1", test_force_gc1),
	("force_gc2", test_force_gc2)
]);

def test_call0(i: ExeTester) {
	var f17 = byte.!(i.newFunction(SigCache.v_v, []).func_index);
	i.code([Opcode.I32_CONST.code, 17, Opcode.CALL.code, f17]).noargs().assert2_i(17);
}
def test_call1(i: ExeTester) {
	var f17 = byte.!(i.newFunction(SigCache.v_i, [Opcode.I32_CONST.code, 17]).func_index);
	var f18 = byte.!(i.newFunction(SigCache.v_i, [Opcode.I32_CONST.code, 18]).func_index);
	var f19 = byte.!(i.newFunction(SigCache.v_i, [Opcode.I32_CONST.code, 19]).func_index);
	i.code([Opcode.CALL.code, f17]).noargs().assert2_i(17);
	i.code([Opcode.CALL.code, f18]).noargs().assert2_i(18);
	i.code([Opcode.CALL.code, f19]).noargs().assert2_i(19);
}
def test_call2(i: ExeTester) {
	i.sig(SigCache.i_i);
	var f1 = byte.!(i.newFunction(SigCache.i_i, [Opcode.LOCAL_GET.code, 0]).func_index);
	i.code([Opcode.LOCAL_GET.code, 0, Opcode.CALL.code, f1]);
	i.args_i(197).assert2_i(197);
	i.args_i(36).assert2_i(36);
	i.args_i(31337).assert2_i(31337);

	i.sig(SigCache.ii_i);
	var f2 = byte.!(i.newFunction(SigCache.ii_i, [Opcode.LOCAL_GET.code, 0]).func_index);
	var f3 = byte.!(i.newFunction(SigCache.ii_i, [Opcode.LOCAL_GET.code, 1]).func_index);
	i.code([Opcode.LOCAL_GET.code, 0,
		Opcode.LOCAL_GET.code, 1,
		Opcode.CALL.code, f2]);
	i.args_ii(22, 33).assert2_i(22);
	i.args_ii(44, 55).assert2_i(44);
	i.code([Opcode.LOCAL_GET.code, 0,
		Opcode.LOCAL_GET.code, 1,
	Opcode.CALL.code, f3]);
	i.args_ii(77, 88).assert2_i(88);
	i.args_ii(88, 99).assert2_i(99);
}
def test_callN(i: ExeTester) {
	var I = ValueType.I32;
	var sig_iiiii_i = ValueTypes.newSig([I, I, I, I, I], [I]);
	i.sig(sig_iiiii_i);
	for (j < byte.!(5)) {
		var body = [Opcode.LOCAL_GET.code, j];
		var fx = byte.!(i.newFunction(sig_iiiii_i, body).func_index);
		i.codev([Opcode.LOCAL_GET.code, 0,
			Opcode.LOCAL_GET.code, 1,
			Opcode.LOCAL_GET.code, 2,
			Opcode.LOCAL_GET.code, 3,
			Opcode.LOCAL_GET.code, 4,
			Opcode.CALL.code, fx]);
		var args: Array<Value> = [Value.I32(j + 100u),
				Value.I32(j + 200u),
				Value.I32(j + 300u),
				Value.I32(j + 400u),
				Value.I32(j + 500u)];
		var result = args[j];
		i.argsN(args).assert2_val(result);
	}
}
def test_call_trap(i: ExeTester) {
	var f17 = byte.!(i.newFunction(SigCache.v_v, [Opcode.UNREACHABLE.code]).func_index);
	i.code([Opcode.I32_CONST.code, 17, Opcode.CALL.code, f17])
		.noargs().assert2_trap(TrapReason.UNREACHABLE);
}
def test_call_indirect(i: ExeTester) {
	i.sig(SigCache.ii_i);
	var f1 = i.newFunction(SigCache.i_i, [Opcode.I32_CONST.code, 11]);
	var f2 = i.newFunction(SigCache.i_i, [
		Opcode.LOCAL_GET.code, 0,
		Opcode.I32_CONST.code, 22,
		Opcode.I32_ADD.code
	]);
	var f3 = i.newFunction(SigCache.v_v, []);
	i.addTable(7, 0, [f1.func_index, f2.func_index, f3.func_index, f1.func_index, f2.func_index, f3.func_index]);
	i.codev([Opcode.LOCAL_GET.code, 0,
		Opcode.LOCAL_GET.code, 1,
		Opcode.CALL_INDIRECT.code, byte.!(f1.sig_index), 0]);
	i.args_ii(0, 0).assert2_i(11);
	i.args_ii(0, 1).assert2_i(22);
	i.args_ii(44, 1).assert2_i(66);
	i.args_ii(0, 3).assert2_i(11);
	i.args_ii(0, 4).assert2_i(22);
	i.args_ii(49, 4).assert2_i(71);
	i.args_uu(0, 2).assert2_trap(TrapReason.FUNC_SIG_MISMATCH);
	i.args_uu(0, 5).assert2_trap(TrapReason.FUNC_SIG_MISMATCH);
	i.args_uu(0, 6).assert2_trap(TrapReason.FUNC_INVALID);
	i.args_uu(0, 7).assert2_trap(TrapReason.FUNC_INVALID);
}
def test_call_indirect_extended(i: ExeTester) {
	i.sig(SigCache.ii_i);
	var f1 = i.newFunction(SigCache.i_i, [Opcode.I32_CONST.code, 11]);
	var f2 = i.newFunction(SigCache.i_i, [
		Opcode.LOCAL_GET.code, 0,
		Opcode.I32_CONST.code, 22,
		Opcode.I32_ADD.code
	]);
	var f3 = i.newFunction(SigCache.v_v, []);
	i.addTable(7, 0, [f1.func_index, f2.func_index, f3.func_index, f1.func_index, f2.func_index, f3.func_index]);
	i.codev([Opcode.LOCAL_GET.code, 0,
		Opcode.LOCAL_GET.code, 1,
		Opcode.CALL_INDIRECT.code, byte.!(f1.sig_index | 0x80), 0x80, 0, 0x80, 0x80, 0]);
	i.args_ii(0, 0).assert2_i(11);
	i.args_ii(0, 1).assert2_i(22);
	i.args_ii(44, 1).assert2_i(66);
	i.args_ii(0, 3).assert2_i(11);
	i.args_ii(0, 4).assert2_i(22);
	i.args_ii(49, 4).assert2_i(71);
	i.args_uu(0, 2).assert2_trap(TrapReason.FUNC_SIG_MISMATCH);
	i.args_uu(0, 5).assert2_trap(TrapReason.FUNC_SIG_MISMATCH);
	i.args_uu(0, 6).assert2_trap(TrapReason.FUNC_INVALID);
	i.args_uu(0, 7).assert2_trap(TrapReason.FUNC_INVALID);
}
def test_call_indirect_subtype(i: ExeTester) {
	i.sig(SigCache.ii_i);
	var sig_i_i_sub = Canon.sig(SigDecl.new(false, [HeapType.Func(SigCache.i_i)], SigCache.arr_i, SigCache.arr_i));
	i.addSig(sig_i_i_sub);

	var f1 = i.newFunction(SigCache.i_i, [Opcode.I32_CONST.code, 11]);
	var f2 = i.newFunction(SigCache.i_i, [
		Opcode.LOCAL_GET.code, 0,
		Opcode.I32_CONST.code, 22,
		Opcode.I32_ADD.code
	]);
	var f3 = i.newFunction(sig_i_i_sub, [
		Opcode.LOCAL_GET.code, 0,
		Opcode.I32_CONST.code, 33,
		Opcode.I32_SUB.code
	]);
	var f4 = i.newFunction(SigCache.v_v, []);
	i.addTable(7, 0, [f1.func_index, f2.func_index, f3.func_index, f4.func_index, f1.func_index, f2.func_index, f3.func_index]);
	i.codev([Opcode.LOCAL_GET.code, 0,
		Opcode.LOCAL_GET.code, 1,
		Opcode.CALL_INDIRECT.code, byte.!(f1.sig_index), 0]);
	i.args_ii(0, 0).assert2_i(11);
	i.args_ii(0, 4).assert2_i(11);
	i.args_ii(0, 1).assert2_i(22);
	i.args_ii(0, 5).assert2_i(22);
	i.args_ii(0, 2).assert2_i(-33);
	i.args_ii(0, 6).assert2_i(-33);
	i.args_ii(44, 1).assert2_i(66);
	i.args_ii(88, 2).assert2_i(55);
	i.args_uu(0, 3).assert2_trap(TrapReason.FUNC_SIG_MISMATCH);
	i.args_uu(0, 7).assert2_trap(TrapReason.FUNC_INVALID);
	i.args_uu(0, 8).assert2_trap(TrapReason.FUNC_INVALID);
}
def test_call_host_callback(args: Range<Value>) -> HostResult {
	var a = Values.unbox_i(args[0]), b = Values.unbox_i(args[1]);
	return HostResult.Value1(Values.box_i(99 - a - b));
}
def test_call_host(i: ExeTester) {
	var sig = i.newSig(SigCache.arr_ii, SigCache.arr_i); // TODO: signature canonicalization problem
	i.sig(sig);
	var fd = i.newFunc(sig);
	i.module.addImport("", "", fd);
	i.imports = [HostFunction.new("test_call_host_callback", sig, test_call_host_callback)];
	i.code([Opcode.I32_CONST.code, 33,
		Opcode.LOCAL_GET.code, 0,
		Opcode.LOCAL_GET.code, 1,
		Opcode.CALL.code, byte.!(fd.func_index)]);

	i.args_ii(44, 33).assert2_i(22);
	i.args_ii(1090909, 0xFAAA0123).assert2_i(88431075);
}

def host_throw(args: Range<Value>) -> HostResult {
	return HostResult.Throw(Trap.new(TrapReason.HOST, null, null));
}

def test_call_host_throw(i: ExeTester) {
	var sig = i.newSig(SigCache.arr_ii, SigCache.arr_i); // TODO: signature canonicalization problem
	i.sig(sig);
	var fd = i.newFunc(sig);
	i.module.addImport("", "", fd);
	i.imports = [HostFunction.new("test_call_host_throw", sig, host_throw)];
	i.code([Opcode.I32_CONST.code, 33,
		Opcode.LOCAL_GET.code, 0,
		Opcode.LOCAL_GET.code, 1,
		Opcode.CALL.code, byte.!(fd.func_index)]);

	i.args_uu(44, 9999).assert2_trap_at(TrapReason.HOST, [7]);
	i.args_uu(4224, 911999).assert2_trap_at(TrapReason.HOST, [7]);
}

def test_reenter_wasm(wf: WasmFunction, args: Range<Value>) -> HostResult {
	var result = Execute.call(wf, args);
	match (result) {
		Value(vals) => {
			if (vals.length == 0) return HostResult.Value0;
			if (vals.length == 1) return HostResult.Value1(vals[0]);
			return HostResult.ValueN(vals);
		}
		Throw(thrown) => {
			return HostResult.Throw(thrown);
		}
		Switch => {
			// UNREACHABLE as `call` already wraps invalid suspends into throwable
			// return HostResult.Throw(info.parent.trap(TrapReason.INVALID_SUSPEND));
			return HostResult.Value0;
		}
	}
}

def test_reenter(i: ExeTester) {
	var sig = i.newSig(SigCache.arr_i, SigCache.arr_i);
	i.sig(sig);
	var sub17 = i.newFunction(sig, [Opcode.I32_CONST.code, 17, Opcode.LOCAL_GET.code, 0, Opcode.I32_SUB.code]);
	i.code([Opcode.I32_CONST.code, 0]);
	var t = i.run(array_u(99)); // run the first test just to get an instance+function
	var wf = WasmFunction.!(t.0.functions[sub17.func_index]);

	var fd = i.newFunc(sig);
	i.module.addImport("", "", fd);
	i.imports = [HostFunction.new("test_reenter_wasm", sig, test_reenter_wasm(wf, _))];
	i.code([Opcode.LOCAL_GET.code, 0,
		Opcode.CALL.code, byte.!(fd.func_index)]);

	i.args_i(44).assert2_u(4294967269u);
	i.args_i(1090909).assert2_u(4293876404u);
}

def test_call_ref(i: ExeTester) {
	var sig_v_i = i.addSig(SigCache.v_i);
	var f17 = i.newFunction(SigCache.v_i, [Opcode.I32_CONST.code, 17]);
	i.code([
		Opcode.REF_FUNC.code, byte.!(f17.func_index),
		Opcode.CALL_REF.code, heapIndexByte(sig_v_i)
	]);

	i.noargs().assert2_i(17);

	i.code([
		Opcode.REF_NULL.code, BpTypeCode.FUNCREF.code,
		Opcode.CALL_REF.code, heapIndexByte(sig_v_i)
	]);

	i.noargs().assert2_trap(TrapReason.NULL_DEREF);
}

def test_rcall1(i: ExeTester) {
	i.sig(SigCache.v_i);
	var f17 = byte.!(i.newFunction(SigCache.v_i, [Opcode.I32_CONST.code, 17]).func_index);
	var f18 = byte.!(i.newFunction(SigCache.v_i, [Opcode.I32_CONST.code, 18]).func_index);
	var f19 = byte.!(i.newFunction(SigCache.v_i, [Opcode.I32_CONST.code, 19]).func_index);
	i.code([Opcode.RETURN_CALL.code, f17]).noargs().assert2_i(17);
	i.code([Opcode.RETURN_CALL.code, f18]).noargs().assert2_i(18);
	i.code([Opcode.RETURN_CALL.code, f19]).noargs().assert2_i(19);
}
def test_rcall2(i: ExeTester) {
	i.sig(SigCache.i_i);
	var f1 = byte.!(i.newFunction(SigCache.i_i, [Opcode.LOCAL_GET.code, 0]).func_index);
	i.code([Opcode.LOCAL_GET.code, 0, Opcode.RETURN_CALL.code, f1]);
	i.args_i(197).assert2_i(197);
	i.args_i(36).assert2_i(36);
	i.args_i(31337).assert2_i(31337);
}

def test_rcall3(i: ExeTester) {
	i.sig(SigCache.ii_i);
	var f2 = byte.!(i.newFunction(SigCache.ii_i, [Opcode.LOCAL_GET.code, 0]).func_index);
	var f3 = byte.!(i.newFunction(SigCache.ii_i, [Opcode.LOCAL_GET.code, 1]).func_index);
	i.code([Opcode.LOCAL_GET.code, 0,
		Opcode.LOCAL_GET.code, 1,
		Opcode.RETURN_CALL.code, f2,
		Opcode.UNREACHABLE.code]);
	i.args_ii(22, 33).assert2_i(22);
	i.args_ii(44, 55).assert2_i(44);

	i.code([Opcode.LOCAL_GET.code, 0,
		Opcode.LOCAL_GET.code, 1,
		Opcode.RETURN_CALL.code, f3,
		Opcode.UNREACHABLE.code]);
	i.args_ii(77, 88).assert2_i(88);
	i.args_ii(88, 99).assert2_i(99);
}
def test_rcallN(i: ExeTester) {
	var I = ValueType.I32;
	var sig_iiiii_i = ValueTypes.newSig([I, I, I, I, I], [I]);
	i.extensions |= Extension.TAIL_CALL;
	i.sig(sig_iiiii_i);
	for (j < byte.!(5)) {
		var body = [Opcode.LOCAL_GET.code, j];
		var fx = byte.!(i.newFunction(sig_iiiii_i, body).func_index);
		i.codev([Opcode.LOCAL_GET.code, 0,
			Opcode.LOCAL_GET.code, 1,
			Opcode.LOCAL_GET.code, 2,
			Opcode.LOCAL_GET.code, 3,
			Opcode.LOCAL_GET.code, 4,
			Opcode.RETURN_CALL.code, fx,
			Opcode.UNREACHABLE.code]);
		var args: Array<Value> = [Value.I32(j + 100u),
				Value.I32(j + 200u),
				Value.I32(j + 300u),
				Value.I32(j + 400u),
				Value.I32(j + 500u)];
		var result = args[j];
		i.argsN(args).assert2_val(result);
	}
}
def test_rcall_host(i: ExeTester) {
	var sig = i.newSig(SigCache.arr_ii, SigCache.arr_i);
	i.sig(sig);
	var imp = i.newFunc(sig);
	i.module.addImport("", "", imp);
	i.imports = [HostFunction.new("test_call_host_callback", sig, test_call_host_callback)];
	i.code([Opcode.I32_CONST.code, 33,
		Opcode.LOCAL_GET.code, 0,
		Opcode.LOCAL_GET.code, 1,
		Opcode.RETURN_CALL.code, byte.!(imp.func_index)]);

	i.args_ii(44, 33).assert2_i(22);
	i.args_ii(1090909, 0xFAAA0123).assert2_i(88431075);
}
def test_rcall_host2(i: ExeTester) {
	var sig = i.newSig(SigCache.arr_ii, SigCache.arr_i);
	i.sig(sig);
	var imp = i.newFunc(sig);
	i.module.addImport("", "", imp);
	i.imports = [HostFunction.new("test_call_host_callback", imp.sig, test_call_host_callback)];

	var f2 = i.newFunction(SigCache.v_i, [
		Opcode.I32_CONST.code, 66,
		Opcode.I32_CONST.code, 55,
		Opcode.RETURN_CALL.code, byte.!(imp.func_index)
	]);
	i.sig(SigCache.v_i);
	i.code([
		Opcode.CALL.code, byte.!(f2.func_index)]);

	i.noargs().assert2_i(106);
}
def test_rcall_indirect(i: ExeTester) {
	i.sig(SigCache.ii_i);
	i.extensions |= Extension.TAIL_CALL;
	var sig_i_i_sub = Canon.sig(SigDecl.new(false, [HeapType.Func(SigCache.i_i)], SigCache.arr_i, SigCache.arr_i));
	i.addSig(sig_i_i_sub);

	var f1 = i.newFunction(SigCache.i_i, [Opcode.I32_CONST.code, 11]);
	var f2 = i.newFunction(SigCache.i_i, [
		Opcode.LOCAL_GET.code, 0,
		Opcode.I32_CONST.code, 22,
		Opcode.I32_ADD.code
	]);
	var f3 = i.newFunction(sig_i_i_sub, [
		Opcode.LOCAL_GET.code, 0,
		Opcode.I32_CONST.code, 44,
		Opcode.I32_SUB.code
	]);
	var f4 = i.newFunction(SigCache.v_v, []);
	i.addTable(7, 0, [f1.func_index, f2.func_index, f3.func_index, f4.func_index, f1.func_index, f2.func_index, f3.func_index]);
	i.codev([Opcode.LOCAL_GET.code, 0,
		Opcode.LOCAL_GET.code, 1,
		Opcode.RETURN_CALL_INDIRECT.code, byte.!(f1.sig_index), 0,
		Opcode.UNREACHABLE.code]);
	i.args_ii(0, 0).assert2_i(11);
	i.args_ii(0, 4).assert2_i(11);
	i.args_ii(0, 1).assert2_i(22);
	i.args_ii(0, 5).assert2_i(22);
	i.args_ii(0, 2).assert2_i(-44);
	i.args_ii(0, 6).assert2_i(-44);
	i.args_ii(44, 0).assert2_i(11);
	i.args_ii(44, 1).assert2_i(66);
	i.args_ii(44, 2).assert2_i(0);
	i.args_uu(0, 3).assert2_trap(TrapReason.FUNC_SIG_MISMATCH);
	i.args_uu(0, 7).assert2_trap(TrapReason.FUNC_INVALID);
	i.args_uu(0, 8).assert2_trap(TrapReason.FUNC_INVALID);
}
def test_rcall_indirect_subtype(i: ExeTester) {
	i.sig(SigCache.ii_i);
	i.extensions |= Extension.TAIL_CALL;
	var f1 = i.newFunction(SigCache.i_i, [Opcode.I32_CONST.code, 11]);
	var f2 = i.newFunction(SigCache.i_i, [
		Opcode.LOCAL_GET.code, 0,
		Opcode.I32_CONST.code, 22,
		Opcode.I32_ADD.code
	]);
	var f3 = i.newFunction(SigCache.v_v, []);
	i.addTable(7, 0, [f1.func_index, f2.func_index, f3.func_index, f1.func_index, f2.func_index, f3.func_index]);
	i.codev([Opcode.LOCAL_GET.code, 0,
		Opcode.LOCAL_GET.code, 1,
		Opcode.RETURN_CALL_INDIRECT.code, byte.!(f1.sig_index), 0,
		Opcode.UNREACHABLE.code]);
	i.args_ii(0, 0).assert2_i(11);
	i.args_ii(0, 1).assert2_i(22);
	i.args_ii(44, 1).assert2_i(66);
	i.args_ii(0, 3).assert2_i(11);
	i.args_ii(0, 4).assert2_i(22);
	i.args_ii(49, 4).assert2_i(71);
	i.args_uu(0, 2).assert2_trap(TrapReason.FUNC_SIG_MISMATCH);
	i.args_uu(0, 5).assert2_trap(TrapReason.FUNC_SIG_MISMATCH);
	i.args_uu(0, 6).assert2_trap(TrapReason.FUNC_INVALID);
	i.args_uu(0, 7).assert2_trap(TrapReason.FUNC_INVALID);
}
def test_rcall_ref(i: ExeTester) {
	var sig_v_i = i.addSig(SigCache.v_i);
	var f17 = i.newFunction(SigCache.v_i, [Opcode.I32_CONST.code, 17]);
	i.code([
		Opcode.REF_FUNC.code, byte.!(f17.func_index),
		Opcode.RETURN_CALL_REF.code, heapIndexByte(sig_v_i)
	]);

	i.noargs().assert2_i(17);

	i.code([
		Opcode.REF_NULL.code, BpTypeCode.FUNCREF.code,
		Opcode.RETURN_CALL_REF.code, heapIndexByte(sig_v_i)
	]);

	i.noargs().assert2_trap(TrapReason.NULL_DEREF);
}
def test_rcall_host_rcall_wasm(i: ExeTester) {
	var f37: Function;
	var sig = SigCache.i_i;
	{
		var t = ModuleBuilder.new();
		t.sig(sig);
		var c37 = t.newFunction(SigCache.i_i, [
			Opcode.LOCAL_GET.code, 0,
			Opcode.I32_CONST.code, 37,
			Opcode.I32_SUB.code
		]);
		var instance = Instantiator.new(t.extensions, t.module, [], ErrorGen.new("InterpreterTest.v3")).run();
		f37 = instance.functions[c37.func_index];
	}

	sig = i.addSig(sig);
	i.sig(sig);
	var fd = i.newFunc(sig);
	i.module.addImport("", "", fd);
	i.imports = [HostFunction.new(null, sig, fw_host_call(f37, _))];
	i.code([Opcode.RETURN_CALL.code, byte.!(fd.func_index)]);

	i.args_i(33).assert2_i(-4);
	i.args_i(1090939).assert2_i(1090902);
}

def fw_host_call(f: Function, args: Range<Value>) -> HostResult {
	var nargs = Array<Value>.new(args.length);
	for (i < nargs.length) nargs[i] = args[i];
	return HostResult.TailCall(f, nargs);
}

def test_host_tail_call1(t: ExeTester) {
	t.sig(SigCache.i_i);
	t.code([Opcode.LOCAL_GET.code, 0, Opcode.I32_CONST.code, 5, Opcode.I32_ADD.code]);
	var instance = Instantiator.new(t.extensions, t.module, [], ErrorGen.new("InterpreterTest.v3")).run();
	var f = instance.functions[0];

	def hf = HostFunction.new(null, SigCache.i_i, fw_host_call(f, _));

	t.assert_req(Execute.call(hf, array_u(44)), u_r(49));
	t.assert_req(Execute.call(hf, array_u(999)), u_r(1004));
}

def add(args: Range<Value>) -> HostResult {
	var a = Values.unbox_u(args[0]);
	var b = Values.unbox_u(args[1]);
	return HostResult.Value1(Value.I32(a + b));
}

def test_host_tail_call2(t: ExeTester) {
	def hf = HostFunction.new("wrap", SigCache.ii_i, fw_host_call(HostFunction.new("add", SigCache.ii_i, add), _));

	t.assert_req(Execute.call(hf, array_uu(44, 66)), u_r(110));
	t.assert_req(Execute.call(hf, array_uu(909, 90)), u_r(999));
}

def test_stack_overflow1(i: ExeTester) {
	i.sig(SigCache.i_v);
	i.code([
		Opcode.LOCAL_GET.code, 0,
		Opcode.CALL.code, 0
	]);
	i.max_call_depth = 10;
	i.args_u(0).assert2_trap(TrapReason.STACK_OVERFLOW);
}

def test_stack_overflow2(i: ExeTester) {
	i.sig(SigCache.i_v);
	i.addLocals(2000, ValueType.I32);
	i.code([
		Opcode.LOCAL_GET.code, 0,
		Opcode.CALL.code, 0
	]);
	i.max_call_depth = 10;
	i.args_u(2).assert2_trap(TrapReason.STACK_OVERFLOW);
}

def test_force_gc_callback(args: Range<Value>) -> HostResult {
	// Allocations and forced GCs help randomize the heap layout to catch bugs in walking interpreter frames
	var a = args[0], b = args[1];
	var x = [a, b];
	Target.forceGC();
	var y = [a, b];
	Target.forceGC();
	var z = [a, b];
	Target.forceGC();
	if (x[0] != y[0]) return HostResult.Value1(Values.box_i(-1));
	if (x[1] != y[1]) return HostResult.Value1(Values.box_i(-2));
	if (x[0] != z[0]) return HostResult.Value1(Values.box_i(-3));
	if (x[1] != z[1]) return HostResult.Value1(Values.box_i(-4));
	return HostResult.Value1(Values.box_i(99 - Values.unbox_i(a) - Values.unbox_i(b)));
}

def test_force_gc1(i: ExeTester) {
	var sig = i.newSig(SigCache.arr_ii, SigCache.arr_i);
	i.sig(sig);
	var fd = i.newFunc(sig);
	i.module.addImport("", "", fd);
	i.imports = [HostFunction.new("test_force_gc_callback", sig, test_force_gc_callback)];
	i.code([Opcode.LOCAL_GET.code, 0,
		Opcode.LOCAL_GET.code, 1,
		Opcode.CALL.code, byte.!(fd.func_index)]);

	i.args_ii(44, 33).assert2_i(22);
	i.args_ii(1090909, 0xFAAA0123).assert2_i(88431075);
}

def test_force_gc_callback2(args: Range<Value>) -> HostResult {
	// Allocations and forced GCs help randomize the heap layout to catch bugs in walking interpreter frames
	var a = args[0];
	var x = [a];
	Target.forceGC();
	var y = [a, a];
	Target.forceGC();
	var z = [a, a, a];
	Target.forceGC();
	return HostResult.Value1(a);
}

def test_force_gc2(i: ExeTester) {
	i.sig(i.newSig(SigCache.arr_r, SigCache.arr_rrr));
	var sig = i.newSig(SigCache.arr_r, SigCache.arr_r);
	var fd = i.newFunc(sig);
	i.module.addImport("", "", fd);
	i.imports = [HostFunction.new("test_force_gc_callback2", sig, test_force_gc_callback2)];
	i.code([
		Opcode.I32_CONST.code, 33,
		Opcode.LOCAL_GET.code, 0,
		Opcode.CALL.code, byte.!(fd.func_index), // local 0 should be scanned by gc
		Opcode.LOCAL_GET.code, 0,
		Opcode.CALL.code, byte.!(fd.func_index), // local 0 should be scanned by gc
		Opcode.LOCAL_GET.code, 0]);

	var r = TestObject.new("force_gc2_object"), v = Value.Ref(r), vs: Array<Value> = [v];
	i.argsN(vs).assert2_res(Result.Value([v, v, v]));
	i.argsN(vs).assert2_res(Result.Value([v, v, v]));
}

// TODO: factor out to common place
def array_uu(a: u32, b: u32) -> Array<Value> {
	return [Value.I32(a), Value.I32(b)];
}
def array_u(a: u32) -> Array<Value> {
	return [Value.I32(a)];
}
def u_r(val: u32) -> Result {
	return Result.Value([Value.I32(val)]);
}
def heapIndexByte(ht: HeapTypeDecl) -> byte {
	return byte.!(ht.heaptype_index);
}
