// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("debug:", _, DebugTester.new, _);
def X_ = void(
	T("break0", test_break0),
	T("timeout0", test_timeout0),
	T("frame0", test_frame0),
	T("locals0", test_locals0),
	T("stack0", test_stack0),
	T("setlocal0", test_setlocal0),
	()
);

class DebugBreak(t: DebugTester) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		t.breaks.put(dynamicLoc.func, dynamicLoc.pc);
		return Resumption.Continue;
	}
}
class DebugTester(t: Tester) extends ModuleBuilder {
	var instance: Instance;
	var f: Function;
	def breaks = Vector<(WasmFunction, int)>.new();

	new() { Instrumentation.reset(); }

	def breakAt(pc: int) {
		Instrumentation.insertLocalProbe(module, func.func_index, pc, DebugBreak.new(this));
	}
	def exe() -> Execute {
		if (instance == null) {
			instance = Instantiator.new(extensions, module, [], ErrorGen.new("DebugTest.v3")).run();
			f = instance.functions[0];
		}
		var e: Execute;
		return e;
	}
	def assert_break(args: Array<Value>, pc: int, expected: Result) {
		var got = exe().call(f, args);
		if (!expected.equals(got)) return t.fail2("expected result = %q, got %q", expected.render, got.render);
		for (i < breaks.length) {
			var t = breaks[i];
			if (t.1 == pc) return;
		}
		return t.fail1("expected break @ pc=%d", pc);
	}
	def assert_result(args: Array<Value>, expected: Result) {
		var got = exe().call(f, args);
		if (!expected.equals(got)) return t.fail2("expected result = %q, got %q", expected.render, got.render);
	}
}

def test_break0(t: DebugTester) {
	t.sig(SigCache.v_i);
	t.code([
		u8.!(Opcode.I32_CONST.code), 22,
		u8.!(Opcode.I32_CONST.code), 33,
		u8.!(Opcode.I32_SUB.code)
	]);
	t.breakAt(3);
	t.assert_break([], 3, Result.Value([Values.box_i(-11)]));
	t.breakAt(5);
	t.assert_break([], 5, Result.Value([Values.box_i(-11)]));
}

def test_timeout0(t: DebugTester) {
	Instrumentation.reset();
	t.sig(SigCache.v_i);
	t.code([
		u8.!(Opcode.I32_CONST.code), 22,
		u8.!(Opcode.I32_CONST.code), 33,
		u8.!(Opcode.I32_SUB.code)
	]);
	var p = TimeoutProbe.new(2);
	Instrumentation.insertGlobalProbe(p);
	t.assert_result([], Result.Throw(Trap.new(TrapReason.TIMEOUT, null, null)));
	Instrumentation.reset();
}

class FrameAsserter(t: Tester, expected_func: FuncDecl, expected_pc: int) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		t.assert_eq(expected_func, dynamicLoc.func.decl);
		t.asserti(expected_pc, dynamicLoc.pc);
		var access = dynamicLoc.frame.getFrameAccessor();
		t.assert_eq(expected_func, access.func().decl);
		t.asserti(expected_pc, access.pc());
		return Resumption.Continue;
	}
}

def test_frame0(t: DebugTester) {
	t.sig(SigCache.i_i);
	t.code([
		u8.!(Opcode.I32_CONST.code), 22,
		u8.!(Opcode.LOCAL_GET.code), 0,
		u8.!(Opcode.I32_SUB.code)
	]);
	Instrumentation.reset();
	Instrumentation.insertLocalProbe(t.module, t.func.func_index, 5, FrameAsserter.new(t.t, t.func, 5));
	t.assert_result([Values.box_i(44)], Result.Value([Values.box_i(-22)]));
}

class LocalsAsserter(t: Tester, expected_vals: Array<Value>) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		var access = dynamicLoc.frame.getFrameAccessor();
		t.asserti(expected_vals.length, access.numLocals());
		for (i < expected_vals.length) {
			if (!t.ok) break;
			t.assert_eq(expected_vals[i], access.getLocal(i));
		}
		return Resumption.Continue;
	}
}

def test_locals0(t: DebugTester) {
	t.sig(SigCache.i_i);
	t.code([
		u8.!(Opcode.I32_CONST.code), 22,
		u8.!(Opcode.LOCAL_GET.code), 0,
		u8.!(Opcode.I32_SUB.code)
	]);
	Instrumentation.reset();
	Instrumentation.insertLocalProbe(t.module, t.func.func_index, 5, LocalsAsserter.new(t.t, [Values.box_i(44)]));
	t.assert_result([Values.box_i(44)], Result.Value([Values.box_i(-22)]));
}

class StackAsserter(t: Tester, expected_vals: Array<Value>) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		var access = dynamicLoc.frame.getFrameAccessor();
		t.asserti(expected_vals.length, access.numOperands());
		for (i < expected_vals.length) {
			if (!t.ok) break;
			t.assert_eq(expected_vals[i], access.getOperand(0 - i));
		}
		return Resumption.Continue;
	}
}

def test_stack0(t: DebugTester) {
	t.sig(SigCache.i_i);
	t.code([
		u8.!(Opcode.I32_CONST.code), 22,
		u8.!(Opcode.LOCAL_GET.code), 0,
		u8.!(Opcode.I32_SUB.code)
	]);
	Instrumentation.reset();
	Instrumentation.insertLocalProbe(t.module, t.func.func_index, 5, StackAsserter.new(t.t, [Values.box_i(77), Values.box_i(22)]));
	t.assert_result([Values.box_i(77)], Result.Value([Values.box_i(-55)]));
}

class LocalSetter(i: int, v: Value) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		var access = dynamicLoc.frame.getFrameAccessor();
		access.getWriter().setLocal(i, v);
		return Resumption.Continue;
	}
}

def test_setlocal0(t: DebugTester) {
	t.sig(SigCache.i_i);
	t.code([
		u8.!(Opcode.I32_CONST.code), 22,
		u8.!(Opcode.LOCAL_GET.code), 0,
		u8.!(Opcode.I32_SUB.code)
	]);
	Instrumentation.reset();
	Instrumentation.insertLocalProbe(t.module, t.func.func_index, 3, LocalSetter.new(0, Values.box_i(-33)));
	t.assert_result([Values.box_i(4000001)], Result.Value([Values.box_i(55)]));
}
