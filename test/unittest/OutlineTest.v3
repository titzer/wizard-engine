// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("outline:", _, OutlineTester.new, _);

def Z = void(
	T("empty", test_empty),
	T("types0", test_types0),
	T("imports0", test_imports0),
	T("funcs0", test_funcs0),
	T("tables0", test_tables0),
	T("memories0", test_memories0),
	T("globals0", test_globals0),
	T("exports0", test_exports0),
	()
);

def DEFAULT_LIMITS = Limits.new().set(Extension.set.all);

class OutlineTester(t: Tester) {
	def outline(b: Array<byte>) -> ModuleOutline {
		var err = ErrorGen.new("test");
		var bp = BinParser.new(Extension.set.all, DEFAULT_LIMITS, err, "test");
		bp.outline = ModuleOutline.new();
		bp.push(b, 0, b.length).finish();
		if (err.error()) t.fail(err.error_msg);
		return bp.outline;
	}
	def assert_entries(outline: SectionOutline, start: u64, offsets: Array<u31>, end: u64) {
		if (outline.start != start) return t.fail2("expected start=%d, got %d", start, outline.start);
		if (outline.offsets.length != offsets.length) return t.fail2("expected count=%d, got %d", offsets.length, outline.offsets.length);
		for (i < offsets.length) {
			if (outline.offsets[i] != offsets[i]) return t.fail3("expected offsets[%d]=%d, got %d", i, offsets[i], outline.offsets[i]);
		}
		if (outline.end != end) t.fail2("expected end=%d, got %d", end, outline.end);
	}
	def assert_empty(outline: SectionOutline) {
		assert_entries(outline, 0, [], 0);
	}
}

def VALID_HEADER = BinUtil.WASM_HEADER;
def EMPTY_FUNC_TYPE: Array<byte> = [
	BpDefTypeCode.Function.code, 0, 0
];
def FUNCREF_TABLE: Array<byte> = [
	BpTypeCode.FUNCREF.code, 0, 0
];
def MEMORY1: Array<byte> = [
	0, 1
];
def GLOBAL: Array<byte> = [
	BpTypeCode.I32.code, 0, u8.!(Opcode.I32_CONST.code), 0, u8.!(Opcode.END.code)
];


def test_empty(t: OutlineTester) {
	var outline = t.outline(VALID_HEADER);
	t.assert_empty(outline.imports);
	t.assert_empty(outline.heaptypes);
	t.assert_empty(outline.functions);
	t.assert_empty(outline.tables);
	t.assert_empty(outline.memories);
	t.assert_empty(outline.globals);
	t.assert_empty(outline.tags);
	t.assert_empty(outline.exports);
	t.assert_empty(outline.data);
	t.assert_empty(outline.elements);
	t.t.assert_eq(0, outline.custom_sections.length);
}

def test_types0(t: OutlineTester) {
	var b = BinBuilder.new().reset_header();
	b.beginSection(BpSection.Type);
	b.put(3);
	b.puta(EMPTY_FUNC_TYPE);
	b.puta(EMPTY_FUNC_TYPE);
	b.puta(EMPTY_FUNC_TYPE);
	b.endSection();
	var outline = t.outline(b.extract());
	t.assert_entries(outline.heaptypes, 14, [15, 18, 21], 24);
}

def test_imports0(t: OutlineTester) {
	var b = BinBuilder.new().reset_header();
	b.beginSection(BpSection.Type);
	b.put(1);
	b.puta(EMPTY_FUNC_TYPE);
	b.endSection();
	b.beginSection(BpSection.Import);
	b.put(2);
	b.puta([1, 'M', 1, 'f', BpImportExportKind.Function.code, 0]);
	b.puta([2, 'N', 'o', 1, 'f', BpImportExportKind.Function.code, 0]);
	b.endSection();
	var outline = t.outline(b.extract());
	t.assert_entries(outline.heaptypes, 14, [15], 18);
	t.assert_entries(outline.imports, 24, [25, 31], 38);
}

def test_funcs0(t: OutlineTester) {
	var b = BinBuilder.new().reset_header();
	b.beginSection(BpSection.Type);
	b.put(1);
	b.puta(EMPTY_FUNC_TYPE);
	b.endSection();
	b.beginSection(BpSection.Function);
	b.put(1);
	b.puta([0]);
	b.endSection();
	b.beginSection(BpSection.Code);
	b.put(1);
	b.put(3);
	b.puta([0, u8.!(Opcode.UNREACHABLE.code), u8.!(Opcode.END.code)]);
	b.endSection();
	var outline = t.outline(b.extract());
	t.assert_entries(outline.heaptypes, 14, [15], 18);
	t.assert_entries(outline.functions, 24, [25], 26);
}

def test_tables0(t: OutlineTester) {
	var b = BinBuilder.new().reset_header();
	b.beginSection(BpSection.Table);
	b.put(3);
	b.puta(FUNCREF_TABLE);
	b.puta(FUNCREF_TABLE);
	b.puta(FUNCREF_TABLE);
	b.endSection();
	var outline = t.outline(b.extract());
	t.assert_entries(outline.tables, 14, [15, 18, 21], 24);
}

def test_memories0(t: OutlineTester) {
	var b = BinBuilder.new().reset_header();
	b.beginSection(BpSection.Memory);
	b.put(2);
	b.puta(MEMORY1);
	b.puta(MEMORY1);
	b.endSection();
	var outline = t.outline(b.extract());
	t.assert_entries(outline.memories, 14, [15, 17], 19);
}

def test_globals0(t: OutlineTester) {
	var b = BinBuilder.new().reset_header();
	b.beginSection(BpSection.Global);
	b.put(4);
	b.puta(GLOBAL);
	b.puta(GLOBAL);
	b.puta(GLOBAL);
	b.puta(GLOBAL);
	b.endSection();
	var outline = t.outline(b.extract());
	t.assert_entries(outline.globals, 14, [15, 20, 25, 30], 35);
}

def test_exports0(t: OutlineTester) {
	var b = BinBuilder.new().reset_header();
	b.beginSection(BpSection.Type);
	b.put(1);
	b.puta(EMPTY_FUNC_TYPE);
	b.endSection();
	b.beginSection(BpSection.Function);
	b.put(1);
	b.puta([0]);
	b.endSection();
	b.beginSection(BpSection.Export);
	b.put(2);
	b.puta([2, 'c', 'd', BpImportExportKind.Function.code, 0]);
	b.puta([2, 'c', 'f', BpImportExportKind.Function.code, 0]);
	b.endSection();
	b.beginSection(BpSection.Code);
	b.put(1);
	b.put(3);
	b.puta([0, u8.!(Opcode.UNREACHABLE.code), u8.!(Opcode.END.code)]);
	b.endSection();
	var outline = t.outline(b.extract());
	t.assert_entries(outline.exports, 32, [33, 38], 43);
}
