// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("probe:", _, ProbeTester.new, _);
// TODO: make all probe tests run under all execution strategies on all targets.
def X_ = void(
	T("list1", test_list1),
	T("list2", test_list2),
	T("list3", test_list3),
	T("count0g", test_count_0g),
	T("count_loop", test_count_loop),
	T("loop_rm", test_loop_rm),
	T("enable0i", test_enable_0i),
	T("enable1g", test_enable_1g),
	T("remove0i", test_remove_0i),
	T("remove1i", test_remove_1i),
	T("remove2i", test_remove_2i),
	T("depth0", test_depth0),
	T("unwound0", test_unwound0),
	T("sample0", test_sample0),
	T("local_global0", test_local_global0),
	T("local_global1", test_local_global1),
	T("no_skip_block", test_no_skip_block),
	T("insert_g0", test_insert_g0),
	T("insert_g1", test_insert_g1),
	T("frame_var0", test_frame_var0),
	T("frame_var1", test_frame_var1),
	()
);
def frame: TargetFrame;

class ProbeTester extends DebugTester {
	new(t: Tester) super(t) {
		Execute.tiering = ExecuteOptions.default;
	}

	def codev(raw: Array<byte>) -> this {
		code(raw);
		var err = ErrorGen.new(module.filename);
		var v = CodeValidator.new(extensions, Limits.new().set(extensions), module, err);
		var r = v.validateFunc(func);
		Execute.tiering.onFuncValidationFinish(module, func, err);
		match (r) {
			Ok => ;
			Error(error, pc, msg) => t.fail2("invalid code @+%d: %s", pc, msg);
		}
	}
	def stdCode() {
		sig(SigCache.v_i);
		code([
			Opcode.I32_CONST.code, 22,
			Opcode.I32_CONST.code, 33,
			Opcode.I32_SUB.code
		]);
	}
	def loopCode() {
		sig(SigCache.i_i);
		codev([Opcode.LOOP.code, BpTypeCode.EmptyBlock.code,
			Opcode.LOCAL_GET.code, 0,
			Opcode.I32_CONST.code, 1,
			Opcode.I32_SUB.code,
			Opcode.LOCAL_TEE.code, 0,
			Opcode.BR_IF.code, 0,
			Opcode.END.code,
			Opcode.LOCAL_GET.code, 0]);
	}
	def assert_count(expected: int, p: CountProbe) {
		if (p.count != expected) return t.fail2("expected count = %d, got %d", expected, p.count);
	}
	def assert_countr(min: int, max: int, p: CountProbe) {
		if (p.count < min || p.count > max) return t.fail3("expected count in [%d, %d], got %d", min, max, p.count);
	}
	def assert_list(expected: Array<Probe>, l: ProbeList) {
		var h = l.elem;
		for (p in expected) {
			if (h == null) return t.fail("probe list too short");
			if (h.probe != p) return t.fail("probe mismatch");
			h = h.next;
		}
		if (h != null) return t.fail("probe list too long");
	}
	def probe(func_id: int, offset: int, p: Probe) {
		Instrumentation.insertLocalProbe(module, func_id, offset, p);
	}
	def remove(func_id: int, offset: int, p: Probe) {
		Instrumentation.removeLocalProbe(module, func_id, offset, p);
	}
}

def test_list1(t: ProbeTester) {
	var l = ProbeList.new();
	var p1 = CountProbe.new(), p2 = CountProbe.new(), p3 = ClosureProbe.new(l.remove, (p2));

	t.assert_list([], l);
	l.add(p1);
	t.assert_list([p1], l);
	l.add(p2);
	t.assert_list([p1, p2], l);
	l.add(p2);
	t.assert_list([p1, p2, p2], l);
	l.add(p3);
	t.assert_list([p1, p2, p2, p3], l);

	l.fire(DynamicLoc(null, 0, frame));
	t.assert_count(1, p1);
	t.assert_count(2, p2);
	t.assert_list([p1, p2, p3], l);

	l.fire(DynamicLoc(null, 0, frame));
	t.assert_count(2, p1);
	t.assert_count(3, p2);
	t.assert_list([p1, p3], l);
}

def test_list2(t: ProbeTester) {
	var l = ProbeList.new();
	var p1 = CountProbe.new(), p2 = CountProbe.new(), p3 = ClosureProbe.new(l.remove, (p2));

	l.add(p3);
	l.add(p2);
	l.add(p2);
	t.assert_list([p3, p2, p2], l);

	l.fire(DynamicLoc(null, 0, frame));
	t.assert_count(2, p2);
	t.assert_list([p3, p2], l);

	l.fire(DynamicLoc(null, 0, frame));
	t.assert_count(3, p2);
	t.assert_list([p3], l);
}

class UidProbe(counter: Array<int>) extends Probe {
	var num = -1;
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		num = counter[0]++;
		return Resumption.Continue;
	}
}

def test_list3(t: ProbeTester) {
	var l = ProbeList.new();
	var counter = [1001];
	var p1 = UidProbe.new(counter), p2 = UidProbe.new(counter), p3 = UidProbe.new(counter);

	l.add(p1);
	l.add(p2);
	l.add(p3);
	t.assert_list([p1, p2, p3], l);

	l.fire(DynamicLoc(null, 0, frame));
	t.t.assert_eq(1001, p1.num);
	t.t.assert_eq(1002, p2.num);
	t.t.assert_eq(1003, p3.num);

	l.remove(p2);
	t.assert_list([p1, p3], l);

	l.fire(DynamicLoc(null, 0, frame));
	t.t.assert_eq(1004, p1.num);
	t.t.assert_eq(1002, p2.num);
	t.t.assert_eq(1005, p3.num);

	l.add(p2);
	t.assert_list([p1, p3, p2], l);

	l.fire(DynamicLoc(null, 0, frame));
	t.t.assert_eq(1006, p1.num);
	t.t.assert_eq(1008, p2.num);
	t.t.assert_eq(1007, p3.num);
}

def test_count_0g(t: ProbeTester) {
	t.stdCode();
	var p = CountProbe.new();
	var exe = t.exe();
	Instrumentation.insertGlobalProbe(p);
	var got = exe.call(t.f, []);
	var expected = Result.Value([Values.box_i(-11)]);
	if (!expected.equals(got)) return t.t.fail2("expected result = %q, got %q", expected.render, got.render);
	t.assert_countr(4, 6, p);
}

def test_count_loop(t: ProbeTester) {
	t.loopCode();
	var p = CountProbe.new();
	var exe = t.exe();
	t.probe(t.func.func_index, 3, p);
	exe.call(t.f, [Values.box_i(4)]);
	t.assert_count(4, p);
}

def test_loop_rm(t: ProbeTester) {
	t.loopCode();
	var p1 = CountProbe.new(), p2 = CountProbe.new();
	var exe = t.exe();
	t.probe(t.func.func_index, 3, p1);
	t.probe(t.func.func_index, 3, ClosureProbe.new(t.remove, (t.func.func_index, 3, p1)));
	t.probe(t.func.func_index, 5, p2);
	exe.call(t.f, [Values.box_i(4)]);
	t.assert_count(1, p1);
	t.assert_count(4, p2);
}

def test_enable_0i(t: ProbeTester) {
	t.stdCode();
	var p = CountProbe.new();
	t.probe(t.func.func_index, 1, ClosureProbe.new(t.probe, (t.func.func_index, 3, p)));
	var exe = t.exe();
	exe.call(t.f, []);
	t.assert_count(1, p);
}

def test_enable_1g(t: ProbeTester) {
	t.stdCode();
	var p = CountProbe.new();
	var exe = t.exe();
	Instrumentation.insertGlobalProbe(ClosureProbe.new(t.probe, (t.func.func_index, 3, p)));
	exe.call(t.f, []);
	if (p.count < 1) t.t.fail("expected probe to fire");
}

def test_remove_0i(t: ProbeTester) {
	t.stdCode();
	var p = CountProbe.new();
	t.probe(t.func.func_index, 1, p);
	var exe = t.exe();

	exe.call(t.f, []);
	t.assert_count(1, p);

	t.remove(t.func.func_index, 1, p);
	exe.call(t.f, []);
	t.assert_count(1, p);
}

def test_remove_1i(t: ProbeTester) {
	t.stdCode();
	var p = CountProbe.new();
	t.probe(t.func.func_index, 1, ClosureProbe.new(t.remove, (t.func.func_index, 1, p)));
	t.probe(t.func.func_index, 1, p);
	var exe = t.exe();

	exe.call(t.f, []);
	t.assert_count(1, p);

	exe.call(t.f, []);
	t.assert_count(1, p);
}

def test_remove_2i(t: ProbeTester) {
	t.stdCode();
	var p = CountProbe.new();
	t.probe(t.func.func_index, 1, p);
	t.probe(t.func.func_index, 1, ClosureProbe.new(t.remove, (t.func.func_index, 1, p)));
	var exe = t.exe();

	exe.call(t.f, []);
	t.assert_count(1, p);

	exe.call(t.f, []);
	t.assert_count(1, p);
}

def test_depth0(t: ProbeTester) {
	var f2 = t.newFunction(SigCache.v_i, [Opcode.I32_CONST.code, 17]);
	Execute.tiering.onFuncValidationFinish(t.module, f2, null); // TODO: move into newFunction()
	t.sig(SigCache.v_i);
	t.codev([
		Opcode.CALL.code, byte.!(f2.func_index)
	]);
	var p = DepthProbe.new();
	t.probe(f2.func_index, 1, p);
	var exe = t.exe();
	exe.call(t.f, []);
	t.t.asserti(1, p.depth);
}

def test_unwound0(t: ProbeTester) {
	t.stdCode();
	var p = AccessorCapture.new();
	t.probe(t.func.func_index, 1, p);
	var exe = t.exe();

	exe.call(t.f, []);
	t.t.assertz(true, p.accessor.isUnwound());
}

class DepthProbe extends Probe {
	var depth = -1000;
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		depth = dynamicLoc.frame.getFrameAccessor().depth();
		return Resumption.Continue;
	}
}

class AccessorCapture extends Probe {
	var accessor: FrameAccessor;
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		accessor = dynamicLoc.frame.getFrameAccessor();
		return Resumption.Continue;
	}
}

def test_sample0(t: ProbeTester) {
	var counter = CountProbe.new();
	var sampler = SamplingProbe.new(counter);

	var loc: DynamicLoc;
	t.t.assert_eq(0uL, counter.count);

	sampler.fire(loc);
	t.t.assert_eq(0uL, counter.count);

	sampler.enable();
	sampler.fire(loc);
	t.t.assert_eq(1uL, counter.count);
	sampler.fire(loc);
	t.t.assert_eq(2uL, counter.count);

	sampler.disable();
	sampler.fire(loc);
	t.t.assert_eq(2uL, counter.count);

	var k = 11u;
	sampler.enableFor(k);
	for (i < (k + 5)) sampler.fire(loc);
	t.t.assert_eq(2uL + k, counter.count);

	sampler.disableFor(k);
	for (i < (k + 5)) sampler.fire(loc);
	t.t.assert_eq(2uL + k + 5, counter.count);
}

def test_local_global0(t: ProbeTester) {
	// Fires a local probe at first instruction and a global probe
	var c1 = CountProbe.new(), c2 = CountProbe.new();
	t.stdCode();
	t.probe(t.func.func_index, 1, c1);
	var exe = t.exe();
	Instrumentation.insertGlobalProbe(c2);
	var got = exe.call(t.f, []);
	t.assert_count(1, c1);
	t.assert_count(4, c2);
}

def test_local_global1(t: ProbeTester) {
	// Fires a local probe at first instruction, inserts a global probe
	var c1 = CountProbe.new(), c2 = CountProbe.new();
	t.stdCode();
	t.probe(t.func.func_index, 1, c1);
	t.probe(t.func.func_index, 1, ClosureProbe.new(Instrumentation.insertGlobalProbe, c2));
	var exe = t.exe();
	var got = exe.call(t.f, []);
	t.assert_count(1, c1);
	t.assert_count(3, c2);
}

def test_no_skip_block(t: ProbeTester) {
	// Tests that empty blocks are not skipped in global probe mode
	t.sig(SigCache.v_i);
	t.codev([
		Opcode.BLOCK.code, BpTypeCode.EmptyBlock.code,
		Opcode.BLOCK.code, BpTypeCode.EmptyBlock.code,
		Opcode.BLOCK.code, BpTypeCode.EmptyBlock.code,
		Opcode.BLOCK.code, BpTypeCode.EmptyBlock.code,
		Opcode.END.code,
		Opcode.END.code,
		Opcode.END.code,
		Opcode.END.code,
		Opcode.I32_CONST.code, 11
	]);
	var p = CountProbe.new();
	var exe = t.exe();
	Instrumentation.insertGlobalProbe(p);
	var got = exe.call(t.f, []);
	var expected = Result.Value([Values.box_i(11)]);
	if (!expected.equals(got)) return t.t.fail2("expected result = %q, got %q", expected.render, got.render);
	t.assert_count(10, p);
}

def test_insert_g0(t: ProbeTester) {
	// Tests that empty blocks are not skipped when dynamically inserting global probe
	t.sig(SigCache.v_i);
	t.codev([
		Opcode.I32_CONST.code, 11,
		Opcode.BLOCK.code, BpTypeCode.EmptyBlock.code,
		Opcode.BLOCK.code, BpTypeCode.EmptyBlock.code,
		Opcode.BLOCK.code, BpTypeCode.EmptyBlock.code,
		Opcode.BLOCK.code, BpTypeCode.EmptyBlock.code,
		Opcode.END.code,
		Opcode.END.code,
		Opcode.END.code,
		Opcode.END.code
	]);
	var c = CountProbe.new();
	var exe = t.exe();
	var p = ClosureProbe.new(Instrumentation.insertGlobalProbe, c);
	t.probe(t.func.func_index, 1, p);
	var got = exe.call(t.f, []);
	var expected = Result.Value([Values.box_i(11)]);
	if (!expected.equals(got)) return t.t.fail2("expected result = %q, got %q", expected.render, got.render);
	t.assert_count(9, c);
}

def test_insert_g1(t: ProbeTester) {
	t.sig(SigCache.v_i);
	t.codev([
		Opcode.BLOCK.code, BpTypeCode.EmptyBlock.code,
		Opcode.BLOCK.code, BpTypeCode.EmptyBlock.code,
		Opcode.BLOCK.code, BpTypeCode.EmptyBlock.code,
		Opcode.BLOCK.code, BpTypeCode.EmptyBlock.code,
		Opcode.END.code,
		Opcode.END.code,
		Opcode.END.code,
		Opcode.END.code,
		Opcode.I32_CONST.code, 11
	]);
	var c = CountProbe.new();
	var exe = t.exe();
	var p = ClosureProbe.new(Instrumentation.insertGlobalProbe, c);
	t.probe(t.func.func_index, 3, p);
	var got = exe.call(t.f, []);
	var expected = Result.Value([Values.box_i(11)]);
	if (!expected.equals(got)) return t.t.fail2("expected result = %q, got %q", expected.render, got.render);
	t.assert_count(8, c);
}

class FrameVarGetter extends Probe {
	var calls = 0;
	var got: Value;
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		calls++;
		got = dynamicLoc.frame.getFrameAccessor().getFrameVar(0);
		return Resumption.Continue;
	}
}

def test_frame_var0(t: ProbeTester) {
	t.loopCode();
	t.func.frame_var_tags = [BpTypeCode.I32.code];
	var fv = FrameVarGetter.new();
	fv.got = Values.REF_NULL;
	var exe = t.exe();
	t.probe(t.func.func_index, 3, fv);
	exe.call(t.f, [Values.box_i(4)]);
	t.t.assert_eq(4, fv.calls);
	if (fv.got != Values.I32_0) t.t.fail("wrong value");
}

class FrameVarIncrementer extends Probe {
	var calls = 0;
	var last: Value;
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		calls++;
		var accessor = dynamicLoc.frame.getFrameAccessor();
		last = accessor.getFrameVar(0);
		var next = Values.box_i(Values.unbox_i(last) + 1);
		accessor.getWriter().setFrameVar(0, next);
		return Resumption.Continue;
	}
}

def test_frame_var1(t: ProbeTester) {
	t.loopCode();
	t.func.frame_var_tags = [BpTypeCode.I32.code];
	var fv = FrameVarIncrementer.new();
	fv.last = Values.REF_NULL;
	var exe = t.exe();
	t.probe(t.func.func_index, 3, fv);
	exe.call(t.f, [Values.box_i(4)]);
	t.t.assert_eq(4, fv.calls);
	if (fv.last != Values.box_i(3)) t.t.fail("wrong value");
}

// TODO: test frame vars of all types
