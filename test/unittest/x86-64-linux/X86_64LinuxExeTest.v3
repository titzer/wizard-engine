// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component X86_64LinuxExeTest {
	new() {
		for (strategy in [
			("spc:aot:", X86_64SpcAotStrategy.new(false)),
			("spc:lazy:", X86_64SpcLazyStrategy.new()),
			("int:dyn:", X86_64DynamicStrategy.new())]) {

			var newTester = ExeTester.new(_, strategy.1);
			for (test in [
				("empty", test_empty),
				("unreachable", test_unreachable),
				("i32.add", test_i32_add),
				("load_oob0", test_load_oob0),
				("call1005", test_call1005)		// intended to trigger OSR
				]) {
				// register strategy/test pair
				UnitTests.registerT(strategy.0, test.0, newTester, test.1);
			}
		}
	}

}

// Tests specific compilation strategies such as AOT, lazy, dynamic tier up.
def X: Array<Value>;
def NONE = BpTypeCode.EmptyBlock.code;

def test_empty(i: ExeTester) {
	i.sig(SigCache.v_v).code([])
		.noargs().assert2_none();
}

def test_unreachable(i: ExeTester) {
	i.code([u8.!(Opcode.UNREACHABLE.code)])
		.noargs().assert2_trap(TrapReason.UNREACHABLE);
}

def test_nop(i: ExeTester) {
	i.sig(SigCache.v_v).code([u8.!(Opcode.NOP.code)])
		.noargs().assert2_none();
}

def test_i32_add(i: ExeTester) {
	i.sig(SigCache.ii_i).code([
		u8.!(Opcode.LOCAL_GET.code), 0,
		u8.!(Opcode.LOCAL_GET.code), 1,
		u8.!(Opcode.I32_ADD.code)]);
	i.args_ii(0xFF89520F, 9999999).assert2_i(2222222);
}

def test_load_oob0(i: ExeTester) {
	i.addMemory(0, Max.Set(0));
	i.sig(SigCache.i_i);
	i.code([u8.!(Opcode.LOCAL_GET.code), 0,
		u8.!(Opcode.I32_LOAD.code), 0, 0]);
	i.args_i(0).assert2_trap(TrapReason.MEM_OUT_OF_BOUNDS);
}

def test_call1005(i: ExeTester) {
	var f17 = byte.!(i.newFunction(SigCache.v_i, [u8.!(Opcode.I32_CONST.code), 17]).func_index);
	i.sig(SigCache.i_i);
	i.codev([
		u8.!(Opcode.LOOP.code), BpTypeCode.EmptyBlock.code,
		u8.!(Opcode.CALL.code), f17,
		u8.!(Opcode.LOCAL_GET.code), 0,
		u8.!(Opcode.I32_CONST.code), 1,
		u8.!(Opcode.I32_SUB.code),
		u8.!(Opcode.LOCAL_TEE.code), 0,
		u8.!(Opcode.I32_EQZ.code),
		u8.!(Opcode.BR_IF.code), 1,
		u8.!(Opcode.BR.code), 0,
		u8.!(Opcode.END.code),
		u8.!(Opcode.UNREACHABLE.code)
	]);
	i.args_i(5).assert2_i(17);
	i.args_i(1000).assert2_i(17);
}

