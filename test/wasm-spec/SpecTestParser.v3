// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses binary WebAssembly spec tests (.bin.wast format).
class SpecTestParser(filename: string, input: Array<byte>, makeRefExtern: int -> HostObject) {
	private var pos: int;
	private var line: int = 1;
	private var col: int = 1;
	private def strbuf = StringBuilder.new();
	def var commands = Vector<SpecTestCommand>.new();
	def var ok = true;
	def var error_loc = (int.max, int.max);
	def var error_msg: string;

	def parseFile() {
		skip();
		parseList(commands, parseCommand);
	}

	def parseList<T>(vec: Vector<T>, parse: void -> T) {
		while (ok && more(1)) {
			if (!ch('(')) return;
			vec.put(parse());
			if (!expect_ch(')')) return;
		}
	}
	def parseNested<T>(parse: void -> T) -> T {
		var t: T;
		if (!expect_ch('(')) return t;
		t = parse();
		expect_ch(')');
		return t;
	}
	def parseOneCommandForTesting() -> SpecTestCommand {
		if (!ch('(')) return null;
		var c = parseCommand();
		if (!expect_ch(')')) return null;
		return c;
	}
	def parseCommand() -> SpecTestCommand {
		var loc = (line, col);
		var cmd: StCommand;
		if (kw("module")) cmd = StCommand.Module(parseModule());
		else if (kw("assert_return")) cmd = parseAssertReturn();
		else if (kw("assert_trap")) cmd = parseAssertTrap();
		else if (kw("assert_uninstantiable")) cmd = parseAssertUninstantiable();
		else if (kw("assert_exhaustion")) cmd = parseAssertExhaustion();
		else if (kw("assert_invalid")) cmd = parseAssertInvalid();
		else if (kw("assert_malformed")) cmd = parseAssertMalformed();
		else if (kw("assert_unlinkable")) cmd = parseAssertUnlinkable();
		else if (kw("assert_exception")) cmd = parseAssertException();
		else if (kw("assert_suspension")) cmd = parseAssertSuspension();
		else if (kw("invoke")) cmd = StCommand.Action(parseInvoke());
		else if (kw("get")) cmd = StCommand.Action(parseGlobalGet());
		else if (kw("register")) cmd = parseRegister();
		else if (kw("action")) cmd = StCommand.Action(parseNested(parseAction));
		else error1(loc, "expected valid command", ());
		return SpecTestCommand.new(loc, cmd);
	}
	def parseStrings() -> string {
		var loc = (line, col);
		strbuf.reset();
		if (!more(1) || input[pos] != '\"') error1(loc, "expected string", ());
		while (ok && more(1)) {
			if (input[pos] != '\"') break;
			doString();
		}
		return strbuf.extract();
	}
	def parseVarName() -> string {
		var start = pos;
		if (!more(2) || input[pos] != '$') return null;
		var p = start + 1;
		while (p < input.length) {
			if (!isKeywordMiddle(input[p])) break;
			p++;
		}
		advance(p - start);
		return Arrays.range(input, start, p);
	}
	def parseModule() -> StModule {
		var loc = (line, col);
		if (kw("instance")) {
			var v1 = parseVarName();
			var v2 = parseVarName();
			return StModule.Instance(v1, v2);
		}
		var isdef = kw("definition");
		var varname = parseVarName();
		if (kw("binary")) {
			var bytes = parseMaybeBytes();
			return StModule.Binary(isdef, varname, bytes);
		} else if (kw("quote")) {
			var source = parseStrings();
			return StModule.Quote(isdef, varname, source);
		} else {
			error1(loc, "expected binary or quote module", ());
			var mod: StModule;
			return mod;
		}
	}
	def parseMaybeBytes() -> Array<byte> {
		if (peek_ch(0) == ')') return [];
		else return parseStrings();
	}
	def parseNestedModule() -> StModule {
		var loc = (line, col);
		var t: StModule;
		if (!expect_kw("module")) return t;
		return parseModule();
	}
	def parseAssertReturn() -> StCommand {
		var action = parseNested(parseAction);
		var expected = Vector<ExpectedValue>.new();
		parseList(expected, parseExpectedValue);
		return StCommand.AssertReturn(action, expected.extract());
	}
	def parseAssertTrap() -> StCommand {
		var ma = parseNested(parseModuleOrAction);
		var msg = parseMaybeString();
		match (ma) {
			Module(module) => return StCommand.AssertUninstantiable(module, msg);
			Action(action) => return StCommand.AssertTrap(action, msg);
		}
	}
	def parseAssertExhaustion() -> StCommand {
		var action = parseNested(parseAction);
		var msg = parseMaybeString();
		return StCommand.AssertExhaustion(action, msg);
	}
	def parseAssertInvalid() -> StCommand {
		var module = parseNested(parseNestedModule);
		var msg = parseMaybeString();
		return StCommand.AssertInvalid(module, msg);
	}
	def parseAssertMalformed() -> StCommand {
		var module = parseNested(parseNestedModule);
		var msg = parseMaybeString();
		return StCommand.AssertMalformed(module, msg);
	}
	def parseAssertUnlinkable() -> StCommand {
		var module = parseNested(parseNestedModule);
		var msg = parseMaybeString();
		return StCommand.AssertUnlinkable(module, msg);
	}
	def parseAssertUninstantiable() -> StCommand {
		var module = parseNested(parseNestedModule);
		var msg = parseMaybeString();
		return StCommand.AssertUninstantiable(module, msg);
	}
	def parseAssertException() -> StCommand {
		var action = parseNested(parseAction);
		return StCommand.AssertException(action);
	}
	def parseAssertSuspension() -> StCommand {
		var action = parseNested(parseAction);
		var msg = parseMaybeString();
		return StCommand.AssertSuspension(action);
	}
	def parseInvoke() -> StAction.Invoke {
		var varname = parseVarName();
		var funcname = parseString();
		var args = Vector<Value>.new();
		parseList(args, parseConstant);
		return StAction.Invoke(varname, funcname, args.extract());
	}
	def parseGlobalGet() -> StAction.GlobalGet {
		var varname = parseVarName();
		var globalname = parseString();
		return StAction.GlobalGet(varname, globalname);
	}
	def parseConstant() -> Value {
		var loc = (line, pos);
		if (kw("i32.const")) return parseI32Const();
		else if (kw("i64.const")) return parseI64Const();
		else if (kw("f32.const")) return parseF32Const();
		else if (kw("f64.const")) return parseF64Const();
		else if (kw("v128.const")) return parseV128Const();
		else if (kw("ref.null")) return parseRefNull(line, pos);
		else if (kw("ref.extern")) return parseRefExtern(line, pos);
		else if (kw("ref.host")) return parseRefExtern(line, pos);
		error1(loc, "expected constant", ());
		return Values.I32_0;
	}
	def parseExpectedValue() -> ExpectedValue {
		// TODO: handle "either"
		var loc = (line, pos);
		if (kw("i32.const")) return ExpectedValue.Exact(parseI32Const());
		else if (kw("i64.const")) return ExpectedValue.Exact(parseI64Const());
		else if (kw("f32.const")) return parseF32ExpectedValue();
		else if (kw("f64.const")) return parseF64ExpectedValue();
		else if (kw("v128.const")) return parseV128ExpectedValue();
		else if (kw("ref.null")) {
			if (peek_ch(0) == ')') return ExpectedValue.RefNull;
			return ExpectedValue.Exact(parseRefNull(line, pos));
		}
		else if (kw("ref.func")) return ExpectedValue.RefFunc;
		else if (kw("ref.array")) return ExpectedValue.RefArray;
		else if (kw("ref.struct")) return ExpectedValue.RefStruct;
		else if (kw("ref.eq")) return ExpectedValue.RefEq;
		else if (kw("ref.data")) return ExpectedValue.RefData;
		else if (kw("ref.extern") || kw("ref.host")) {
			if (peek_ch(0) == ')') {
				return ExpectedValue.RefExtern;
			} else {
				return ExpectedValue.Exact(parseRefExtern(line, pos));
			}
		}
		else if (kw("ref.i31")) return ExpectedValue.RefI31;
		error1(loc, "expected constant", ());
		return ExpectedValue.Exact(Values.I32_0);
	}
	def parseI32Const() -> Value {
		return parseIntValue(NEG_I32_LIMITS, POS_I32_LIMITS);
	}
	def parseI64Const() -> Value {
		return parseIntValue(NEG_I64_LIMITS, POS_I64_LIMITS);
	}
	def parseIntValue(neg_limits: IntLimits, pos_limits: IntLimits) -> Value {
		var val = parseInt(neg_limits, pos_limits);
		return if(neg_limits.is64, Value.I64(val), Value.I32(u32.view(val)));
	}
	def parseInt(neg_limits: IntLimits, pos_limits: IntLimits) -> u64 {
		var prev = pos;
		var loc = (line, col);
		var c = input[pos], sign = 1ul;
		var limits = pos_limits;
		if (c == '-') {
			limits = neg_limits;
			sign = u64.max;
			pos++;
			if (!more(1)) {
				error1(loc, "expected int, got EOF", ());
				return 0;
			}
			c = input[pos];
		}
		var val: u64;
		if (c == '0') {
			var x = peek_ch(1);
			if (x == 'x' || x == 'X') {
				pos += 2;
				val = parseIntHex(loc, limits);
			}
			else val = parseIntDec(loc, limits);
		} else {
			val = parseIntDec(loc, limits);
		}
		col += (pos - prev);
		skip();
		return val * sign;
	}
	def parseIntDec(loc: (int, int), limits: IntLimits) -> u64 {
		// Parse a (positive) decimal integer starting at pos.
		var a = input, i = pos, v1 = a[i++];
		if (v1 < '0' || v1 > '9') {
			error1(loc, "expected decimal integer", ());
			return 0;
		}

		var max = a.length, accum = v1 - u64.!('0');
		while (i < max) {
			var c = a[i];
			if (c == '_') { i++; continue; }  // skip _ in numbers
			var d = c - '0';
			if (d < 0 || d > 9) break;
			if (accum > limits.max_u_div10 ||
				(accum == limits.max_u_div10) && (d > limits.max_u_mod10)) {
				error1(loc, "decimal integer too large", ());
				return 0;
			}
			accum = accum * 10 + d;
			i++;
		}
		pos = i;
		return accum;
	}
	def parseIntHex(loc: (int, int), limits: IntLimits) -> u64 {
		var a = input, i = pos, max = a.length;
		var accum = 0ul, count = 0;;
		while (i < max) {
			var c = a[i];
			if (c == '_') { i++; continue; } // skip _ in numbers
			var v = Chars.hexValue(c);
			if (v < 0 || v > 15) break;
			accum = (accum << 4) + u64.!(v);
			count++;
			i++;
		}
		if (count == 0) error1(loc, "expected hexadecimal", ());
		if (count > limits.max_hex) error1(loc, "hexadecimal integer too long", ());
		pos = i;
		return accum;
	}
	def parseF32Const() -> Value {
		match (parseFloat(false)) {
			Exact(v) => return v;
			_ => return Values.F32_nan;
		}
	}
	def parseF64Const() -> Value {
		match (parseFloat(true)) {
			Exact(v) => return v;
			_ => return Values.F64_nan;
		}
	}
	def parseV128Const() -> Value {
		match (parseV128ExpectedValue()) {
			Exact(v) => return v;
			F32x4(nested) => {
				var f0 = toF32(nested[0]), f1 = toF32(nested[1]), f2 = toF32(nested[2]), f3 = toF32(nested[3]);
				var low = u64.view(f1) << 32 | f0;
				var high = u64.view(f3) << 32 | f2;
				return Value.V128(low, high);
			}
			F64x2(nested) => {
				var d0 = toF64(nested[0]), d1 = toF64(nested[1]);
				return Value.V128(d0, d1);
			}
			_ => return Value.V128(0, 0); // TODO: error?
		}
	}
	def toF32(ex: ExpectedValue) -> u32 {
		match (ex) {
			Exact(v) => return Values.unbox_fu32(v);
			_ => return Values.F32_nan.bits;
		}
	}
	def toF64(ex: ExpectedValue) -> u64 {
		match (ex) {
			Exact(v) => return Values.unbox_du64(v);
			_ => return Values.F64_nan.bits;
		}
	}
	def parseI8x16() -> Value.V128 {
		var low = parseIntN(8, NEG_I8_LIMITS, POS_I8_LIMITS);
		var high = parseIntN(8, NEG_I8_LIMITS, POS_I8_LIMITS);
		return Value.V128(low, high);
	}
	def parseI16x8() -> Value.V128 {
		var low = parseIntN(4, NEG_I16_LIMITS, POS_I16_LIMITS);
		var high = parseIntN(4, NEG_I16_LIMITS, POS_I16_LIMITS);
		return Value.V128(low, high);
	}
	def parseI32x4() -> Value.V128 {
		var low = parseIntN(2, NEG_I32_LIMITS, POS_I32_LIMITS);
		var high = parseIntN(2, NEG_I32_LIMITS, POS_I32_LIMITS);
		return Value.V128(low, high);
	}
	def parseI64x2() -> Value.V128 {
		var low = parseIntN(1, NEG_I64_LIMITS, POS_I64_LIMITS);
		var high = parseIntN(1, NEG_I64_LIMITS, POS_I64_LIMITS);
		return Value.V128(low, high);
	}
	def parseIntN(n: int, neg_limits: IntLimits, pos_limits: IntLimits) -> u64 {
		var val = 0uL, shift = 64 / n;
		for (i < n) {
			var v = parseInt(neg_limits, pos_limits);
			val = val | (v << u6.view(i * shift));
		}
		return val;
	}
	def parseF32ExpectedValue() -> ExpectedValue {
		return parseFloat(false);
	}
	def parseF64ExpectedValue() -> ExpectedValue {
		return parseFloat(true);
	}
	def parseV128ExpectedValue() -> ExpectedValue {
		var v: ExpectedValue;
		if (kw("i8x16")) v = ExpectedValue.Exact(parseI8x16());
		else if (kw("i16x8")) v = ExpectedValue.Exact(parseI16x8());
		else if (kw("i32x4")) v = ExpectedValue.Exact(parseI32x4());
		else if (kw("i64x2")) v = ExpectedValue.Exact(parseI64x2());
		else if (kw("f32x4")) {
			var nested = Array<ExpectedValue>.new(4);
			for (i < nested.length) nested[i] = parseFloat(false);
			v = ExpectedValue.F32x4(nested);
		} else if (kw("f64x2")) {
			var nested = Array<ExpectedValue>.new(2);
			for (i < nested.length) nested[i] = parseFloat(true);
			v = ExpectedValue.F64x2(nested);
		} else error1((line, col), "expected v128 const shape", ());
		return v;
	}
	def parseFloat(is64: bool) -> ExpectedValue {
		var prev = pos;
		var loc = (line, col);
		var c = input[pos], sign = 0;
		if (c == '-') {
			sign = 1;
			pos++;
			if (!more(1)) {
				error1(loc, "expected float literal, got EOF", ());
				return ExpectedValue.Exact(if(is64, Values.F64_0, Values.F32_0));
			}
			c = input[pos];
		}
		var v: ExpectedValue;
		if (c == '0') {
			var x = peek_ch(1);
			if (x == 'x' || x == 'X') {
				pos += 2;
				v = ExpectedValue.Exact(parseFloatHex(loc, sign, is64));
			}
			else v = ExpectedValue.Exact(parseFloatDec(loc, sign, is64));
		} else if (peek_kw(0, "nan")) {
			pos += 3;
			v = parseFloatNan(loc, sign, is64);
		} else if (peek_kw(0, "infinity")) {
			pos += 8;
			v = ExpectedValue.Exact(selectInfinity(sign, is64));
		} else if (peek_kw(0, "inf")) {
			pos += 3;
			v = ExpectedValue.Exact(selectInfinity(sign, is64));
		} else {
			v = ExpectedValue.Exact(parseFloatDec(loc, sign, is64));
		}
		col += (pos - prev);
		skip();
		return v;
	}
	def selectInfinity(sign: int, is64: bool) -> Value {
		if (is64) {
			return if(sign == 1, Values.F64_minus_infinity, Values.F64_infinity);
		} else {
			return if(sign == 1, Values.F32_minus_infinity, Values.F32_infinity);
		}
	}
	def parseFloatNan(loc: (int, int), sign: int, is64: bool) -> ExpectedValue {
		var mantissa = 0x8000000000000000ul;  // quiet nan
		if (peek_kw(0, ":0x") || peek_kw(0, ":0X")) {
			eat(3);
			var tag = parseIntHex(loc, if(is64, POS_I64_LIMITS, POS_I32_LIMITS));
			if (tag == 0) error1(loc, "nan tag bits cannot be 0", ());
			mantissa = tag << if(is64, byte.!(12), byte.!(41));
		} else if (peek_kw(0, ":canonical")) {
			eat(10);
			return if(is64, ExpectedValue.CanonicalF64NaN, ExpectedValue.CanonicalF32NaN);
		} else if (peek_kw(0, ":arithmetic")) {
			eat(11);
			return if(is64, ExpectedValue.ArithmeticF64NaN, ExpectedValue.ArithmeticF32NaN);
		}
		var v = if(is64, Value.F64(Floats.f64_nan_bits(sign, mantissa)),
				Value.F32(Floats.f32_nan_bits(sign, u32.!(mantissa >> 32))));
		return ExpectedValue.Exact(v);
	}
	def parseFloatHex(loc: (int, int), sign: int, is64: bool) -> Value {
		var bits: u64;
		var a = input, max = a.length;
		var exp = 0, expadd = 0;
		var count = 0, countadd = 0;
		while (pos < max) {
			var ch = a[pos];
			if (ch == '_') {
				// skip _ in float literal
				count -= countadd;
			} else if (ch == '.') {
				if (expadd != 0) error1(loc, "invalid float literal", ());
				expadd = -4;
			} else {
				var v = Chars.hexValue(ch);
				if (v < 0 || v > 15) break;
				if (v != 0) countadd = 1;  // might be first nonzero
				if (count < 16) {
					bits = (bits << 4) + u64.!(v);
					exp += expadd;
				}
			}
			pos++;
			count += countadd;
		}
		var ch = peek_ch(0);
		if (ch == 'p' || ch == 'P') {
			pos++;
			var psign = 1;
			ch = peek_ch(0);
			if (ch == '+') pos++;
			else if (ch == '-') { pos++; psign = -1; }
			exp += psign * int.view(parseIntDec(loc, NEG_I32_LIMITS));
			// TODO: check binary exponent range
		}
		if (bits == 0) {
			// All bits are 0 => 0 ^ N == 0
			if (is64) {
				return if(sign == 1, Values.F64_minus_0, Values.F64_0);
			} else {
				return if(sign == 1, Values.F32_minus_0, Values.F32_0);
			}
		}
		var sig = 0;
		var mantissa: u64;
		if (bits != 0) {
			// count the number of bits after high-order 1
			for (b = bits; b != 1; b = b >> 1) { exp++; sig++; }
			mantissa = bits << byte.!(64 - sig);
		}

		return if(is64, Value.F64(Floats.f64_bits(sign, exp, mantissa)),
				Value.F32(Floats.f32_bits(sign, exp, u32.!(mantissa >> 32))));
	}
	def parseFloatDec(loc: (int, int), sign: int, is64: bool) -> Value {
		error1(loc, "expected hexadecimal float literal", ());
		return if(is64, Values.F64_nan, Values.F32_nan);
	}
	def parseRefNull(loc: (int, int)) -> Value {
		if (kw("exn") || kw("noexn")) return Values.REF_NULL;
		if (kw("extern") || kw("noextern")) return Values.REF_NULL;
		if (kw("func") || kw("nofunc")) return Values.FUNCREF_NULL;
		if (kw("any") || kw("none")) return Values.REF_NULL;
		error1(loc, "expected [no]extern|[no]func|any|none", ());
		return Values.REF_NULL;
	}
	def parseRefExtern(loc: (int, int)) -> Value {
		var i = int.view(parseIntDec(loc, NEG_I32_LIMITS));
		return Value.Ref(makeRefExtern(i));
	}
	def parseRegister() -> StCommand.Register {
		var regname = parseString();
		var varname = parseVarName();
		return StCommand.Register(varname, regname);
	}
	def parseAction() -> StAction {
		var action: StAction;
		var loc = (line, pos);
		if (kw("invoke")) {
			action = parseInvoke();
		} else if (kw("get")) {
			action = parseGlobalGet();
		} else {
			error1(loc, "expected invoke or get action", ());
		}
		return action;
	}
	def parseModuleOrAction() -> StModuleOrAction {
		var loc = (line, pos);
		if (kw("invoke")) {
			return StModuleOrAction.Action(parseInvoke());
		} else if (kw("get")) {
			return StModuleOrAction.Action(parseGlobalGet());
		} else if (kw("module")) {
			return StModuleOrAction.Module(parseModule());
		} else {
			error1(loc, "expected invoke, get, or module", ());
			var r: StModuleOrAction;
			return r;
		}
	}

	def parseMaybeString() -> string {
		if (peek_ch(0) != '\"') return null;
		return parseString();
	}
	def parseString() -> string {
		strbuf.reset();
		doString();
		return strbuf.extract();
	}
	def doString() {
		// Parses string characters into {this.strbuf}
		var loc = (line, col);
		if (!more(1)) return error1(loc, "expected string, got EOF", ());
		var c = input[pos];
		if (c != '\"') return error1(loc, "expected string starting quote", ());
		pos++;
		col++;
		while (ok && more(1)) {
			var c = input[pos];
			if (c == '\"') return advance(1); // end of string

			if (c < ' ' || c > 127) {
				return error1((line, col), "invalid character 0x%x in string", c);
			}
			if (c == '\\') {
				doEscapedChar();
			} else {
				strbuf.putc(c);
				pos++;
				col++;
			}

		}
		error1((line, col), "unexpected end of string", ());
	}
	def doEscapedChar() {
		var ch = -1;
		match (peek_ch(1)) {
			'\"' => ch = '\"';
			'\\' => ch = '\\';
			'n' => ch = '\n';
			'r' => ch = '\r';
			't' => ch = '\t';
			'\'' => ch = '\'';
			'u', 'U' => {
				// Unicode escape
				eat(2);
				if (peek_ch(0) != '{') {
					return error1((line, col), "invalid escaped unicode, expected {", ());
				}
				eat(1);
				var codepoint = parseIntHex((line, col), POS_I32_LIMITS);
				strbuf.pututf8(u32.!(codepoint));
				if (peek_ch(0) != '}') {
					return error1((line, col), "invalid escaped unicode, expected }", ());
				}
				eat(1);
				return;
			}
			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
			'a', 'b', 'c', 'd', 'e', 'f',
			'A', 'B', 'C', 'D', 'E', 'F' => {
				// expect hexadecimal escape
				var h = peek_hex(1), l = peek_hex(2);
				strbuf.putc(byte.!(h << 4 | l));
				eat(3);
				return;
			}
			_ => {
				// invalid escaped char or EOF
				if (more(1)) error1((line, col), "invalid escaped char", ());
				eat(1);
				return;
			}
		}
		// proper escaped character, fell through
		eat(2);
		strbuf.putc(byte.!(ch));
	}

	// expect and consume the given character {c}
	def expect_ch(c: byte) -> bool {
		var loc = (line, col);
		if (!ch(c)) { error1(loc, "expected \'%c\'", c); return false; }
		return true;
	}
	// Peek at the character {offset} ahead, returning -1 if that is EOF.
	def peek_ch(offset: int) -> int {
		if (more(1 + offset)) return input[pos + offset];
		return -1;
	}
	// Peek at the characters {offset} ahead, returning true if they match {kw}.
	def peek_kw(offset: int, kw: string) -> bool {
		if (!more(kw.length + offset)) return false;
		for (i < kw.length) {
			if (input[pos + i + offset] != kw[i]) return false;
		}
		return true;
	}
	// Advance the position and column by {n} bytes.
	def eat(n: int) {
		pos += n;
		col += n;
	}
	// Peek at the character {offset} ahead, returning its hexadecimal
	// value.
	def peek_hex(offset: int) -> int {
		var h = input[pos + offset];
		if (!Chars.isHex(h)) {
			error1((line, col + offset), "expected hexadecimal", ());
			return 0;
		}
		return Chars.hexValue(h);
	}
	// Eat the character {c} if it is next in the input, returning {true} if so.
	def ch(c: byte) -> bool {
		if (!more(1)) return false;
		if (input[pos] != c) return false;
		advance(1);
		return true;
	}

	// expect and consume the given character {c}
	def expect_kw(k: string) -> bool {
		var loc = (line, col);
		if (!kw(k)) { error1(loc, "expected \'%s\'", k); return false; }
		return true;
	}
	// Eat the keyword {k} if it is next in the input, returning {true} if so.
	def kw(k: string) -> bool {
		var l = k.length;
		if (!more(l)) return false;
		for (i < l) {
			if (input[pos + i] != k[i]) return false;
		}
		if (more(l+1)) {
			var c = input[pos + l];
			if (isKeywordMiddle(c)) return false;
		}
		advance(l);
		return true;
	}

	// Advance by {k} non-whitespace characters, and then skip whitespace.
	def advance(k: int) {
		pos += k;
		col += k;
		skip();
	}
	// Skip whitespace from the current position.
	def skip() {
		while (pos < input.length) {
			var c = input[pos];
			match (c) {
				' ' => {
					col++;
					pos++;
				}
				'\t' => {
					col = (col + 8) & ~7;
					pos++;
				}
				'\n' => {
					col = 1;
					line++;
					pos++;
				}
				';' => {
					var p = pos, d = input;
					while (p++ < d.length && d[p] != '\n') ;
					pos = p;
				}
				_ => return;
			}
		}
	}
	def more(num: int) -> bool {
		return input.length - pos >= num;
	}
	def error1<T>(loc: (int, int), fmt: string, arg: T) {
		ok = false;
		if (loc.0 < error_loc.0 ||
			(loc.0 == error_loc.0 && loc.1 < error_loc.1)) {
			error_loc = loc;
			error_msg = Strings.format1(fmt, arg);
		}
	}
	def printCurrentLine() {
		var b = pos - 1;
		while (b >= 0) { // scan backwards to previous newline
			if (input[b] == '\n') { b++; break; }
			b--;
		}
		if (b < 0) b = 0;
		var col = 0;
		while (b < input.length) { // print current line
			var c = input[b];
			if (c == '\n') break;
			if (b < pos) {
				if (c == '\t') col = (col + 8) & ~7;
				else col++;
			}
			System.putc(c);
			b++;
		}
		System.ln();
		for (i < col) System.putc(' '); // print caret pointing to column
		System.putc('^');
		System.ln();
	}
}
def isKeywordMiddle(c: byte) -> bool {
	return 'a' <= c && c <= 'z' ||
		'A' <= c && c <= 'Z' ||
		'0' <= c && c <= '9' ||
		c == '_' ||
		c == '-';
}

// Represents a command with location.
class SpecTestCommand(loc: (int, int), cmd: StCommand) { }

// For action commands, represents an expected value or set of values.
type ExpectedValue {
	case Exact(v: Value);
	case CanonicalF32NaN;
	case ArithmeticF32NaN;
	case CanonicalF64NaN;
	case ArithmeticF64NaN;
	case F32x4(nested: Array<ExpectedValue>);
	case F64x2(nested: Array<ExpectedValue>);
	case RefNull;
	case RefFunc;
	case RefData;
	case RefExtern;
	case RefArray;
	case RefStruct;
	case RefEq;
	case RefI31;

	def matches(that: Value) -> bool {
		match (this) {
			Exact(v) => {
				return v == that;
			}
			CanonicalF32NaN => {
				if (!Value.F32.?(that)) return false;
				var bits = Value.F32.!(that).bits;
				return (bits << 1) == (Values.F32_nan.bits << 1);
			}
			ArithmeticF32NaN => {
				if (!Value.F32.?(that)) return false;
				var bits = Value.F32.!(that).bits;
				var exp1 = ((bits >> 22) & 0x1FF);
				return exp1 == 0x1FF;
			}
			CanonicalF64NaN => {
				if (!Value.F64.?(that)) return false;
				var bits = Value.F64.!(that).bits;
				return (bits << 1) == (Values.F64_nan.bits << 1);
			}
			ArithmeticF64NaN => {
				if (!Value.F64.?(that)) return false;
				var bits = Value.F64.!(that).bits;
				var exp1 = ((bits >> 51) & 0xFFF);
				return exp1 == 0xFFF;
			}
			F32x4(nested) => {
				if (!Value.V128.?(that)) return false;
				var t = Value.V128.!(that);
				var f0 = Value.F32(u32.view(t.low));
				var f1 = Value.F32(u32.view(t.low >> 32));
				var f2 = Value.F32(u32.view(t.high));
				var f3 = Value.F32(u32.view(t.high >> 32));
				return nested[0].matches(f0) && nested[1].matches(f1) && nested[2].matches(f2) && nested[3].matches(f3);
			}
			F64x2(nested) => {	
				if (!Value.V128.?(that)) return false;
				var t = Value.V128.!(that);
				var d0 = Value.F64(t.low);
				var d1 = Value.F64(t.high);
				return nested[0].matches(d0) && nested[1].matches(d1);
			}
			RefNull => match (that) {
				Ref(val) => return val == null;
				_ => return false;
			}
			RefFunc => match (that) {
				Ref(val) => return Function.?(val);
				_ => return false;
			}
			RefArray => match (that) {
				Ref(val) => return HeapArray.?(val);
				_ => return false;
			}
			RefStruct => match (that) {
				Ref(val) => return HeapStruct.?(val);
				_ => return false;
			}
			RefEq => match (that) {
				Ref(val) => return HeapObject.?(val);
				I31(val) => return true;
				_ => return false;
			}
			RefData => match (that) {
				Ref(val) => return HeapObject.?(val);
				_ => return false;
			}
			RefExtern => match (that) {
				Ref(val) => return HostObject.?(val) || HeapObject.?(val);
				I31(val) => return true;
				_ => return false;
			}
			RefI31 => match (that) {
				Ref(val) => return true;
				I31(val) => return true;
				_ => return false;
			}
		}
	}
	def render(buf: StringBuilder) -> StringBuilder {
		var str: string;
		match (this) {
			Exact(v) => return Values.render(v, buf);
			CanonicalF32NaN => str = "f32:nan:canonical";
			ArithmeticF32NaN => str = "f32:nan:arithmetic";
			CanonicalF64NaN => str = "f64:nan:arithmetic";
			ArithmeticF64NaN => str = "f64:nan:arithmetic";
			F32x4(nested) => {
				buf.puts("f32x4:{");
				for (i < nested.length) {
					if (i > 0) buf.csp();
					nested[i].render(buf);
				}
				buf.puts("}");
				return buf;
			}
			F64x2(nested) => {
				buf.puts("f64x2:{");
				for (i < nested.length) {
					if (i > 0) buf.csp();
					nested[i].render(buf);
				}
				buf.puts("}");
				return buf;
			}
			RefNull => str = "ref.null";
			RefFunc => str = "ref.func";
			RefArray => str = "ref.array";
			RefStruct => str = "ref.struct";
			RefEq => str = "ref.eq";
			RefData => str = "ref.data";
			RefExtern => str = "ref.extern";
			RefI31 => str = "ref.i31";
		}
		return buf.puts(str);
	}
}

// The commands that can be in a .bin.wast file.
type StCommand {
	case Module(module: StModule);
	case Register(varname: string, regname: string);
	case Action(action: StAction);
	case AssertReturn(action: StAction, expected: Array<ExpectedValue>);
	case AssertTrap(action: StAction, msg: string);
	case AssertExhaustion(action: StAction, msg: string);
	case AssertInvalid(module: StModule, msg: string);
	case AssertMalformed(module: StModule, msg: string);
	case AssertUnlinkable(module: StModule, msg: string);
	case AssertUninstantiable(module: StModule, msg: string);
	case AssertException(action: StAction);
	case AssertSuspension(action: StAction);
}
type StAction {
	case Invoke(varname: string, funcname: string, args: Array<Value>);
	case GlobalGet(varname: string, globalname: string);
}
type StModule {
	case Binary(isdef: bool, varname: string, bytes: Array<byte>);
	case Quote(isdef: bool, varname: string, source: string);
	case Instance(instname: string, modname: string);
}
type StModuleOrAction {
	case Module(module: StModule);
	case Action(action: StAction);
}

// Used internally in parsing.
class IntLimits(max_hex: byte, max_u_div10: u64, max_u_mod10: u64) {
	def is64 = max_hex > 8;
}

def NEG_I8_LIMITS = IntLimits.new(2, 0x80u / 10, 0x80u % 10);
def POS_I8_LIMITS = IntLimits.new(2, 0xFFu / 10, 0xFFu % 10);
def NEG_I16_LIMITS = IntLimits.new(4, 0x8000u / 10, 0x8000u % 10);
def POS_I16_LIMITS = IntLimits.new(4, 0xFFFFu / 10, 0xFFFFu % 10);
def NEG_I32_LIMITS = IntLimits.new(8, 0x80000000u / 10, 0x80000000u % 10);
def POS_I32_LIMITS = IntLimits.new(8, 0xFFFFFFFFu / 10, 0xFFFFFFFFu % 10);
def NEG_I64_LIMITS = IntLimits.new(16, 0x8000000000000000uL / 10, 0x8000000000000000uL % 10);
def POS_I64_LIMITS = IntLimits.new(16, 0xFFFFFFFFFFFFFFFFuL / 10, 0xFFFFFFFFFFFFFFFFuL % 10);
