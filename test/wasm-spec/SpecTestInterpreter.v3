// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Interpreter for spec test commands {StCommand}.
def OUT = Trace.OUT;
class SpecTestInterpreter(engine: Engine, filename: string) {
	def env = StEnv<StInstance>.new();
	def instances = StEnv<StInstance>.new();
	def modules = StEnv<Module>.new();
	var last_module: StModuleResult;
	var ok = true;
	var loc: (int, int);
	var skip_actions = false;
	var ignore_failure = false;

	new() {
		// Register the exported module for specification tests
		var sti = StInstance.new(null);
		var sig_f_v = Canon.sigPR(SigCache.arr_f, SigCache.arr_v);
		var sig_d_v = Canon.sigPR(SigCache.arr_d, SigCache.arr_v);
		var sig_dd_v = Canon.sigPR(SigCache.arr_dd, SigCache.arr_v);
		sti.register("print", HostFunction.new(null, SigCache.v_v, print));
		sti.register("print_i32", HostFunction.new(null, SigCache.i_v, print));
		sti.register("print_i64", HostFunction.new(null, SigCache.l_v, print));
		sti.register("print_f32", HostFunction.new(null, sig_f_v, print));
		sti.register("print_f64", HostFunction.new(null, sig_d_v, print));
		sti.register("print_i32_f32", HostFunction.new(null, SigCache.if_v, print));
		sti.register("print_f64_f64", HostFunction.new(null, sig_dd_v, print));
		sti.register("table", Table.new(ValueTypes.FUNCREF, TableDecl.new(ValueTypes.FUNCREF, SizeConstraint(false, 10, Max.Set(20)))));
		sti.register("memory", Target.newMemory(MemoryDecl.new(SizeConstraint(false, 1, Max.Set(2)), false, BpConstants.log2_WASM_PAGE_SIZE)));
		sti.register("global_i32", newGlobal(ValueType.I32, InitExpr.I32(666), Value.I32(666)));
		sti.register("global_i64", newGlobal(ValueType.I64, InitExpr.I64(666), Value.I64(666)));
		sti.register("global_f32", newGlobal(ValueType.F32, InitExpr.F32(0x4426A666), Value.F32(0x4426A666)));
		sti.register("global_f64", newGlobal(ValueType.F64, InitExpr.F64(0x4084D4CCCCCCCCCD), Value.F64(0x4084D4CCCCCCCCCD)));
		env.register("spectest", sti);
	}

	def run(commands: Vector<SpecTestCommand>) -> bool {
		for (i < commands.length) {
			if (!ok) break;
			var cmd = commands[i];
			loc = cmd.loc;
			if (Trace.spectest) {
				OUT.puts("SpecExecute: ");
				OUT.puts(cmd.cmd.name);
				OUT.put2(" @ %d:%d", cmd.loc.0, cmd.loc.1);
				OUT.ln();
			}
			doCommand(cmd);
		}
		return ok;
	}
	def doCommand(cmd: SpecTestCommand) {
		match (cmd.cmd) {
			Module(module) => {
				last_module = doModule(module);
			}
			Register(varname, regname) => {
				var sti = getInstance(varname);
				if (!ok) return;
				env.register(regname, sti);
			}
			Action(action) => {
				if (skip_actions) return;
				doAction(action);
			}
			AssertReturn(action, expected) => {
				if (skip_actions) return;
				var r = doAction(action);
				var err = false;
				match (r) {
					Value(vals) => err = !matchMultiValue(expected, vals);
					_ => err = true;
				}
				if (err) {
					error(Strings.format2("assert_return expected %q, got %q", renderMultiValue(expected, _), r.render));
				}
			}
			AssertTrap(action, msg) => {
				if (skip_actions) return;
				var r = doAction(action);
				if (!Result.Throw.?(r)) {
					error(Strings.format1("assert_trap expected trap, got %q", r.render));
				}
			}
			AssertExhaustion(action, msg) => {
				if (skip_actions) return;
				var r = doAction(action);
				if (!Result.Throw.?(r)) {
					error(Strings.format1("assert_exhaustion expected trap, got %q", r.render));
				}
			}
			AssertInvalid(module, msg) => {
				var exp = StModuleResult.ParseError(ErrorGen.new("test"));
				var got = doModule(module);
				assertModuleResult(exp, got);
			}
			AssertMalformed(module, msg) => {
				var exp = StModuleResult.ParseError(ErrorGen.new("test"));
				var got = doModule(module);
				assertModuleResult(exp, got);
			}
			AssertUnlinkable(module, msg) => {
				var exp = StModuleResult.LinkError("");
				var got = doModule(module);
				assertModuleResult(exp, got);
			}
			AssertUninstantiable(module, msg) => {
				var r: TrapReason;
				var exp = StModuleResult.StartTrap(r);
				var got = doModule(module);
				assertModuleResult(exp, got);
			}
			AssertException(action) => {
				if (skip_actions) return;
				var r = doAction(action);
				match (r) {
					Throw(trap) => {
//TODO						if (!Exception.?(trap)) error(Strings.format1("assert_exception expected exception, got %q", r.render));
					}
					_ => {
						error(Strings.format1("assert_exception expected exception, got %q", r.render));
					}
				}
			}
			AssertSuspension(action) => {
				if (skip_actions) return;
				var r = doAction(action);
				match (r) {
					Throw(t) => if (Trap.?(t) && Trap.!(t).reason == TrapReason.INVALID_SUSPEND) return;
					_ => ;
				}
				error(Strings.format1("assert_suspension expected suspension, got %q", r.render));
			}
		}
	}
	def matchMultiValue(expected: Array<ExpectedValue>, got: Array<Value>) -> bool {
		for (i < expected.length) {
			if (!expected[i].matches(got[i])) return false;
		}
		return true;
	}
	def renderMultiValue(expected: Array<ExpectedValue>, buf: StringBuilder) -> StringBuilder {
		if (expected.length == 1) return expected[0].render(buf);
		buf.puts("[");
		for (i < expected.length) {
			if (i > 0) buf.puts(", ");
			expected[i].render(buf);
		}
		buf.puts("]");
		return buf;
	}
	def assertModuleResult(expected: StModuleResult, got: StModuleResult) {
		if (expected.tag != got.tag) {
			error(Strings.format2("expected %s, got %s", expected.name, got.name));
		}
	}
	def doModule(stm: StModule) -> StModuleResult {
		var module: Module;
		var bindname: string;
		match (stm) {
			Binary(isdef, varname, bytes) => {
				bindname = varname;
				var extensions = engine.extensions;
				var limits = Limits.new().set(extensions);
				var err = ErrorGen.new("test");
				var mp = BinParser.new(extensions, limits, err, "test");
				mp.tiering = Execute.tiering;
				module = mp.push(bytes, 0, bytes.length).finish();
				if (err.error()) return StModuleResult.ParseError(err);
				BasicTracing.instrumentModule(module);
				if (isdef) {
					modules.register(varname, module);
					return StModuleResult.Module(module);
				}
			}
			Quote(_, varname, source) => {
				return StModuleResult.Quote(source);
			}
			Instance(instname, mname) => {
				bindname = instname;
				if (mname != null) {
					module = modules.lookup(mname);
				} else {
					if (!StModuleResult.Module.?(last_module)) return last_module;
					module = StModuleResult.Module.!(last_module).mod;
				}
			}
		}
		var i = doInstantiate(module);
		if (bindname != null) {
			match (i) {
				Instance(sti) => {
					instances.register(bindname, sti);
				}
				ParseError(err) => {
					error(Strings.format1("expected valid module, got invalid: %s", err.error_msg));
				}
				LinkError(msg) => {
					error(Strings.format1("expected valid module, got link error: %s", msg));
				}
				_ => ;
			}
		}
		return i;
	}
	def doAction(action: StAction) -> Result {
		match (action) {
			Invoke(varname, funcname, args) => {
				return doInvoke(varname, funcname, args);
			}
			GlobalGet(varname, globalname) => {
				return doGlobalGet(varname, globalname);
			}
		}
	}
	def error1<T>(msg: string, p: T) -> Result.Throw {
		return Result.Throw(Trap.new(TrapReason.ERROR, Strings.format1(msg, p), null));
	}
	def doInvoke(varname: string, funcname: string, args: Array<Value>) -> Result {
		if (Trace.spectest) {
			OUT.put1(" invoke \"%s\"", funcname);
			Values.renderVals(OUT, args);
			OUT.ln();
		}
		// pop instance
		var sti = getInstance(varname);
		if (!ok) return error1("Could not get instance", ());
		// lookup function
		var exp = sti.lookup(funcname);
		if (exp == null) return error1("func \"%s\" not found", funcname);
		if (!WasmFunction.?(exp)) return error1("export \"%s\" is not a function", funcname);
		var func = WasmFunction.!(exp);
		return Execute.call(func, args);
	}
	def doGlobalGet(varname: string, globalname: string) -> Result {
		// pop instance
		var sti = getInstance(varname);
		if (!ok) return error1("Could not get instance", ());
		// lookup global
		var exp = sti.lookup(globalname);
		if (exp == null) return error1("global \"%s\" not found", globalname);
		if (!Global.?(exp)) return error1("export \"%s\" is not a global", globalname);
		var global = Global.!(exp);
		return Result.Value([global.value]);
	}
	def getInstance(varname: string) -> StInstance {
		if (varname == null) {
			var m = last_module;
			if (StModuleResult.Module.?(m)) m = doInstantiate(StModuleResult.Module.!(m).mod);
			match (m) {
				Instance(sti) => return sti;
				Module(m) => {
					error("instantiation failed");
				}
				Quote(source) => {
					error("expected binary module, got quoted module");
				}
				ParseError(err) => {
					error(Strings.format1("expected valid module, got invalid: %s", err.error_msg));
				}
				CompileError(err) => {
					error(Strings.format1("expected valid module, got invalid: %s", err.error_msg));
				}
				LinkError(msg) => {
					error(Strings.format1("expected valid module, got link error: %s", msg));
				}
				StartTrap(reason) => error(Strings.format1("expected valid module, got start trap: %s", reason.name));
			}
			return null;
		}
		var i = instances.lookup(varname);
		if (i == null) error(Strings.format1("module %s not found", varname));
		return i;
	}
	def error(msg: string) -> bool {
		if (!ok) return false;
		ok = false;
		if (ignore_failure) {
			OUT.put3("##-ok: (ignored expected failure: @ %d:%d %s)", loc.0, loc.1, msg);
			OUT.ln();
		} else {
			OUT.put3("##-fail: %s @ %d:%d ", filename, loc.0, loc.1);
			OUT.puts(msg);
			OUT.ln();
		}
		return false;
	}
	def doInstantiate(module: Module) -> StModuleResult {
		var imports = Array<Exportable>.new(module.imports.length);
		for (j < module.imports.length) {
			var i = module.imports[j];
			var sti = env.lookup(i.imp.module_name);
			if (sti == null) return StModuleResult.LinkError(Strings.format1("import module \"%s\" not found", i.imp.module_name));
			var exp = sti.lookup(i.imp.field_name);
			if (exp == null) return StModuleResult.LinkError(Strings.format2("import \"%s\".\"%s\" not found", i.imp.module_name, i.imp.field_name));
			imports[j] = exp;
		}
		var i = Instantiator.new(engine.extensions, module, imports, ErrorGen.new(module.filename));
		var r = i.run();
		if (i.trap_reason != TrapReason.NONE) return StModuleResult.StartTrap(i.trap_reason);
		if (!i.error.ok()) return StModuleResult.LinkError(i.error.error_msg);
		if (module.start_function >= 0) {
			var func = r.functions[module.start_function];
			var result = Execute.call(func, []);
			match (result) {
				Value => ; // ignore result(s); should be none
				Switch => return StModuleResult.StartTrap(TrapReason.INVALID_SUSPEND);
				Throw(thrown) => match (thrown) {
					x: Trap => return StModuleResult.StartTrap(x.reason);
					x: Exception => return StModuleResult.StartTrap(TrapReason.NONE); // TODO
				}
			}
		}
		return StModuleResult.Instance(StInstance.new(r));
	}
	def print(args: Range<Value>) -> HostResult {
		OUT.puts("called host spectest.print?");
		Values.renderVals(OUT, args);
		OUT.ln();
		return HostResult.Value0;
	}
}

def newGlobal(t: ValueType, i: InitExpr, v: Value) -> Global {
	var g = Global.new(t, GlobalDecl.new(t, false, i));
	g.value = v;
	return g;
}
type StModuleResult {
	case Module(mod: Module);
	case Instance(sti: StInstance);
	case Quote(source: string);
	case ParseError(r: ErrorGen);
	case CompileError(r: ErrorGen);
	case LinkError(msg: string);
	case StartTrap(reason: TrapReason);
}

class StEnv<T> {
	def modules = Vector<(string, T)>.new();
	def register(name: string, t: T) {
		if (name != null) modules.put(name, t);
	}
	def lookup(name: string) -> T {
		var d: T;
		if (name == null) return d;
		for (i < modules.length) {
			var m = modules[i];
			if (Strings.equal(m.0, name)) return m.1;
		}
		return d;
	}
}
class StInstance(instance: Instance) extends StEnv<Exportable> {
	new() {
		if (instance != null) {
			for (i < instance.exports.length) {
				var name = instance.module.exports[i].0;
				var e = instance.exports[i];
				register(name, e);
			}
		}
	}
}
