// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses and runs binary WebAssembly spec tests (.bin.wast).
def OUT = Trace.OUT;
component spectest {
	def group = OptionsRegistry.newGroup("SPECTEST", null);
	def expected = Strings.newMap<bool>();
	
	def HELP = group.newFlag("help", printHelp, "Print command-line help.");
	def SKIP_ACTIONS = group.newBoolOption("skip-actions", false, "Parse only and skip actions.");
	def EXPECTED = group.newPathOption("expected", null, "File containing expected failures to be ignored.")
		.onSet(TestUtil.loadExpectedFile(expected, _));
	def trace = TraceBuilder.new();
	var helped = false;

	private def gen = U64Generator.new(114514);
	private def getGuard(obj: HostObject) -> u64 { return NumberedObject.!(obj).guard; }

	def main(args: Array<string>) -> int {
		var count = 0;
		var engine = Engine.new();
		var err = ErrorGen.new("spectest");
		err.abs(u64.!(0));
		OptionsRegistry.filterArgs(args, err);
		engine.extensions = EngineOptions.extensions;
		Target.getHostObjectGuardBytes = getGuard;
		for (i < args.length) {
			var a = args[i];
			if (a == null) continue;
			if (Strings.endsWith(a, ".wast")) count++;
		}
		if (helped) return 0;
		if (count == 0) {
			System.puts("spectest: no input files\n");
			return 3;
		}
		if (count > 1) {
			OUT.puts("##>");
			OUT.putd(count);
			OUT.ln();
		}
                var result = 0;
		for (a in args) {
			if (a == null) continue;
                        if (Strings.endsWith(a, ".wast")) result |= runTest(engine, a);
		}

		Metrics.report();
		return result;
	}
	def printHelp(str: string) {
		helped = true;
		Trace.OUT.puts("Wizard Engine ").puts(Version.version).putc('.').putd(Version.minorVersion).ln();
		Trace.OUT.puts("Usage: spectest [options] <.bin.wast files>\n\n");
		OptionsRegistry.print();
	}
	def runTest(engine: Engine, filename: string) -> int {
		OUT.puts("##+");
		OUT.puts(filename);
		OUT.ln();
		var input = System.fileLoad(filename);
		if (input == null) {
			OUT.puts("##-fail: could not load file").ln();
			return 1;
		}
		var before = System.ticksUs();
		var p = SpecTestParser.new(filename, input, makeExternRef(Vector.new(), _));
		p.parseFile();
		if (Trace.test) {
			var diff = System.ticksUs() - before;
			OUT.puts("##@");
			OUT.puts(filename);
			OUT.puts(" : ");
			OUT.putd(diff);
			OUT.puts(" us\n");
		}
		if (p.ok) {
			var ip = SpecTestInterpreter.new(engine, filename);
			ip.skip_actions = SKIP_ACTIONS.val;
			ip.ignore_failure = expected[filename];
			if (ip.run(p.commands)) {
                            OUT.puts("##-ok").ln();
                        } else {
                            return 1;
                        }
		} else if (expected[filename]) {
			OUT.put3("##-ok: (ignored expected failure: @ %d:%d %s)", p.error_loc.0, p.error_loc.1, p.error_msg).ln();
		} else {
			OUT.put1("##-fail: %s ", filename);
			OUT.put3("%d:%d %s", p.error_loc.0, p.error_loc.1, p.error_msg).ln();
                        return 1;
		}
                return 0;
	}
	def makeExternRef(cache: Vector<HostObject>, i: int) -> HostObject {
		if (i >= cache.length || cache[i] == null) {
			var obj = NumberedObject.new(i);
			obj.guard = gen.next();
			cache.set(i, obj);
		}
		return cache[i];
	}
	def renderBinaryModule(data: Array<byte>, pos: int, length: int) {
		OUT.puts("(module binary");
		for (i < length) {
			if (i % 16 == 0) {
				if (i > 0) OUT.puts("\"");
				OUT.puts("\n  \"");
			}
			OUT.put1("\\%x", data[pos + i]);
		}
		OUT.puts("\")").ln();
	}
	def filterOptions(args: Array<string>, func: string -> bool) {
		for (i < args.length) {
			var a = args[i];
			if (a != null && func(a)) args[i] = null;
		}
	}
}

// Helper class for generating externref guards when {TestFeature.wideExtRef == true}.
class U64Generator(seed: u64) {
	var curr = seed;
	def next() -> u64 {
		curr = 9007199254740881ul * curr + 10039;
		return curr;
	}
}
