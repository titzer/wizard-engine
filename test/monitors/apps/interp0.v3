/// Simple virgil profile to simulate a switch-over loop interpreter over a custom bytecode.
/// this is compiled to wasm target to test the profile_bytecode monitor.
///
/// The bytecode format for this test is as follows:
/// 1 ~ 6 (no Imm): simple opcodes handled by the interpreter loop directly
/// 7 (1 Imm representing callee index): call user defined functions
/// 8 ~ 9 (no Imm): call different intrinsic functions
/// 13 (1 Imm representing forward jump): increment pc by Imm bytes
/// 14 (1 Imm representing backward jump): decrement pc by Imm bytes
/// 15: return from the function

def func_bytecodes: Array<Array<u4>> = [
    [4,2,3,13,3,15,7,2,1,2,7,3,3,15], // entry point to the simple interpreted program
    [1,2,3,4,5,6], // user defined func #1
    [1,1,2,3,13,4,0,1,2,3,8,7,1,15], // user defined func #2, calls user defined func #1 and intrinsic #0
    [13,3,15,9,14,2] // calls intrinsic functions #1, #2, #3, #4, #5, then returns
];

def main() -> int {
    interp_loop(func_bytecodes[0]);
    return 0;
}

def interp_loop(bytecode: Array<u4>) {
    var buf_len = bytecode.length;
    var pc = 0;
    while (pc < buf_len) {
        var op = bytecode[pc];
        match (op) {
            0 => {
                var calculation = 1 + 2;
                pc = pc + 1;
            }
            1 => {
                var calculation = 1 * 2 + 5;
                pc += 1;
            }
            2 => {
                var calculation = 1 * 2 + 5 / 2;
                pc += 1;
            }
            3 => {
                var calculation = 1 * 2 + 5 << 1;
                pc += 1;
            }
            4 => pc += 1;
            5 => pc += 1;
            6 => pc += 1;
            7 => {
                var callee_idx = bytecode[pc + 1];
                interp_loop(func_bytecodes[callee_idx]);
                pc += 2;
            }
            8 => {
                // intrinsic #0
                intrinsic_0(pc);
                pc += 1;
            }
            9 => {
                // intrinsic #1
                intrinsic_1(pc);
                pc += 1;
            }
            10 => {
                // unused
                pc = 1/0;
            }
            11 => {
                // unused
                pc = 1/0;
            }
            12 => {
                // unused
                pc = 1/0;
            }
            13 => {
                var forward_jump = bytecode[pc + 1];
                pc = pc + forward_jump;
            }
            14 => {
                var backward_jump = bytecode[pc + 1];
                pc = pc - backward_jump;
            }
            15 => {
                return;
            }
        }
    }
}

def intrinsic_0(arg: int) -> int {
    var work = (123456 << 1) / 8 ^ 123;
    if (work > arg) {
        arg += 123;
    }
    return arg;
}

def intrinsic_1(arg: int) -> int {
    var work = (123456 << 1) / 8 ^ 123;
    return nested_0();
}

def nested_0() -> int {
    nested_1();
    nested_2();
    return 123;
}

def nested_1() -> int {
    return 123;
}

def nested_2() {
    nested_3();
}

def nested_3() -> int {
    return 1 + 2 + 3;
}