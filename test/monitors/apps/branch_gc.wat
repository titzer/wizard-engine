(module
  (start $start)
  (type $ft (func))
  (func $main (export "main")
    (call $test (i32.const 2))
  )
  (func $start
    (call $test (i32.const 1))
  )
  (elem declare func $f1 $f2)
  (func $f1)
  (func $f2 (param i32))
  (func $test (param i32)
    (loop $l
      (local.set 0 (i32.sub (local.get 0) (i32.const 1)))
      (call $test_br_on_null (ref.null func))
      (call $test_br_on_non_null (ref.null func))
      (call $test_br_on_null (ref.func $f1))
      (call $test_br_on_null (ref.func $f2))
      (call $test_br_on_non_null (ref.func $f1))
      (call $test_br_on_non_null (ref.func $f2))
      (drop (call $test_br_on_cast (ref.null func)))
      (drop (call $test_br_on_cast (ref.func $f1)))
      (drop (call $test_br_on_cast (ref.func $f2)))
      (drop (call $test_br_on_cast_fail (ref.null func)))
      (drop (call $test_br_on_cast_fail (ref.func $f1)))
      (drop (call $test_br_on_cast_fail (ref.func $f2)))
      (br_if $l (local.get 0))
    )
  )
  (func $test_br_on_null (param funcref)
    (br_on_null 0 (local.get 0))
    drop
  )
  (func $test_br_on_non_null (param funcref)
    (block (result funcref)
      (br_on_non_null 0 (local.get 0))
      (br 1)
    )
    drop
  )
  (func $test_br_on_cast (param funcref) (result (ref null $ft))
    (br_on_cast 0 (ref null func) (ref $ft) (local.get 0))
    drop
    (ref.null $ft)
  )
  (func $test_br_on_cast_fail (param funcref) (result funcref)
    (br_on_cast_fail 0 (ref null func) (ref $ft) (local.get 0))
  )
)
