enum Opcode(code: byte, imm: Immediate) {
	UNREACHABLE	(0x00, Immediate.NONE),
	NOP		(0x01, Immediate.NONE),
	LOCAL_GET	(0x02, Immediate.LEB),
	LOCAL_SET	(0x03, Immediate.LEB),
	DROP		(0x04, Immediate.NONE),
	I32_CONST	(0x05, Immediate.LEB),
	I32_ADD		(0x06, Immediate.NONE),
	I32_SUB		(0x07, Immediate.NONE),
	I32_MUL		(0x08, Immediate.NONE),
	I32_EQ		(0x09, Immediate.NONE),
	I32_LT		(0x0A, Immediate.NONE),
	I32_LTEQ	(0x0B, Immediate.NONE),
	BR		(0x0C, Immediate.LEB),
	BR_IF		(0x0D, Immediate.LEB),
	BR_IFZ		(0x0E, Immediate.LEB),
	DUP		(0x0F, Immediate.NONE)
}

enum Immediate {
	NONE,
	LEB
}

def GET = Opcode.LOCAL_GET.code;
def SET = Opcode.LOCAL_SET.code;
def ADD = Opcode.I32_ADD.code;
def I32_CONST = Opcode.I32_CONST.code;
def I32_SUB = Opcode.I32_SUB.code;
def DUP = Opcode.DUP.code;
def BR_IFZ = Opcode.BR_IFZ.code;
def BR_IF = Opcode.BR_IF.code;

def ADD_PROGRAM: Array<byte> = [
	GET, 0,
	GET, 1,
	ADD
];

def COUNTDOWN_PROGRAM: Array<byte> = [
	GET, 0,
	I32_CONST, 1,
	I32_SUB,
	DUP,
	BR_IF, byte.view(-6)
];

def main(args: Array<string>) -> int {
	var x = 31, y = 11;
	if (args.length > 0) x = Ints.parseDecimal(args[0], 0).1;
	if (args.length > 1) y = Ints.parseDecimal(args[1], 0).1;
	match (run(COUNTDOWN_PROGRAM, [x, y])) {
		Trap => {
			System.puts("!trap\n");
			return 1;
		}
		Values(vals) => {
			for (v in vals) {
				System.puti(v);
				System.ln();
			}
		}
	}
	return 0;
}

var stack = Array<int>.new(256);
var locals = Array<int>.new(256);

def trace = false;

def run(program: Array<byte>, inputs: Array<int>) -> Result {
	var pc = 0u;
	var sp = 0;
	for (i < inputs.length) locals[i] = inputs[i];
	while (pc < program.length) {
		if (trace) {
			System.puti(int.view(pc));
			var op = program[pc];
			System.puts(": ");
			System.puti(op);
			System.puts(" =");
			for (i < sp) {
				System.putc(' ');
				System.puti(stack[i]);
			}
			System.ln();
		}
		var op = program[pc++];
		match (op) {
			Opcode.UNREACHABLE.code => {
				return Result.Trap;
			}
			Opcode.NOP.code => {
			}
			Opcode.LOCAL_GET.code => {
				var index = program[pc++]; // TODO: LEB
				stack[sp++] = locals[index];
			}
			Opcode.LOCAL_SET.code => {
				var index = program[pc++]; // TODO: LEB
				locals[index] = stack[sp++];
			}
			Opcode.DROP.code => {
				sp--;
			}
			Opcode.I32_CONST.code => {
				var val = program[pc++];
				stack[sp++] = val;
			}
			Opcode.I32_ADD.code => {
				var y = stack[--sp];
				var x = stack[--sp];
				stack[sp++] = x + y;
			}
			Opcode.I32_SUB.code => {
				var y = stack[--sp];
				var x = stack[--sp];
				stack[sp++] = x - y;
			}
			Opcode.I32_MUL.code => {
				var y = stack[--sp];
				var x = stack[--sp];
				stack[sp++] = x * y;
			}
			Opcode.I32_EQ.code => {
				var y = stack[--sp];
				var x = stack[--sp];
				stack[sp++] = if (x == y, 1, 0);
			}
			Opcode.I32_LT.code => {
				var y = stack[--sp];
				var x = stack[--sp];
				stack[sp++] = if (x < y, 1, 0);
			}
			Opcode.I32_LTEQ.code => {
				var y = stack[--sp];
				var x = stack[--sp];
				stack[sp++] = if (x <= y, 1, 0);
			}
			Opcode.BR.code => {
				var delta = u32.view(i8.view(program[pc++])); // TODO: LEB
				pc += delta;
			}
			Opcode.BR_IF.code => {
				var delta = u32.view(i8.view(program[pc++])); // TODO: LEB
				var x = stack[--sp];
				if (x != 0) pc += delta;
			}
			Opcode.BR_IFZ.code => {
				var delta = u32.view(i8.view(program[pc++])); // TODO: LEB
				var x = stack[--sp];
				if (x == 0) pc += delta;
			}
			Opcode.DUP.code => {
				var val = stack[sp - 1];
				stack[sp++] = val;
			}
			_ => {
				return Result.Trap;
			}
		}
	}
	return Result.Values(Ranges.dup(stack[0 ... sp]));
}

type Result {
	case Trap;
	case Values(vals: Array<int>);
}