// Whamm co-module reflection API as defined at the Wasm import level using pointers.
import "whamm:comodule" component whamm_comodule {
	def get_module_size() -> u32;
	def get_num_types() -> u32;
	def get_num_imports() -> u32;
	def get_num_functions() -> u32;
	def get_num_tables() -> u32;
	def get_num_memories() -> u32;
	def get_num_globals() -> u32;
	def get_num_tags() -> u32;
	def get_num_exports() -> u32;
	def get_num_elements() -> u32;
	def get_num_data() -> u32;
	def get_num_custom_sections() -> u32;
	def is_imported(sect: byte, index: u32) -> bool;
	def read_module_def(start: Pointer, length: u32) -> u32;
	def read_section(sect: byte, start: Pointer, length: u32) -> u32;
	def read_type_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_function_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_import_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_function_body(index: u32, start: Pointer, length: u32) -> u32;
	def read_table_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_memory_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_global_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_tag_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_export_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_element_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_data_def(index: u32, start: Pointer, length: u32) -> u32;
	def read_custom_section(index: u32, start: Pointer, length: u32) -> u32;
}

// Utility that makes the low-level reflection API more usable for Virgil programs
// by hiding the need to deal with pointers.
component Reflect {
	// Pass-through implementations.
	def get_module_size = whamm_comodule.get_module_size;
	def get_num_types = whamm_comodule.get_num_types;
	def get_num_imports = whamm_comodule.get_num_imports;
	def get_num_functions = whamm_comodule.get_num_functions;
	def get_num_tables = whamm_comodule.get_num_tables;
	def get_num_memories = whamm_comodule.get_num_memories;
	def get_num_globals = whamm_comodule.get_num_globals;
	def get_num_tags = whamm_comodule.get_num_tags;
	def get_num_exports = whamm_comodule.get_num_exports;
	def get_num_elements = whamm_comodule.get_num_elements;
	def get_num_data = whamm_comodule.get_num_data;
	def get_num_custom_sections = whamm_comodule.get_num_custom_sections;
	def is_imported = whamm_comodule.is_imported;

	def read_module_def(dst: Range<byte>) -> u32 {
		return whamm_comodule.read_module_def(Pointer.atContents(dst), u32.!(dst.length));
	}

	// Wrappers that take {Range<byte>} instead of pointer/length.
	def read_section = read_into(whamm_comodule.read_section, _, _);
	def read_type_def = read_into(whamm_comodule.read_type_def, _, _);
	def read_function_def = read_into(whamm_comodule.read_function_def, _, _);
	def read_import_def = read_into(whamm_comodule.read_import_def, _, _);
	def read_function_body = read_into(whamm_comodule.read_function_body, _, _);
	def read_table_def = read_into(whamm_comodule.read_table_def, _, _);
	def read_memory_def = read_into(whamm_comodule.read_memory_def, _, _);
	def read_global_def = read_into(whamm_comodule.read_global_def, _, _);
	def read_tag_def = read_into(whamm_comodule.read_tag_def, _, _);
	def read_export_def = read_into(whamm_comodule.read_export_def, _, _);
	def read_element_def = read_into(whamm_comodule.read_element_def, _, _);
	def read_data_def = read_into(whamm_comodule.read_data_def, _, _);
	def read_custom_section = read_into(whamm_comodule.read_custom_section, _, _);

	private def read_into<T>(read: (T, Pointer, u32) -> u32, dst: Range<byte>, arg: T) -> u32 {
		return read(arg, Pointer.atContents(dst), u32.!(dst.length));
	}
}
