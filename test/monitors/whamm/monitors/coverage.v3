type Entry(fid: u32, pc: u32, probe_id: u32, reached: bool) #unboxed;

def MAX_ENTRIES = 1_000_000;
def entries = Array<Entry>.new(MAX_ENTRIES);
var numEntries = 1;

def probe(entry_id: u32) {
	var e_before = entries[entry_id];
	var e_after = (e_before.fid, e_before.pc, e_before.probe_id, true);
	entries[entry_id] = Entry(e_after);
	WhammDynInstr.remove_probe(e_before.probe_id);
}

export "$add_entry" def add_entry(fid: u32, pc: u32, probe_id: u32) -> int {
	var entry_id = numEntries++;
	entries[entry_id] = Entry(fid, pc, probe_id, false);
	return entry_id;
}

def name_buf = Array<byte>.new(1024);

export "wasm:exit" def exit() {
	def puts = Wizeng.puts, puti = Wizeng.puti, putc = Wizeng.putc, ln = Wizeng.ln;
	var prev_fid = u32.max;
	for (i = 1; i < numEntries; i++) {
		var e = entries[i];
		if (e.fid != prev_fid) {
			puts("func ");
			var buf = WhammReflect.read_function_name(name_buf, e.fid);
			if (buf.0.length > 0) {
				putc('\"');
				Wizeng.putr(buf.0);
				putc('\"');
			} else {
				putc('#');
				puti(int.!(e.fid));
			}
			putc(':');
			ln();
			prev_fid = e.fid;
		}
		puts("  +");
		puti(int.!(e.pc));
		puts(if(e.reached,
			"   reached",
			" unreached"));
		ln();
	}
}

export "wasm:opcode:end($add_entry(fid,pc,probe_id))" = probe;
export "wasm:opcode:loop($add_entry(fid,pc,probe_id))" = probe;
export "wasm:opcode:else($add_entry(fid,pc,probe_id))" = probe;
export "wasm:opcode:return($add_entry(fid,pc,probe_id))" = probe;
export "wasm:opcode:return_call($add_entry(fid,pc,probe_id))" = probe;
export "wasm:opcode:return_call_indirect($add_entry(fid,pc,probe_id))" = probe;
export "wasm:opcode:return_call_ref($add_entry(fid,pc,probe_id))" = probe;
