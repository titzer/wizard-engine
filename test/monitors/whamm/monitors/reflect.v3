//@use lib.whamm.WhammCoModule;
//@use lib.wizeng.Wizeng;

def PRINT_NAMES = false;

def main() {
}

def name_buffer = Array<byte>.new(128);

export "wasm:exit" def exit() {
	var result = WhammCoModule.read_module_path(name_buffer).0;
	Wizeng.putr(result);
	puts(": \n");
	print_defs("Type", -1, WhammCoModule.get_num_types, WhammCoModule.read_type_def);
	print_defs("Import", -1, WhammCoModule.get_num_imports, WhammCoModule.read_import_def);
	print_defs("Function", 3, WhammCoModule.get_num_functions, WhammCoModule.read_function_def);
	print_defs("Table", 4, WhammCoModule.get_num_tables, WhammCoModule.read_table_def);
	print_defs("Memory", 5, WhammCoModule.get_num_memories, WhammCoModule.read_memory_def);
	print_defs("Global", 6, WhammCoModule.get_num_globals, WhammCoModule.read_global_def);
	print_defs("Tag", 13, WhammCoModule.get_num_tags, WhammCoModule.read_tag_def);
	print_defs("Export", -1, WhammCoModule.get_num_exports, WhammCoModule.read_export_def);
	print_defs("Elem", -1, WhammCoModule.get_num_elements, WhammCoModule.read_element_def);
	print_defs("Data", -1, WhammCoModule.get_num_data, WhammCoModule.read_data_def);
	print_defs("Custom", -1, WhammCoModule.get_num_custom_sections, WhammCoModule.read_custom_section);
}

def buffer = Array<byte>.new(16);

def puti = Wizeng.puti;
def puts = Wizeng.puts;
def putu(i: u32) { puti(int.!(i)); }

def print_defs(name: string, importable_sect: int, count: void -> u32, read: (Range<byte>, u32) -> (Range<byte>, u32)) {
	var num = count();
	if (num == 0) return;
	puts(name);
	puts("[");
	putu(num);
	puts("]:\n");
	for (i < num) {
		puts(" -");
		if (PRINT_NAMES && importable_sect == 3) {
			var str = WhammCoModule.read_function_name(name_buffer, i).0;
			if (str.length > 0) {
				puts(" \"");
				Wizeng.putr(str);
				puts("\"");
			}
		}

		if (importable_sect >= 0) {
			var import_index = WhammCoModule.get_import_index(byte.!(importable_sect), i);
			if (import_index >= 0) {
				puts(" imported @");
				puti(import_index);
				puts("\n");
				continue;
			}
		}

		var len = read(buffer, i).1;
		var end = if(len > buffer.length, buffer.length, int.!(len));
		for (j < end) {
			puts(" ");
			putb(buffer[j]);
		}
		if (len > buffer.length) {
			puts("... [");
			putu(len);
			puts(" bytes]");
		}
		puts("\n");
	}
}

def hexMap_u = "0123456789ABCDEF";
def putb(b: byte) {
	wizeng.puts(Pointer.atElement(hexMap_u, b >> 4), 1);
	wizeng.puts(Pointer.atElement(hexMap_u, b & 15), 1);
}
