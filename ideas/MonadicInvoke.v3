// Idea: a monadic form of invocation using state passing.
// Why? dealing with errors.
// Problems: lots of polymorphism, have to inline perfectly for it to all melt away.

def invoke(args: Range<Value>, func: (int, int) -> int) -> HostResult {
	return Invoker(args).i().i().apply(func, bi);
}

type Evaluated1<A>(args: Range<Value>, a: A, err: (int, TrapReason)) #unboxed {
	def i() => Evaluated2(args, a, Values.unbox_i(args[1]), err);
	def u() => Evaluated2(args, a, Values.unbox_u(args[1]), err);
	def apply<R>(func: A -> R, box: R -> Value) =>
		if(err.1 != TrapReason.NONE, HostResult.Throw(Trap.new(err.1, null, null)), HostResult.Value1(box(func(a))));
}

type Evaluated2<A, B>(args: Range<Value>, a: A, b: B, err: (int, TrapReason)) #unboxed {
	def i() => Evaluated3(args, a, b, Values.unbox_i(args[2]), err);
	def u() => Evaluated3(args, a, b, Values.unbox_i(args[2]), err);
	def apply<R>(func: (A, B) -> R, box: R -> Value) =>
		if(err.1 != TrapReason.NONE, HostResult.Throw(Trap.new(err.1, null, null)), HostResult.Value1(box(func(a, b))));
}

type Evaluated3<A, B, C>(args: Range<Value>, a: A, b: B, c: C, err: (int, TrapReason)) #unboxed {
	def i() => (a, b, c, Values.unbox_i(args[3]), err);
	def u() => (a, b, c, Values.unbox_u(args[3]), err);
	def apply<R>(func: (A, B, C) -> R, box: R -> Value) =>
		if(err.1 != TrapReason.NONE, HostResult.Throw(Trap.new(err.1, null, null)), HostResult.Value1(box(func(a, b, c))));
}

type Invoker(args: Range<Value>) #unboxed {
	def i() => Evaluated1(args, Values.unbox_i(args[0]), (0, TrapReason.NONE));
}
