/*
Ideas for interpreting optimizing compiler's graph-based IR directly:

1. Recursive DFS evaluation.

Inspired by TurboFan graph reducer algorithm, which starts from the end and uses an explicit stack of nodes to reduce all inputs before reducing a node (except for a loop).

* Differences between interpreter and graph reducer:
  - state of a node is either BOTTOM, WAITING, DONE, or DEAD
  - all outputs of nodes should produce a value/effect/control result, no unevaluated nodes
  - result of a DONE or DEAD node is cached
  - handling of loops is special, need to have a version number or reset upon each iteration

* Basic sketch:

  eval(node)
    if (node.state == DONE || node.state == DEAD) return node.result
    if (node.state == WAITING) throw error
    node.state = WAITING
    match (node.op) 
      MERGE:
        index = -1
        for i in node.input.range
          eval node.input[i]
          if node.input[i].state != DEAD
            index = i
            break
        node.state = DONE
        node.result = if(index < 0, DEAD, LIVE(index))
      LOOP:
        index = -1
        eval node.inputs[0]
        if node.input[0].state == DEAD
            node.state = DEAD
            return
        out = 0
        do
          node.result = LIVE(out)
          node.state = LOOPING
          for n in node.loop_members
            n.state = BOTTOM
          for i in 1 ... node.inputs.length
            eval node.input[i]
            if node.input[i].state == LIVE
              out = LIVE(i)
              continue
        while false

        node.state = DEAD
      PHI:
        eval node.inputs[0]
        if node.input[0].state == DEAD
          node.state = DEAD
        else if node.input[0] == LIVE(i)
          eval node.input[i]
          if node.input[i].state == DEAD
            node.state = DEAD
          else
            node.state = DONE
            node.result = node.input[i].result
      _:
        for i in 0 ... node.inputs.length 
          eval node.input[i]
          if node.input[i].state == DEAD
            node.state = DEAD
            return
        node.result = execute node.op(node.inputs)
        node.state = DONE

* Does not require bi-directional edges, instead uses the recursion stack to keep track of what to execute next
* Stack inherently serializes execution

2. Forward propagation from outputs to inputs

*/
